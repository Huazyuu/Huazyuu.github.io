<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>gee-web</title>
    <url>/2023/09/16/gee-web/</url>
    <content><![CDATA[<h1 id="Gee"><a href="#Gee" class="headerlink" title="Gee"></a>Gee</h1><p><strong>The project is implement goweb frame,which is similar with gin that is a popular goweb frame</strong></p>
<p>Based on geektutu’s project<br>it has the following <strong>advantages</strong> for me:<br>    -To solidify Go standard package as <code>net/http</code><br>    -To Learn Go more deeply<br>    -To know how gin frame work and learn the algorithm in it,for example I kown it’s routes is based on a special tree<br>    -To learn CS English,as you can see,I write in English</p>
<p><a href="https://github.com/geektutu/7days-golang/tree/master">geektutu&#x2F;golang</a></p>
<p>to learn and implement this project,</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gee/</span><br><span class="line">  |--gee.go</span><br><span class="line">  |--router.go</span><br><span class="line">  |--context.go</span><br><span class="line">  |--trie.go</span><br><span class="line">  |--go.mod</span><br><span class="line">main.go</span><br><span class="line">go.mod</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="go-mod-outer"><a href="#go-mod-outer" class="headerlink" title="go mod (outer)"></a>go mod (outer)</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//go mod</span></span><br><span class="line">module example</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.20</span></span><br><span class="line"></span><br><span class="line">require gee v0<span class="number">.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">replace gee =&gt; ./gee</span><br></pre></td></tr></table></figure>

<h2 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;gee&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gee.New()</span><br><span class="line">	r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gee.Context)</span></span> &#123;</span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;&lt;h1&gt;Hello Gee&lt;/h1&gt;&quot;</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.GET(<span class="string">&quot;/hello&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gee.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">// expect /hello?name=geektutu</span></span><br><span class="line">		c.String(http.StatusOK, <span class="string">&quot;hello %s, you&#x27;re at %s\n&quot;</span>, c.Query(<span class="string">&quot;name&quot;</span>), c.Path)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.POST(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gee.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gee.H&#123;</span><br><span class="line">			<span class="string">&quot;username&quot;</span>: c.PostForm(<span class="string">&quot;username&quot;</span>),</span><br><span class="line">			<span class="string">&quot;password&quot;</span>: c.PostForm(<span class="string">&quot;password&quot;</span>),</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.Run(<span class="string">&quot;:9999&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -i http://localhost:9999/</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 12 Aug 2019 16:52:52 GMT</span><br><span class="line">Content-Length: 18</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">&lt;h1&gt;Hello Gee&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">$ curl <span class="string">&quot;http://localhost:9999/hello?name=geektutu&quot;</span></span><br><span class="line">hello geektutu, you<span class="string">&#x27;re at /hello</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ curl &quot;http://localhost:9999/login&quot; -X POST -d &#x27;</span>username=geektutu&amp;password=1234<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;&quot;password&quot;:&quot;1234&quot;,&quot;username&quot;:&quot;geektutu&quot;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ curl &quot;http://localhost:9999/xxx&quot;</span></span><br><span class="line"><span class="string">404 NOT FOUND: /xxx</span></span><br></pre></td></tr></table></figure>

<h2 id="package-gee"><a href="#package-gee" class="headerlink" title="package gee"></a>package gee</h2><h3 id="go-mod-inner"><a href="#go-mod-inner" class="headerlink" title="go mod (inner)"></a>go mod (inner)</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">module gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="gee-go"><a href="#gee-go" class="headerlink" title="gee.go"></a>gee.go</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// pattern</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	GET  = <span class="string">&quot;GET&quot;</span></span><br><span class="line">	POST = <span class="string">&quot;POST&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// HandlerFunc defines the request handler used by gee</span></span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(*Context)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Engine implement the interface of ServeHTTP</span></span><br><span class="line"><span class="keyword">type</span> Engine <span class="keyword">struct</span> &#123;</span><br><span class="line">	router *router</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New is the constructor of gee.Engine</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span></span> *Engine &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;Engine&#123;router: newRouter()&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> addRoute(method <span class="type">string</span>, pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">	engine.router.addRoute(method, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET defines the method to add GET request</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> GET(pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">	engine.addRoute(GET, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST defines the method to add POST request</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> POST(pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">	engine.addRoute(POST, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run defines the method to start a http server</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> Run(addr <span class="type">string</span>) (err <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> http.ListenAndServe(addr, engine)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServeHTTP Type of Handler always contains ServeHTTP method interface</span></span><br><span class="line"><span class="comment">// in code ServerHttp is defined on Engine struct to handle HTTP request</span></span><br><span class="line"><span class="comment">// When a http request arrives at the web server ,Go&#x27;s http package will use ServeHTTP method and pass some related params</span></span><br><span class="line"><span class="comment">// In method ,decide how to handle the request based on the method of the request (GET, POST, etc.) and the path of the request (URL routing)</span></span><br><span class="line"><span class="comment">// code can look up the route map, find the corresponding handler,</span></span><br><span class="line"><span class="comment">// and pass requests and responses to this handler to complete the logic.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">	c := newContext(w, req)</span><br><span class="line">	engine.router.handle(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="router-go"><a href="#router-go" class="headerlink" title="router.go"></a>router.go</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//router is a container</span></span><br><span class="line"><span class="comment">//route is composed a URLPath and a func/method</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// router routerType</span></span><br><span class="line"><span class="comment">// roots key eg, roots[&#x27;GET&#x27;] roots[&#x27;POST&#x27;]</span></span><br><span class="line"><span class="comment">// handlers key eg, handlers[&#x27;GET-/p/:lang/doc&#x27;], handlers[&#x27;POST-/p/book&#x27;]</span></span><br><span class="line"><span class="keyword">type</span> router <span class="keyword">struct</span> &#123;</span><br><span class="line">	roots    <span class="keyword">map</span>[<span class="type">string</span>]*node</span><br><span class="line">	handlers <span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// newRouter init a new router</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newRouter</span><span class="params">()</span></span> *router &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;router&#123;</span><br><span class="line">		roots:    <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]*node),</span><br><span class="line">		handlers: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parsePattern only one &#x27;*&#x27; is allowed</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parsePattern</span><span class="params">(pattern <span class="type">string</span>)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line">	vs := strings.Split(pattern, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">	parts := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">for</span> _, item := <span class="keyword">range</span> vs &#123;</span><br><span class="line">		<span class="keyword">if</span> item != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">			parts = <span class="built_in">append</span>(parts, item)</span><br><span class="line">			<span class="keyword">if</span> item[<span class="number">0</span>] == <span class="string">&#x27;*&#x27;</span> &#123;</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> parts</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// addRoute add a new route</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span></span> addRoute(method <span class="type">string</span>, pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">	<span class="comment">//parse the path pattern of the routing rule into a string slice</span></span><br><span class="line">	<span class="comment">//through `parsePattern` func</span></span><br><span class="line">	<span class="comment">//This slice contains the parts of the path pattern</span></span><br><span class="line">	parts := parsePattern(pattern)</span><br><span class="line">	<span class="comment">//Generate a unique key that connect HTTP request method and routing rule path together</span></span><br><span class="line">	<span class="comment">//to associate the handler func with the routing rule.</span></span><br><span class="line">	key := method + <span class="string">&quot;-&quot;</span> + pattern</span><br><span class="line">	<span class="comment">// if not existed,create a new node</span></span><br><span class="line">	_, ok := r.roots[method]</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		r.roots[method] = &amp;node&#123;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//Call the Trie tree&#x27;s insert method to insert the routing rule&#x27;s path pattern into the Trie tree.</span></span><br><span class="line">	<span class="comment">//This builds the path structure of the Trie tree so that next routes match.</span></span><br><span class="line">	r.roots[method].insert(pattern, parts, <span class="number">0</span>)</span><br><span class="line">	<span class="comment">//Associates the handler with a unique key</span></span><br><span class="line">	<span class="comment">//that can be used to find the corresponding handler in next route matches.</span></span><br><span class="line">	r.handlers[key] = handler</span><br><span class="line">	log.Printf(<span class="string">&quot;Route %4s - %s&quot;</span>, method, pattern)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getRoute getRoute</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span></span> getRoute(method, path <span class="type">string</span>) (*node, <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>) &#123;</span><br><span class="line">	searchParts := parsePattern(path)</span><br><span class="line">	<span class="comment">//create an empty map,to reflect params in path</span></span><br><span class="line">	params := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">	<span class="comment">//get the Trie tree root node associated with a given HTTP request method,</span></span><br><span class="line">	<span class="comment">//and if no associated root node exists root , returns nil indicates that no routing rule was matched.</span></span><br><span class="line">	root, ok := r.roots[method]</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//Call the method of the Trie tree to find matching nodes in the Trie tree</span></span><br><span class="line">	<span class="comment">//based on the search path pattern n</span></span><br><span class="line">	n := root.search(searchParts, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">if</span> n != <span class="literal">nil</span> &#123;</span><br><span class="line">		parts := parsePattern(n.pattern)</span><br><span class="line">		<span class="keyword">for</span> index, part := <span class="keyword">range</span> parts &#123;</span><br><span class="line">			<span class="keyword">if</span> part[<span class="number">0</span>] == <span class="string">&#x27;:&#x27;</span> &#123;</span><br><span class="line">				<span class="comment">//store the part and delete &#x27;:&#x27;</span></span><br><span class="line">				params[part[<span class="number">1</span>:]] = searchParts[index]</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> part[<span class="number">0</span>] == <span class="string">&#x27;*&#x27;</span> &amp;&amp; <span class="built_in">len</span>(part) &gt; <span class="number">1</span> &#123;</span><br><span class="line">				params[part[<span class="number">1</span>:]] = strings.Join(searchParts[index:], <span class="string">&quot;/&quot;</span>)</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> n, params</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span></span> handle(c *Context) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//key := req.Method + &quot;-&quot; + req.URL.Path</span></span><br><span class="line">	<span class="comment">//creates a key variable,</span></span><br><span class="line">	<span class="comment">//which is a string type connected from HTTP request ,method:req.Method and path:req.URL.Path</span></span><br><span class="line">	<span class="comment">//This key will be used to look up the route map to determine which handler should be used to handle the request.</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//Using the router&#x27;s method,</span></span><br><span class="line">	<span class="comment">//find the routing rule node that matches the request and the get parameters</span></span><br><span class="line">	<span class="comment">//based on the HTTP request&#x27;s getRoute method (c.Method) and path (c.Path)</span></span><br><span class="line">	n, params := r.getRoute(c.Method, c.Path)</span><br><span class="line">	<span class="keyword">if</span> n != <span class="literal">nil</span> &#123;</span><br><span class="line">		c.Params = params</span><br><span class="line">		key := c.Method + <span class="string">&quot;-&quot;</span> + n.pattern</span><br><span class="line">		<span class="comment">//(c):This is the syntax of the function call,</span></span><br><span class="line">		<span class="comment">//which means calling r.handlers[key] the obtained function and passing the context c as an argument to the function</span></span><br><span class="line">		r.handlers[key](c)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		c.String(http.StatusNotFound, <span class="string">&quot;404 NOT FOUND: %s\n&quot;</span>, c.Path)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="router-test-go"><a href="#router-test-go" class="headerlink" title="router_test.go"></a>router_test.go</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;reflect&quot;</span></span><br><span class="line">	<span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newTestRouter</span><span class="params">()</span></span> *router &#123;</span><br><span class="line">	r := newRouter()</span><br><span class="line">	r.addRoute(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	r.addRoute(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/hello/:name&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	r.addRoute(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/hello/b/c&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	r.addRoute(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/hi/:name&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	r.addRoute(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/assets/*filepath&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestParsePattern</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	ok := reflect.DeepEqual(parsePattern(<span class="string">&quot;/p/:name&quot;</span>), []<span class="type">string</span>&#123;<span class="string">&quot;p&quot;</span>, <span class="string">&quot;:name&quot;</span>&#125;)</span><br><span class="line">	ok = ok &amp;&amp; reflect.DeepEqual(parsePattern(<span class="string">&quot;/p/*&quot;</span>), []<span class="type">string</span>&#123;<span class="string">&quot;p&quot;</span>, <span class="string">&quot;*&quot;</span>&#125;)</span><br><span class="line">	ok = ok &amp;&amp; reflect.DeepEqual(parsePattern(<span class="string">&quot;/p/*name/*&quot;</span>), []<span class="type">string</span>&#123;<span class="string">&quot;p&quot;</span>, <span class="string">&quot;*name&quot;</span>&#125;)</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		t.Fatal(<span class="string">&quot;test parsePattern failed&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetRoute</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	r := newTestRouter()</span><br><span class="line">	n, ps := r.getRoute(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/hello/geektutu&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> n == <span class="literal">nil</span> &#123;</span><br><span class="line">		t.Fatal(<span class="string">&quot;nil shouldn&#x27;t be returned&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> n.pattern != <span class="string">&quot;/hello/:name&quot;</span> &#123;</span><br><span class="line">		t.Fatal(<span class="string">&quot;should match /hello/:name&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ps[<span class="string">&quot;name&quot;</span>] != <span class="string">&quot;geektutu&quot;</span> &#123;</span><br><span class="line">		t.Fatal(<span class="string">&quot;name should be equal to &#x27;geektutu&#x27;&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;matched path: %s, params[&#x27;name&#x27;]: %s\n&quot;</span>, n.pattern, ps[<span class="string">&quot;name&quot;</span>])</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="context-go"><a href="#context-go" class="headerlink" title="context.go"></a>context.go</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// for web server delay *http.Request build http.ResponseWriter,</span></span><br><span class="line"><span class="comment">// to implement a complete response needing Header and Body</span></span><br><span class="line"><span class="comment">// Header holds StatusCode ContentType data,therefore,encapsulate these codes is necessary</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// H is similar with gin.H,a map type</span></span><br><span class="line"><span class="keyword">type</span> H <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context holds much web information</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// origin objs</span></span><br><span class="line">	Writer http.ResponseWriter</span><br><span class="line">	Req    *http.Request</span><br><span class="line">	<span class="comment">// request info</span></span><br><span class="line">	Path   <span class="type">string</span></span><br><span class="line">	Method <span class="type">string</span></span><br><span class="line">	Params <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span></span><br><span class="line">	<span class="comment">// response info</span></span><br><span class="line">	StatusCode <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Param(key <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">	value, _ := c.Params[key]</span><br><span class="line">	<span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// newContext is to init Context type</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newContext</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> *Context &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;Context&#123;</span><br><span class="line">		Writer: w,</span><br><span class="line">		Req:    req,</span><br><span class="line">		Path:   req.URL.Path,</span><br><span class="line">		Method: req.Method,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PostForm can get form params from front_end</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> PostForm(key <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> c.Req.FormValue(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Query can get params form users&#x27; search params</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Query(key <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">	<span class="comment">//codes get Req from c,which holds HTTP request info</span></span><br><span class="line">	<span class="comment">//then get request&#x27;s URL to query,</span></span><br><span class="line">	<span class="comment">//query key-value pairs from URL,which is always appear after url &#x27;?&#x27;</span></span><br><span class="line">	<span class="comment">//Get method get the specific key,return its value,</span></span><br><span class="line">	<span class="comment">//if there is no specific key,return empty string</span></span><br><span class="line">	<span class="keyword">return</span> c.Req.URL.Query().Get(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Status reflect web server status</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Status(code <span class="type">int</span>) &#123;</span><br><span class="line">	c.StatusCode = code</span><br><span class="line">	c.Writer.WriteHeader(code)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetHeader implement method to set HTTP request header</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> SetHeader(key <span class="type">string</span>, value <span class="type">string</span>) &#123;</span><br><span class="line">	c.Writer.Header().Set(key, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String return string data to client</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> String(code <span class="type">int</span>, format <span class="type">string</span>, values ...<span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">	c.SetHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">	c.Status(code)</span><br><span class="line">	<span class="comment">//writes the byte array to c.Writer ,</span></span><br><span class="line">	<span class="comment">//which is the write stream of the HTTP response.</span></span><br><span class="line">	<span class="comment">//This causes the formatted text to be sent to the client as the body of the HTTP response.</span></span><br><span class="line">	_, _ = c.Writer.Write([]<span class="type">byte</span>(fmt.Sprintf(format, values...)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON return json data to client</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> JSON(code <span class="type">int</span>, obj <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">	c.SetHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">	c.Status(code)</span><br><span class="line">	<span class="comment">//Creates a new JSON encoder (json.Encoder) and c.Writer associates it with ,</span></span><br><span class="line">	<span class="comment">//which means that the encoded JSON data will be written to the write stream of the HTTP response.</span></span><br><span class="line">	encoder := json.NewEncoder(c.Writer)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//encode the Go dataStructure into JSON format using the JSON encoder created</span></span><br><span class="line">	<span class="comment">//and writes the result into c.Writer</span></span><br><span class="line">	<span class="comment">//This is done by serializing the data into a JSON string and writing it to the response body.</span></span><br><span class="line">	<span class="keyword">if</span> err := encoder.Encode(obj); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		http.Error(c.Writer, err.Error(), <span class="number">500</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Data return data info to client</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Data(code <span class="type">int</span>, data []<span class="type">byte</span>) &#123;</span><br><span class="line">	c.Status(code)</span><br><span class="line">	_, _ = c.Writer.Write(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML return html template page to client</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> HTML(code <span class="type">int</span>, html <span class="type">string</span>) &#123;</span><br><span class="line">	<span class="comment">//uses c.Writer ( http.ResponseWriter ) to data write a byte array to the body of the HTTP response.</span></span><br><span class="line">	<span class="comment">//This is a way to send the raw data to the client as the response body.</span></span><br><span class="line">	c.SetHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html&quot;</span>)</span><br><span class="line">	c.Status(code)</span><br><span class="line">	_, _ = c.Writer.Write([]<span class="type">byte</span>(html))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="trie-go"><a href="#trie-go" class="headerlink" title="trie.go"></a>trie.go</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// for web server delay *http.Request build http.ResponseWriter,</span></span><br><span class="line"><span class="comment">// to implement a complete response needing Header and Body</span></span><br><span class="line"><span class="comment">// Header holds StatusCode ContentType data,therefore,encapsulate these codes is necessary</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// H is similar with gin.H,a map type</span></span><br><span class="line"><span class="keyword">type</span> H <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context holds much web information</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// origin objs</span></span><br><span class="line">	Writer http.ResponseWriter</span><br><span class="line">	Req    *http.Request</span><br><span class="line">	<span class="comment">// request info</span></span><br><span class="line">	Path   <span class="type">string</span></span><br><span class="line">	Method <span class="type">string</span></span><br><span class="line">	Params <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span></span><br><span class="line">	<span class="comment">// response info</span></span><br><span class="line">	StatusCode <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Param(key <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">	value, _ := c.Params[key]</span><br><span class="line">	<span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// newContext is to init Context type</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newContext</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> *Context &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;Context&#123;</span><br><span class="line">		Writer: w,</span><br><span class="line">		Req:    req,</span><br><span class="line">		Path:   req.URL.Path,</span><br><span class="line">		Method: req.Method,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PostForm can get form params from front_end</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> PostForm(key <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> c.Req.FormValue(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Query can get params form users&#x27; search params</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Query(key <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">	<span class="comment">//codes get Req from c,which holds HTTP request info</span></span><br><span class="line">	<span class="comment">//then get request&#x27;s URL to query,</span></span><br><span class="line">	<span class="comment">//query key-value pairs from URL,which is always appear after url &#x27;?&#x27;</span></span><br><span class="line">	<span class="comment">//Get method get the specific key,return its value,</span></span><br><span class="line">	<span class="comment">//if there is no specific key,return empty string</span></span><br><span class="line">	<span class="keyword">return</span> c.Req.URL.Query().Get(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Status reflect web server status</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Status(code <span class="type">int</span>) &#123;</span><br><span class="line">	c.StatusCode = code</span><br><span class="line">	c.Writer.WriteHeader(code)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetHeader implement method to set HTTP request header</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> SetHeader(key <span class="type">string</span>, value <span class="type">string</span>) &#123;</span><br><span class="line">	c.Writer.Header().Set(key, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String return string data to client</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> String(code <span class="type">int</span>, format <span class="type">string</span>, values ...<span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">	c.SetHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">	c.Status(code)</span><br><span class="line">	<span class="comment">//writes the byte array to c.Writer ,</span></span><br><span class="line">	<span class="comment">//which is the write stream of the HTTP response.</span></span><br><span class="line">	<span class="comment">//This causes the formatted text to be sent to the client as the body of the HTTP response.</span></span><br><span class="line">	_, _ = c.Writer.Write([]<span class="type">byte</span>(fmt.Sprintf(format, values...)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON return json data to client</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> JSON(code <span class="type">int</span>, obj <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">	c.SetHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">	c.Status(code)</span><br><span class="line">	<span class="comment">//Creates a new JSON encoder (json.Encoder) and c.Writer associates it with ,</span></span><br><span class="line">	<span class="comment">//which means that the encoded JSON data will be written to the write stream of the HTTP response.</span></span><br><span class="line">	encoder := json.NewEncoder(c.Writer)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//encode the Go dataStructure into JSON format using the JSON encoder created</span></span><br><span class="line">	<span class="comment">//and writes the result into c.Writer</span></span><br><span class="line">	<span class="comment">//This is done by serializing the data into a JSON string and writing it to the response body.</span></span><br><span class="line">	<span class="keyword">if</span> err := encoder.Encode(obj); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		http.Error(c.Writer, err.Error(), <span class="number">500</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Data return data info to client</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Data(code <span class="type">int</span>, data []<span class="type">byte</span>) &#123;</span><br><span class="line">	c.Status(code)</span><br><span class="line">	_, _ = c.Writer.Write(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML return html template page to client</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> HTML(code <span class="type">int</span>, html <span class="type">string</span>) &#123;</span><br><span class="line">	<span class="comment">//uses c.Writer ( http.ResponseWriter ) to data write a byte array to the body of the HTTP response.</span></span><br><span class="line">	<span class="comment">//This is a way to send the raw data to the client as the response body.</span></span><br><span class="line">	c.SetHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html&quot;</span>)</span><br><span class="line">	c.Status(code)</span><br><span class="line">	_, _ = c.Writer.Write([]<span class="type">byte</span>(html))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Plan9_18</title>
    <url>/2023/09/18/Plan9-18/</url>
    <content><![CDATA[<h1 id="0x12"><a href="#0x12" class="headerlink" title="0x12"></a>0x12</h1><p>1.CET-6 letters 30 min per day<br>2.geeWeb geeORM reproduction<br>3.OS</p>
]]></content>
      <categories>
        <category>Planning</category>
      </categories>
      <tags>
        <tag>Planning</tag>
      </tags>
  </entry>
  <entry>
    <title>lc9-18</title>
    <url>/2023/09/18/lc9-18/</url>
    <content><![CDATA[<h1 id="337-House-Robber-III"><a href="#337-House-Robber-III" class="headerlink" title="337. House Robber III"></a><a href="https://leetcode.cn/problems/house-robber-iii/">337. House Robber III</a></h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> TreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    Val   <span class="type">int</span></span><br><span class="line">    Left  *TreeNode</span><br><span class="line">    Right *TreeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rob</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    max := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">          <span class="keyword">return</span> a</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> TreeDp <span class="function"><span class="keyword">func</span><span class="params">(cur *TreeNode)</span></span> []<span class="type">int</span></span><br><span class="line">    TreeDp = <span class="function"><span class="keyword">func</span><span class="params">(cur *TreeNode)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> cur == <span class="literal">nil</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> []<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//dp[0] means not rob</span></span><br><span class="line">       <span class="comment">//dp[1] means rob</span></span><br><span class="line">       ldp := TreeDp(cur.Left)</span><br><span class="line">       rdp := TreeDp(cur.Right)</span><br><span class="line">       <span class="comment">//If don&#x27;t steal the current node,</span></span><br><span class="line">       <span class="comment">//then the left and right children can steal,</span></span><br><span class="line">       <span class="comment">//and as for whether to steal or not, you must choose the largest</span></span><br><span class="line">       noGet := max(ldp[<span class="number">0</span>], ldp[<span class="number">1</span>]) + max(rdp[<span class="number">0</span>], rdp[<span class="number">1</span>])</span><br><span class="line">       <span class="comment">//if rot the current node,then left and right can not be robbed</span></span><br><span class="line">       get := cur.Val + ldp[<span class="number">0</span>] + rdp[<span class="number">0</span>]</span><br><span class="line">       <span class="keyword">return</span> []<span class="type">int</span>&#123;noGet, get&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ret := TreeDp(root)</span><br><span class="line">    <span class="keyword">return</span> max(ret[<span class="number">0</span>], ret[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>lc9-17</title>
    <url>/2023/09/17/lc9-17/</url>
    <content><![CDATA[<h1 id="213-House-Robber-II"><a href="#213-House-Robber-II" class="headerlink" title="213. House Robber II"></a><a href="https://leetcode.cn/problems/house-robber-ii/">213. House Robber II</a></h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="comment">// leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rob213</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    max := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">          <span class="keyword">return</span> a</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">    robCase := <span class="function"><span class="keyword">func</span><span class="params">(start, end <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> start == end &#123;</span><br><span class="line">          <span class="keyword">return</span> nums[start]</span><br><span class="line">       &#125;</span><br><span class="line">       dp := <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">       dp[start] = nums[start]</span><br><span class="line">       dp[start+<span class="number">1</span>] = max(nums[start], nums[start+<span class="number">1</span>])</span><br><span class="line">       <span class="keyword">for</span> i := <span class="number">2</span>; i &lt;= end; i++ &#123;</span><br><span class="line">          dp[i] = max(dp[i<span class="number">-1</span>], dp[i<span class="number">-2</span>]+nums[i])</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> dp[end]</span><br><span class="line">    &#125;</span><br><span class="line">    case1 := robCase(<span class="number">0</span>, n<span class="number">-2</span>)</span><br><span class="line">    case2 := robCase(<span class="number">1</span>, n<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> max(case1, case2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>WebCrawler_BaiduTranslation</title>
    <url>/2023/09/16/WebCrawler-BaiduTranslation/</url>
    <content><![CDATA[<h1 id="WebCrawler-based-on-BaiduTranslation-interface"><a href="#WebCrawler-based-on-BaiduTranslation-interface" class="headerlink" title="WebCrawler based on BaiduTranslation interface"></a>WebCrawler based on BaiduTranslation interface</h1><ul>
<li><p>input letter you want to translate</p>
</li>
<li><p>post your letter to baidu translate interface</p>
</li>
<li><p>input <code>exit</code> to finish it</p>
</li>
<li><p>if there is no result,shell will output “没有查询到结果”</p>
</li>
<li><p>based on Go，using standard library<code>net/http</code>and<code>encoding/json</code>package operate HTTP post andJSON parse</p>
</li>
</ul>
<p>Codes are as follows</p>
<span id="more"></span>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bytes&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TranslationResult <span class="keyword">struct</span> &#123;</span><br><span class="line">	K <span class="type">string</span> <span class="string">`json:&quot;k&quot;`</span></span><br><span class="line">	V <span class="type">string</span> <span class="string">`json:&quot;v&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 确定要访问的URL</span></span><br><span class="line">	url := <span class="string">&quot;https://fanyi.baidu.com/sug&quot;</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;退出输入 exit&quot;</span>)</span><br><span class="line">		<span class="comment">// 获取用户输入的翻译内容</span></span><br><span class="line">		fmt.Print(<span class="string">&quot;请输入要翻译的内容：&quot;</span>)</span><br><span class="line">		<span class="keyword">var</span> word <span class="type">string</span></span><br><span class="line">		_, err := fmt.Scan(&amp;word)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;输入错误:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> word == <span class="string">&quot;exit&quot;</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建请求数据</span></span><br><span class="line">		data := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;kw&quot;</span>: word&#125;</span><br><span class="line">		jsonData, err := json.Marshal(data)</span><br><span class="line">		<span class="comment">//fmt.Println(&quot;----------------------------------------&quot;, string(jsonData))</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;JSON编码错误:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建HTTP请求</span></span><br><span class="line">		req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, url, bytes.NewBuffer(jsonData))</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;创建HTTP请求错误:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 设置请求头</span></span><br><span class="line">		req.Header.Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=UTF-8&quot;</span>)</span><br><span class="line">		req.Header.Set(<span class="string">&quot;Content-Length&quot;</span>, fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, <span class="built_in">len</span>(jsonData)))</span><br><span class="line">		req.Header.Set(<span class="string">&quot;X-Requested-With&quot;</span>, <span class="string">&quot;XMLHttpRequest&quot;</span>)</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 发送HTTP请求</span></span><br><span class="line">		client := &amp;http.Client&#123;&#125;</span><br><span class="line">		res, err := client.Do(req)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;发送HTTP请求错误:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">defer</span> res.Body.Close()</span><br><span class="line"></span><br><span class="line">		<span class="comment">//actualURL := req.URL.String()</span></span><br><span class="line">		<span class="comment">//fmt.Println(&quot;实际请求的URL:&quot;, actualURL)</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 解析响应</span></span><br><span class="line">		<span class="comment">// 解析响应</span></span><br><span class="line">		<span class="keyword">var</span> response <span class="keyword">struct</span> &#123;</span><br><span class="line">			Data []TranslationResult <span class="string">`json:&quot;data&quot;`</span></span><br><span class="line">		&#125;</span><br><span class="line">		err = json.NewDecoder(res.Body).Decode(&amp;response)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;解析响应错误:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(response.Data) == <span class="number">0</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;没有查询到结果&quot;</span>)</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 打印结果</span></span><br><span class="line">		filePath := <span class="string">&quot;./doc.log&quot;</span></span><br><span class="line">		file, err := os.OpenFile(filePath, os.O_APPEND|os.O_CREATE|os.O_WRONLY, <span class="number">0644</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;打开文件时出错:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 遍历查询结果并同时写入文件和打印</span></span><br><span class="line">		<span class="keyword">for</span> k, result := <span class="keyword">range</span> response.Data &#123;</span><br><span class="line">			line := fmt.Sprintf(<span class="string">&quot;%d---%s\n%s\n&quot;</span>, k+<span class="number">1</span>, result.K, result.V)</span><br><span class="line">			fmt.Print(line)</span><br><span class="line">			_, err = file.WriteString(line)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				fmt.Println(<span class="string">&quot;写入文件时出错:&quot;</span>, err)</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>WebCrawler</tag>
      </tags>
  </entry>
  <entry>
    <title>lc-9_16</title>
    <url>/2023/09/16/lc9-16/</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/house-robber/">198. 打家劫舍</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rob</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	n:=<span class="built_in">len</span>(nums)</span><br><span class="line">	max := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">			<span class="keyword">return</span> a</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> b</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">	&#125;</span><br><span class="line">	dp := <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">	dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">	dp[<span class="number">1</span>] = max(nums[<span class="number">0</span>], nums[<span class="number">1</span>])</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">2</span>; i &lt; n; i++ &#123;</span><br><span class="line">		dp[i]=max(dp[i<span class="number">-1</span>],dp[i<span class="number">-2</span>]+nums[i])</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dp[n<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>lc9_15</title>
    <url>/2023/09/15/lc9-15/</url>
    <content><![CDATA[<h1 id="LCP-50-宝石补给"><a href="#LCP-50-宝石补给" class="headerlink" title="LCP 50. 宝石补给"></a><a href="https://leetcode.cn/problems/WHnhjV/">LCP 50. 宝石补给</a></h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// LCP 50  2023-09-15 09:00:56</span></span><br><span class="line"><span class="comment">// leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">giveGem</span><span class="params">(gem []<span class="type">int</span>, operations [][]<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    min := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line">          <span class="keyword">return</span> a</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">    max := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">          <span class="keyword">return</span> a</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, operation := <span class="keyword">range</span> operations &#123;</span><br><span class="line">       <span class="comment">//fmt.Println(operation)</span></span><br><span class="line">       a, b := operation[<span class="number">0</span>], operation[<span class="number">1</span>]</span><br><span class="line">       num := gem[a] / <span class="number">2</span></span><br><span class="line">       gem[a] -= num</span><br><span class="line">       gem[b] += num</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    minN, maxN := gem[<span class="number">0</span>], gem[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> gem &#123;</span><br><span class="line">       minN = min(minN, v)</span><br><span class="line">       maxN = max(maxN, v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxN - minN</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>lc9_14</title>
    <url>/2023/09/14/lc9-14/</url>
    <content><![CDATA[<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1222  2023-09-14 09:52:09</span></span><br><span class="line"><span class="comment">// leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queensAttacktheKing</span><span class="params">(queens [][]<span class="type">int</span>, king []<span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">	board := <span class="built_in">make</span>([][]<span class="type">bool</span>, <span class="number">8</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> board &#123;</span><br><span class="line">		board[i] = <span class="built_in">make</span>([]<span class="type">bool</span>, <span class="number">8</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, queen := <span class="keyword">range</span> queens &#123;</span><br><span class="line">		board[queen[<span class="number">0</span>]][queen[<span class="number">1</span>]] = <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//八个方向traverse</span></span><br><span class="line">	dirs := [][<span class="number">2</span>]<span class="type">int</span>&#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;&#125;</span><br><span class="line">	<span class="keyword">var</span> ret [][]<span class="type">int</span></span><br><span class="line">	<span class="keyword">for</span> _, dir := <span class="keyword">range</span> dirs &#123;</span><br><span class="line">		dx, dy := dir[<span class="number">0</span>], dir[<span class="number">1</span>]</span><br><span class="line">		x, y := king[<span class="number">0</span>], king[<span class="number">1</span>]</span><br><span class="line">		<span class="keyword">for</span> x &gt;= <span class="number">0</span> &amp;&amp; x &lt; <span class="number">8</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; <span class="number">8</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> board[x][y] &#123;</span><br><span class="line">				ret = <span class="built_in">append</span>(ret, []<span class="type">int</span>&#123;x, y&#125;)</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">			x += dx</span><br><span class="line">			y += dy</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>lc9.13</title>
    <url>/2023/09/13/lc9-13/</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/check-knight-tour-configuration/">2596. 检查骑士巡视方案</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2596  2023-09-13 09:19:33</span></span><br><span class="line"><span class="comment">// leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkValidGrid</span><span class="params">(grid [][]<span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> grid[<span class="number">0</span>][<span class="number">0</span>] != <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	n := <span class="built_in">len</span>(grid)</span><br><span class="line">	coord := <span class="built_in">make</span>([][<span class="number">2</span>]<span class="type">int</span>, n*n)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n; j++ &#123;</span><br><span class="line">			coord[grid[i][j]][<span class="number">0</span>], coord[grid[i][j]][<span class="number">1</span>] = i, j</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n*n; i++ &#123;</span><br><span class="line">		deltaX, deltaY := coord[i][<span class="number">0</span>]-coord[i<span class="number">-1</span>][<span class="number">0</span>], coord[i][<span class="number">1</span>]-coord[i<span class="number">-1</span>][<span class="number">1</span>]</span><br><span class="line">		<span class="keyword">if</span> abs(deltaX*deltaY) != <span class="number">2</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x &gt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> -x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>0x11Plan</title>
    <url>/2023/09/11/0x11Plan/</url>
    <content><![CDATA[<p>1.Leetcode per pra<br>2.Feishu doc<br>3.goweb<br>4.CS English<br>5.OS<br>6.redis</p>
]]></content>
      <categories>
        <category>Planing</category>
      </categories>
      <tags>
        <tag>Planing</tag>
      </tags>
  </entry>
  <entry>
    <title>GoFAQ</title>
    <url>/2023/09/10/GoFAQ/</url>
    <content><![CDATA[<h1 id="翻译部分官方FAQ"><a href="#翻译部分官方FAQ" class="headerlink" title="翻译部分官方FAQ"></a><a href="https://go.dev/doc/faq#Origins">翻译部分官方FAQ</a></h1><p><strong>不要通过共享内存进行通信。相反，通过通信来共享内存。</strong></p>
<h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>生产软件通常是用C++或Java编写的，GitHub不存在，大多数计算机还没有多处理器，除了Visual Studio和Eclipse之外，几乎没有IDE或其他高级工具可用，更不用说在Internet上免费了.<br>多处理器正在变得普遍,大多数语言在高效和安全地编程方面几乎没有帮助</p>
<p>多核CPU的兴起认为，一种语言应该为某种并发或并行性提供一流的支持。为了使资源管理在大型并发程序中易于处理，需要垃圾回收或至少某种安全的自动内存管理。</p>
<span id="more"></span>

<p>吉祥物和标志由Renée French设计</p>
<p>这种语言被称为Go。<br>“golang”绰号的出现是因为该网站最初是 golang.org的.无论如何，该语言的名称只是普通的Go。</p>
<p>Go 通过尝试将解释型动态类型语言的编程便利性与静态类型编译语言的效率和安全性相结合来解决这些问题。它还旨在实现现代化，支持网络和多核计算。最后，使用 Go 的目的是：在一台计算机上构建一个大型可执行文件最多需要几秒钟。<br>为了实现这些目标，需要解决许多语言问题：<strong>富有表现力但轻量级的类型系统;并发和垃圾回收;刚性依赖规范;</strong></p>
<p>Go 主要属于 C 系列（基本语法），来自 Pascal&#x2F;Modula&#x2F;Oberon 家族（声明、包）的重要输入，以及受 Tony Hoare CSP 启发的语言的一些想法，如 Newsqueak 和 Limbo（并发）。但是，它是一种全面的新语言。在各个方面，语言都是通过思考程序员做什么以及如何使编程（至少我们所做的那种编程）更有效，这意味着更多的乐趣来设计的。</p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="Go-程序是否与-C-C-程序链接？"><a href="#Go-程序是否与-C-C-程序链接？" class="headerlink" title="Go 程序是否与 C&#x2F;C++ 程序链接？"></a>Go 程序是否与 C&#x2F;C++ 程序链接？</h3><p>在同一地址空间中一起使用C和Go，但这不是天生的，可能需要特殊的接口软件。<br>此外，将 C 与 Go 代码链接会放弃 Go 提供的内存安全和堆栈管理属性。有时使用 C 库来解决问题是绝对必要的，但这样做总是会带来纯 Go 代码不存在的风险元素，因此请小心这样做。<br>如果你确实需要将 C 与 Go 一起使用，如何继续取决于 Go 编译器的实现。Go 团队支持三种 Go 编译器实现。<br>这些是 <code>gc</code> 默认编译器，它使用GCC后端，以及一个不太成熟的 <code>gollvm</code> 编译器， <code>gccgo</code> 它使用LLVM基础设施。<br><code>Gc</code> 使用与 C 不同的调用约定和链接器，因此不能直接从 C 程序调用，反之亦然。该程序 <code>cgo</code> 提供了“外部函数接口”的机制，以允许从 Go 代码安全调用 C 库。SWIG 将此功能扩展到C++库。</p>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><h3 id="Go有runtime吗"><a href="#Go有runtime吗" class="headerlink" title="Go有runtime吗"></a>Go有runtime吗</h3><p>Go 确实有一个广泛的库，称为运行时，它是每个 Go 程序的一部分。运行时库实现了垃圾回收、并发、堆栈管理和 Go 语言的其他关键功能。虽然它更核心于语言，但 Go 的运行时类似于 <code>libc</code> C 库。</p>
<p>Go 的运行时不包括虚拟机，例如 Java 运行时提供的虚拟机。<br>Go 程序被提前编译为本机机器代码。因此，尽管该术语通常用于描述程序运行的虚拟环境，但在 Go 中，“运行时”一词只是提供关键语言服务的库的名称。</p>
<h3 id="Unicode-标识符"><a href="#Unicode-标识符" class="headerlink" title="Unicode 标识符"></a>Unicode 标识符</h3><p>在设计 Go 时，确保它不会过于以 ASCII 为中心，这意味着将标识符的空间从 7 位 ASCII 的范围扩展出来。<br>Go 的规则（标识符字符必须是 Unicode 定义的字母或数字）易于理解和实现，但有限制。例如，设计排除了组合字符，这排除了某些语言，例如梵文。<br>这条规则还有一个不幸的后果。由于导出的标识符必须以大写字母开头，因此根据定义，从某些语言中的字符创建的标识符不能导出。目前唯一的解决方案是使用类似 <code>X日本語</code> 的东西</p>
<h3 id="为什么-Go-没有exceptions"><a href="#为什么-Go-没有exceptions" class="headerlink" title="为什么 Go 没有exceptions"></a>为什么 Go 没有exceptions</h3><p>将异常耦合到控制结构（如 <code>try-catch-finally</code> 惯用语中）会导致复杂的代码。<br>它还倾向于鼓励程序员将太多的普通错误（例如无法打开文件）标记为异常。<br>Go采取了不同的方法。对于普通错误处理，Go 的多值返回可以轻松报告错误，而无需重载返回值。<br>规范的错误类型，加上 Go 的其他特性，使错误处理变得愉快，但与其他语言完全不同。<br>Go 还具有几个内置函数，可以从真正的异常条件下发出信号和恢复。恢复机制仅作为函数状态的一部分执行，该状态在出错后被拆除，这足以处理灾难，但不需要额外的控制结构，如果使用得当，可以产生干净的错误处理代码。</p>
<h3 id="为什么要在-CSP-的理念上构建并发性"><a href="#为什么要在-CSP-的理念上构建并发性" class="headerlink" title="为什么要在 CSP 的理念上构建并发性"></a>为什么要在 CSP 的理念上构建并发性</h3><p>并发和多线程编程已经形成了困难的声誉。这部分是由于复杂的设计，如pthreads，部分是由于过分强调低级细节，如互斥体、条件变量和内存障碍。更高级别的接口使代码更简单，即使背后仍然存在互斥体等。<br>为并发提供高级语言支持的最成功的模型之一来自Hoare的通信顺序过程（CSP）。<br>Occam和Erlang是源于CSP的两种众所周知的语言。Go 的并发原语源自家谱的不同部分，其主要贡献是通道作为第一类对象的强大概念。使用几种早期语言的经验表明，CSP 模型非常适合过程语言框架。</p>
<h3 id="为什么是-goroutines-而不是线程？"><a href="#为什么是-goroutines-而不是线程？" class="headerlink" title="为什么是 goroutines 而不是线程？"></a>为什么是 goroutines 而不是线程？</h3><p>Goroutines 是使并发易于使用的一部分，是将独立执行的函数（协程）多路复用到一组线程上。当协程阻塞（例如通过调用阻塞系统调用）时，运行时会自动将同一操作系统线程上的其他协程移动到不同的可运行线程，以便它们不会被阻塞。程序员看不到这些，这就是重点。结果，我们称之为goroutines，可能非常便宜：除了堆栈的内存（只有几千字节）之外，它们几乎没有开销。</p>
<p>为了使堆栈变小，Go 的运行时使用可调整大小的有界堆栈。一个新铸造的goroutine被赋予几千字节，这几乎总是足够的。如果不是，运行时会自动增加（和缩小）用于存储堆栈的内存，从而允许许多 goroutines 存在于适量的内存中。CPU 开销平均每个函数调用大约三个便宜的指令。在同一地址空间中创建数十万个 goroutines 是切实可行的。如果 goroutines 只是线程，系统资源将以更少的数量耗尽。</p>
<h2 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h2><h3 id="Go-是面向对象的语言吗"><a href="#Go-是面向对象的语言吗" class="headerlink" title="Go 是面向对象的语言吗"></a>Go 是面向对象的语言吗</h3><p>是又不是。尽管 Go 具有类型和方法，并允许面向对象的编程风格，但没有类型层次结构。<br>Go 中的“接口”概念提供了一种不同的方法，我们认为这种方法易于使用，并且在某些方面更通用。<br>还有一些方法可以在其他类型中嵌入类型，以提供与子类类似但不完全相同的东西。<br>此外，Go 中的方法比 C++ 或 Java 中的方法更通用：它们可以为任何类型的数据定义，甚至是内置类型，例如普通的“未装箱”整数。它们不限于结构（类）。</p>
<h3 id="为什么没有类型继承"><a href="#为什么没有类型继承" class="headerlink" title="为什么没有类型继承"></a>为什么没有类型继承</h3><p>面向对象编程，至少在最知名的语言中，涉及太多关于类型之间关系的讨论，这些关系通常可以自动派生。Go采取了不同的方法。</p>
<p>在 Go 中，类型自动满足指定其方法子集的任何接口，而不是要求程序员提前声明两个类型是相关的。除了减少簿记之外，这种方法还具有真正的优势。类型可以同时满足多个接口，而没有传统多重继承的复杂性。接口可以非常轻量级 - 具有一个甚至零个方法的接口可以表达一个有用的概念。如果出现新想法或进行测试，可以在事后添加接口，而无需注释原始类型。由于类型和接口之间没有显式关系，因此没有要管理或讨论的类型层次结构。</p>
<p>可以使用这些想法来构造类似于类型安全的Unix管道的东西。例如，了解如何 <code>fmt.Fprintf</code> 启用格式化打印到任何输出（而不仅仅是文件），或者包如何 <code>bufio</code> 与文件 I&#x2F;O 完全分离，或者 <code>image</code> 包如何生成压缩的图像文件。所有这些想法都源于表示单个方法（ <code>io.Writer</code> ）的单个接口（ <code>Write</code> ）。而这只是皮毛。Go 的接口对程序的结构有着深远的影响。</p>
<h3 id="为什么我的零错误值不等于零？"><a href="#为什么我的零错误值不等于零？" class="headerlink" title="为什么我的零错误值不等于零？"></a>为什么我的零错误值不等于零？</h3><p>接口被实现为两个元素，一个类型和 <code>T</code> 一个值 <code>V</code> 。<br><code>V</code> 是一个具体的值，例如 <code>int</code> 或 <code>struct</code> 指针，而不是接口本身，并且具有 类型 <code>T</code> 。<br>例如，如果我们将值 3 存储在接口中，则生成的接口 <code>int</code> 值示意性地具有 （ <code>T=int</code> ， <code>V=3</code> ）。<br>该值也称为接口的动态值，因为给定的接口变量在程序执行期间可能具有不同的值 <code>V</code>  （和相应的类型 <code>T</code> ）。</p>
<p>仅当 和 都未设置时，接口值才为 <code>nil</code> （ <code>T=nil</code> ， <code>V</code> 未设置），特别是 <code>nil</code> 接口将始终保存类型 <code>nil</code> 。 <code>V</code> <code>T</code> 如果我们将类型的指针存储在接口值中，则内部类型将与 <code>nil</code> 指针的值 <code>*int</code> 无关：（ <code>T=*int</code> ， <code>V=nil</code> ）。 <code>*int</code> 因此 <code>nil</code> ，即使里面的指针值 <code>V</code> 是 <code>nil</code> 。</p>
<h2 id="Value"><a href="#Value" class="headerlink" title="Value"></a>Value</h2><h3 id="为什么-Go-不提供隐式数字转换"><a href="#为什么-Go-不提供隐式数字转换" class="headerlink" title="为什么 Go 不提供隐式数字转换"></a>为什么 Go 不提供隐式数字转换</h3><p>在 C 中，在数值类型之间自动转换的便利性被它造成的混乱所抵消。<br>表达式何时无符号？价值有多大？它会溢出吗？结果是否可移植，独立于执行结果的计算机？它还使编译器复杂化;<br>“通常的算术转换”不容易实现，并且在架构之间不一致。出于可移植性的原因，我们决定以代码中的一些显式转换为代价，使事情变得清晰明了。<br>不过，Go 中常量的定义——没有符号和大小注释的任意精度值——大大改善了问题。</p>
<h3 id="为什么地图不允许切片作为键？"><a href="#为什么地图不允许切片作为键？" class="headerlink" title="为什么地图不允许切片作为键？"></a>为什么地图不允许切片作为键？</h3><p>map查找需要一个相等运算符，切片不会实现该运算符。他们没有实现平等，因为平等在这些类型上没有很好的定义;<br>有多种注意事项，涉及浅比较与深比较、指针与值比较、如何处理递归类型等。<br>我们可能会重新审视这个问题——实现切片的相等性不会使任何现有程序无效——但是如果没有明确了解切片相等应该意味着什么，现在把它排除在外就更简单了。</p>
<h3 id="为什么map、slice和chan是引用，而数组是值"><a href="#为什么map、slice和chan是引用，而数组是值" class="headerlink" title="为什么map、slice和chan是引用，而数组是值"></a>为什么map、slice和chan是引用，而数组是值</h3><p>map和chan在语法上是指针，不可能声明或使用非指针实例。<br>此外，我们还在为数组应该如何工作而苦苦挣扎。最终，我们决定指针和值的严格分离使语言更难使用。<br>更改这些类型以充当对关联的共享数据结构的引用解决了这些问题。<br>这种变化给语言增加了一些令人遗憾的复杂性，但对可用性产生了很大的影响：Go 在引入时成为一种更高效、更舒适的语言。</p>
<h3 id="为什么-Go-没有-运算符？"><a href="#为什么-Go-没有-运算符？" class="headerlink" title="为什么 Go 没有 ?: 运算符？"></a>为什么 Go 没有 <code>?:</code> 运算符？</h3><p>Go 中没有三元测试操作,该语言的设计者已经看到该操作过于频繁地用于创建难以理解的复杂表达式。 <code>if-else</code> 形式虽然更长，但无疑更清晰。一种语言只需要一个条件控制流构造。</p>
<h3 id="为什么是-和-语句而不是表达式？为什么是后缀，而不是前缀？"><a href="#为什么是-和-语句而不是表达式？为什么是后缀，而不是前缀？" class="headerlink" title="为什么是 ++ 和 -- 语句而不是表达式？为什么是后缀，而不是前缀？"></a>为什么是 <code>++</code> 和 <code>--</code> 语句而不是表达式？为什么是后缀，而不是前缀？</h3><p>如果没有指针算法，前缀和后缀增量运算符的便利值会下降。通过将它们从表达式层次结构中完全删除，表达式语法得到了简化，并且围绕和（考虑 <code>f(i++)</code> 和 <code>p[i] = q[++i]</code> <code>--</code> ）的 <code>++</code> 计算顺序的混乱问题也消除了。简化是重要的。至于后缀与前缀，两者都可以正常工作，但后缀版本更传统;对前缀的坚持源于STL，STL是一种语言库，具有讽刺意味的是，其名称包含后缀增量。</p>
<h2 id="指针和分配"><a href="#指针和分配" class="headerlink" title="指针和分配"></a>指针和分配</h2><h3 id="函数参数何时按值传递"><a href="#函数参数何时按值传递" class="headerlink" title="函数参数何时按值传递"></a>函数参数何时按值传递</h3><p>Go 中的所有内容都是按值传递的。也就是说，函数总是获取要传递的事物的副本，就好像有一个赋值语句将值分配给参数一样。例如，将值传递给函数会创建 <code>int</code> 的副本，传递指针 <code>int</code> 值会创建指针的副本，但不会创建指针指向的数据。<br>map和slice的行为类似于指针：它们是包含指向基础map或切片数据的指针的描述符。复制map或剖切片值不会复制其指向的数据。复制接口值会复制存储在接口值中的事物。如果接口值包含结构，则复制接口值会复制结构。如果接口值包含指针，则复制接口值会复制指针，但同样不会复制指针指向的数据。</p>
<h3 id="new和make有什么区别"><a href="#new和make有什么区别" class="headerlink" title="new和make有什么区别"></a>new和make有什么区别</h3><p><code>new</code> 分配内存，同时 <code>make</code> 初始化切片、映射和通道类型。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>LC9.9</title>
    <url>/2023/09/09/LC9-9/</url>
    <content><![CDATA[<p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [ai, bi]</code> indicates that you <strong>must</strong> take course <code>bi</code> first if you want to take course <code>ai</code>.</p>
<ul>
<li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li>
</ul>
<p>Return <code>true</code> if you can finish all courses. Otherwise, return <code>false</code>.</p>
 <span id="more"></span>

<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: numCourses = 2, prerequisites = [[1,0]]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: There are a total of 2 courses to take. </span><br><span class="line">To take course 1 you should have finished course 0. So it is possible.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: numCourses = 2, prerequisites = [[1,0],[0,1]]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: There are a total of 2 courses to take. </span><br><span class="line">To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;container/list&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 207  2023-09-09 00:53:15</span></span><br><span class="line"><span class="comment">// leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canFinish</span><span class="params">(numCourses <span class="type">int</span>, prerequisites [][]<span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	inDegree := <span class="built_in">make</span>([]<span class="type">int</span>, numCourses)</span><br><span class="line">	graph := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]*list.List)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(prerequisites); i++ &#123;</span><br><span class="line">		inDegree[prerequisites[i][<span class="number">0</span>]]++                    <span class="comment">//初始入度值</span></span><br><span class="line">		<span class="keyword">if</span> _, exist := graph[prerequisites[i][<span class="number">1</span>]]; exist &#123; <span class="comment">//当前课存在于表</span></span><br><span class="line">			graph[prerequisites[i][<span class="number">1</span>]].PushBack(prerequisites[i][<span class="number">0</span>]) <span class="comment">//添加它的依赖课</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			graph[prerequisites[i][<span class="number">1</span>]] = list.New()</span><br><span class="line">			graph[prerequisites[i][<span class="number">1</span>]].PushBack(prerequisites[i][<span class="number">0</span>])</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	que := list.New()</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numCourses; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> inDegree[i] == <span class="number">0</span> &#123;</span><br><span class="line">			que.PushBack(i)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	count := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> que.Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">		selected := que.Remove(que.Front()).(<span class="type">int</span>)</span><br><span class="line">		count++</span><br><span class="line">		toEnqueue := graph[selected] <span class="comment">// 获取这门课对应的后续课</span></span><br><span class="line">		<span class="keyword">if</span> toEnqueue != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> e := toEnqueue.Front(); e != <span class="literal">nil</span>; e = e.Next() &#123;</span><br><span class="line">				course := e.Value.(<span class="type">int</span>)</span><br><span class="line">				inDegree[course]--         <span class="comment">// 依赖它的后续课的入度-1</span></span><br><span class="line">				<span class="keyword">if</span> inDegree[course] == <span class="number">0</span> &#123; <span class="comment">// 如果因此减为0，入列</span></span><br><span class="line">					que.PushBack(course)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count == numCourses</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>Bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>lc9.7</title>
    <url>/2023/09/07/lc9-7/</url>
    <content><![CDATA[<p>You are given an integer array <code>ranks</code> representing the <strong>ranks</strong> of some mechanics. ranksi is the rank of the ith mechanic. A mechanic with a rank <code>r</code> can repair n cars in <code>r * n2</code> minutes.</p>
<p>You are also given an integer <code>cars</code> representing the total number of cars waiting in the garage to be repaired.</p>
<p>Return <em>the <strong>minimum</strong> time taken to repair all the cars.</em></p>
<p><strong>Note:</strong> All the mechanics can repair the cars simultaneously.</p>
 <span id="more"></span>

<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: ranks = [4,2,3,1], cars = 10</span><br><span class="line">Output: 16</span><br><span class="line">Explanation: </span><br><span class="line">- The first mechanic will repair two cars. The time required is 4 * 2 * 2 = 16 minutes.</span><br><span class="line">- The second mechanic will repair two cars. The time required is 2 * 2 * 2 = 8 minutes.</span><br><span class="line">- The third mechanic will repair two cars. The time required is 3 * 2 * 2 = 12 minutes.</span><br><span class="line">- The fourth mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.</span><br><span class="line">It can be proved that the cars cannot be repaired in less than 16 minutes.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: ranks = [5,1,8], cars = 6</span><br><span class="line">Output: 16</span><br><span class="line">Explanation: </span><br><span class="line">- The first mechanic will repair one car. The time required is 5 * 1 * 1 = 5 minutes.</span><br><span class="line">- The second mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.</span><br><span class="line">- The third mechanic will repair one car. The time required is 8 * 1 * 1 = 8 minutes.</span><br><span class="line">It can be proved that the cars cannot be repaired in less than 16 minutes.</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;math&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2594  2023-09-07 08:28:57</span></span><br><span class="line"><span class="comment">// leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">repairCars</span><span class="params">(ranks []<span class="type">int</span>, cars <span class="type">int</span>)</span></span> <span class="type">int64</span> &#123;</span><br><span class="line">	minr := ranks[<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">for</span> _, rank := <span class="keyword">range</span> ranks &#123;</span><br><span class="line">		<span class="keyword">if</span> rank &lt; minr &#123;</span><br><span class="line">			minr = rank</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	l, r := <span class="number">1</span>, minr*cars*cars</span><br><span class="line">	<span class="keyword">var</span> check = <span class="function"><span class="keyword">func</span><span class="params">(m <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">		ret := <span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> _, rank := <span class="keyword">range</span> ranks &#123;</span><br><span class="line">			ret += <span class="type">int</span>(math.Sqrt(<span class="type">float64</span>(m / rank)))</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ret &gt;= cars</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> l &lt; r &#123;</span><br><span class="line">		m := (l + r) &gt;&gt; <span class="number">1</span></span><br><span class="line">		<span class="keyword">if</span> check(m) &#123;</span><br><span class="line">			r = m</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			l = m + <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="type">int64</span>(l)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>GoWeb-frame</title>
    <url>/2023/09/06/GoWeb-frame/</url>
    <content><![CDATA[<h1 id="GoWeb-ProgramDevFrame"><a href="#GoWeb-ProgramDevFrame" class="headerlink" title="GoWeb ProgramDevFrame"></a>GoWeb ProgramDevFrame</h1><p><img src="/./../pic/GoWeb-frame/image-20230907095756048.png" alt="image-20230907095756048"></p>
<p>基于go1.20<br>依赖于 Gin viper zap lumberjack sqlx go-redis 第三方库</p>
<span id="more"></span>

<h2 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;GoGin/src/GoWebDevFrame/database/mysql&quot;</span></span><br><span class="line">	<span class="string">&quot;GoGin/src/GoWebDevFrame/database/redis&quot;</span></span><br><span class="line">	<span class="string">&quot;GoGin/src/GoWebDevFrame/log&quot;</span></span><br><span class="line">	<span class="string">&quot;GoGin/src/GoWebDevFrame/routes&quot;</span></span><br><span class="line">	<span class="string">&quot;GoGin/src/GoWebDevFrame/settings&quot;</span></span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">	<span class="string">&quot;go.uber.org/zap&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;os/signal&quot;</span></span><br><span class="line">	<span class="string">&quot;syscall&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//setting</span></span><br><span class="line">	<span class="keyword">if</span> err := settings.Init(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;init settings failed,err: %v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//log</span></span><br><span class="line">	<span class="keyword">if</span> err := logger.Init(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;init logger failed,err: %v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> zap.L().Sync()</span><br><span class="line">	zap.L().Debug(<span class="string">&quot;logger init success&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//MySQL</span></span><br><span class="line">	<span class="keyword">if</span> err := mysql.Init(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;init mysql failed,err: %v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> mysql.Close()</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Redis</span></span><br><span class="line">	<span class="keyword">if</span> err := redis.Init(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;init redis failed,err: %v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> redis.Close()</span><br><span class="line"></span><br><span class="line">	<span class="comment">//router</span></span><br><span class="line">	r := routes.SetUp()</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Start&amp;End</span></span><br><span class="line">	srv := &amp;http.Server&#123;</span><br><span class="line">		Addr:    fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, viper.GetInt(<span class="string">&quot;app.port&quot;</span>)),</span><br><span class="line">		Handler: r,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="comment">// 开启一个goroutine启动服务</span></span><br><span class="line">		<span class="keyword">if</span> err := srv.ListenAndServe(); err != <span class="literal">nil</span> &amp;&amp; err != http.ErrServerClosed &#123;</span><br><span class="line">			zap.L().Fatal(<span class="string">&quot;listen: %s\n&quot;</span>, zap.Error(err))</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 等待中断信号来优雅地关闭服务器，为关闭服务器操作设置一个5秒的超时</span></span><br><span class="line">	quit := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>) <span class="comment">// 创建一个接收信号的通道</span></span><br><span class="line">	<span class="comment">// kill 默认会发送 syscall.SIGTERM 信号</span></span><br><span class="line">	<span class="comment">// kill -2 发送 syscall.SIGINT 信号，我们常用的Ctrl+C就是触发系统SIGINT信号</span></span><br><span class="line">	<span class="comment">// kill -9 发送 syscall.SIGKILL 信号，但是不能被捕获，所以不需要添加它</span></span><br><span class="line">	<span class="comment">// signal.Notify把收到的 syscall.SIGINT或syscall.SIGTERM 信号转发给quit</span></span><br><span class="line">	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM) <span class="comment">// 此处不会阻塞</span></span><br><span class="line">	&lt;-quit                                               <span class="comment">// 阻塞在此，当接收到上述两种信号时才会往下执行</span></span><br><span class="line">	zap.L().Info(<span class="string">&quot;Shutdown Server ...&quot;</span>)</span><br><span class="line">	<span class="comment">// 创建一个5秒超时的context</span></span><br><span class="line">	ctx, cancel := context.WithTimeout(context.Background(), <span class="number">5</span>*time.Second)</span><br><span class="line">	<span class="keyword">defer</span> cancel()</span><br><span class="line">	<span class="comment">// 5秒内优雅关闭服务（将未处理完的请求处理完再关闭服务），超过5秒就超时退出</span></span><br><span class="line">	<span class="keyword">if</span> err := srv.Shutdown(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		zap.L().Fatal(<span class="string">&quot;Server Shutdown: &quot;</span>, zap.Error(err))</span><br><span class="line">	&#125;</span><br><span class="line">	zap.L().Info(<span class="string">&quot;Server exiting&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="config-yaml"><a href="#config-yaml" class="headerlink" title="config.yaml"></a>config.yaml</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&quot;web_app&quot;</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">&quot;dev&quot;</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">level:</span> <span class="string">&quot;debug&quot;</span></span><br><span class="line">  <span class="attr">filename:</span> <span class="string">&quot;web_app.log&quot;</span></span><br><span class="line">  <span class="attr">max_size:</span> <span class="number">200</span></span><br><span class="line">  <span class="attr">max_age:</span> <span class="number">30</span></span><br><span class="line">  <span class="attr">max_backups:</span> <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mysql:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">13306</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&quot;root1234&quot;</span></span><br><span class="line">  <span class="attr">dbname:</span> <span class="string">&quot;sql_demo&quot;</span></span><br><span class="line">  <span class="attr">max_open_conns:</span> <span class="number">200</span></span><br><span class="line">  <span class="attr">max_idle_conns:</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">16379</span></span><br><span class="line">  <span class="attr">db:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">pool_size:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>



<h2 id="setting"><a href="#setting" class="headerlink" title="setting"></a>setting</h2><p>setting.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/fsnotify/fsnotify&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">()</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line">	viper.SetConfigName(<span class="string">&quot;config&quot;</span>) <span class="comment">// 配置文件名称(无扩展名)</span></span><br><span class="line">	viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>)   <span class="comment">// 如果配置文件的名称中没有扩展名，则需要配置此项</span></span><br><span class="line">	viper.AddConfigPath(<span class="string">&quot;.&quot;</span>)      <span class="comment">// 查找配置文件所在的路径</span></span><br><span class="line"></span><br><span class="line">	err = viper.ReadInConfig() <span class="comment">// 查找并读取配置文件</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;viper.ReadInConfig() failed,err:%v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span> <span class="comment">// 处理读取配置文件的错误</span></span><br><span class="line">	&#125;</span><br><span class="line">	viper.WatchConfig()</span><br><span class="line">	viper.OnConfigChange(<span class="function"><span class="keyword">func</span><span class="params">(in fsnotify.Event)</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;配置文件修改&quot;</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><p>logger.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> logger</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http/httputil&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;runtime/debug&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/natefinch/lumberjack&quot;</span></span><br><span class="line">	<span class="string">&quot;go.uber.org/zap&quot;</span></span><br><span class="line">	<span class="string">&quot;go.uber.org/zap/zapcore&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lg *zap.Logger</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LogConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">	Level      <span class="type">string</span> <span class="string">`json:&quot;level&quot;`</span></span><br><span class="line">	Filename   <span class="type">string</span> <span class="string">`json:&quot;filename&quot;`</span></span><br><span class="line">	MaxSize    <span class="type">int</span>    <span class="string">`json:&quot;maxsize&quot;`</span></span><br><span class="line">	MaxAge     <span class="type">int</span>    <span class="string">`json:&quot;max_age&quot;`</span></span><br><span class="line">	MaxBackups <span class="type">int</span>    <span class="string">`json:&quot;max_backups&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Init</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">()</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line">	writeSyncer := getLogWriter(</span><br><span class="line">		viper.GetString(<span class="string">&quot;log.filename&quot;</span>),</span><br><span class="line">		viper.GetInt(<span class="string">&quot;log.max_size&quot;</span>),</span><br><span class="line">		viper.GetInt(<span class="string">&quot;log.max_backups&quot;</span>),</span><br><span class="line">		viper.GetInt(<span class="string">&quot;log.max_age&quot;</span>))</span><br><span class="line">	encoder := getEncoder()</span><br><span class="line">	<span class="keyword">var</span> l = <span class="built_in">new</span>(zapcore.Level)</span><br><span class="line">	err = l.UnmarshalText([]<span class="type">byte</span>(viper.GetString(<span class="string">&quot;log.level&quot;</span>)))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	core := zapcore.NewCore(encoder, writeSyncer, l)</span><br><span class="line"></span><br><span class="line">	lg = zap.New(core, zap.AddCaller())</span><br><span class="line">	zap.ReplaceGlobals(lg) <span class="comment">// 替换zap包中全局的logger实例，后续在其他包中只需使用zap.L()调用即可</span></span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getEncoder</span><span class="params">()</span></span> zapcore.Encoder &#123;</span><br><span class="line">	encoderConfig := zap.NewProductionEncoderConfig()</span><br><span class="line">	encoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder</span><br><span class="line">	encoderConfig.TimeKey = <span class="string">&quot;time&quot;</span></span><br><span class="line">	encoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder</span><br><span class="line">	encoderConfig.EncodeDuration = zapcore.SecondsDurationEncoder</span><br><span class="line">	encoderConfig.EncodeCaller = zapcore.ShortCallerEncoder</span><br><span class="line">	<span class="keyword">return</span> zapcore.NewJSONEncoder(encoderConfig)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getLogWriter</span><span class="params">(filename <span class="type">string</span>, maxSize, maxBackup, maxAge <span class="type">int</span>)</span></span> zapcore.WriteSyncer &#123;</span><br><span class="line">	lumberJackLogger := &amp;lumberjack.Logger&#123;</span><br><span class="line">		Filename:   filename,</span><br><span class="line">		MaxSize:    maxSize,</span><br><span class="line">		MaxBackups: maxBackup,</span><br><span class="line">		MaxAge:     maxAge,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> zapcore.AddSync(lumberJackLogger)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GinLogger 接收gin框架默认的日志</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GinLogger</span><span class="params">()</span></span> gin.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		start := time.Now()</span><br><span class="line">		path := c.Request.URL.Path</span><br><span class="line">		query := c.Request.URL.RawQuery</span><br><span class="line">		c.Next()</span><br><span class="line"></span><br><span class="line">		cost := time.Since(start)</span><br><span class="line">		lg.Info(path,</span><br><span class="line">			zap.Int(<span class="string">&quot;status&quot;</span>, c.Writer.Status()),</span><br><span class="line">			zap.String(<span class="string">&quot;method&quot;</span>, c.Request.Method),</span><br><span class="line">			zap.String(<span class="string">&quot;path&quot;</span>, path),</span><br><span class="line">			zap.String(<span class="string">&quot;query&quot;</span>, query),</span><br><span class="line">			zap.String(<span class="string">&quot;ip&quot;</span>, c.ClientIP()),</span><br><span class="line">			zap.String(<span class="string">&quot;user-agent&quot;</span>, c.Request.UserAgent()),</span><br><span class="line">			zap.String(<span class="string">&quot;errors&quot;</span>, c.Errors.ByType(gin.ErrorTypePrivate).String()),</span><br><span class="line">			zap.Duration(<span class="string">&quot;cost&quot;</span>, cost),</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GinRecovery recover掉项目可能出现的panic，并使用zap记录相关日志</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GinRecovery</span><span class="params">(stack <span class="type">bool</span>)</span></span> gin.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			<span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="comment">// Check for a broken connection, as it is not really a</span></span><br><span class="line">				<span class="comment">// condition that warrants a panic stack trace.</span></span><br><span class="line">				<span class="keyword">var</span> brokenPipe <span class="type">bool</span></span><br><span class="line">				<span class="keyword">if</span> ne, ok := err.(*net.OpError); ok &#123;</span><br><span class="line">					<span class="keyword">if</span> se, ok := ne.Err.(*os.SyscallError); ok &#123;</span><br><span class="line">						<span class="keyword">if</span> strings.Contains(strings.ToLower(se.Error()), <span class="string">&quot;broken pipe&quot;</span>) || strings.Contains(strings.ToLower(se.Error()), <span class="string">&quot;connection reset by peer&quot;</span>) &#123;</span><br><span class="line">							brokenPipe = <span class="literal">true</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				httpRequest, _ := httputil.DumpRequest(c.Request, <span class="literal">false</span>)</span><br><span class="line">				<span class="keyword">if</span> brokenPipe &#123;</span><br><span class="line">					lg.Error(c.Request.URL.Path,</span><br><span class="line">						zap.Any(<span class="string">&quot;error&quot;</span>, err),</span><br><span class="line">						zap.String(<span class="string">&quot;request&quot;</span>, <span class="type">string</span>(httpRequest)),</span><br><span class="line">					)</span><br><span class="line">					<span class="comment">// If the connection is dead, we can&#x27;t write a status to it.</span></span><br><span class="line">					c.Error(err.(<span class="type">error</span>)) <span class="comment">// nolint: errcheck</span></span><br><span class="line">					c.Abort()</span><br><span class="line">					<span class="keyword">return</span></span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> stack &#123;</span><br><span class="line">					lg.Error(<span class="string">&quot;[Recovery from panic]&quot;</span>,</span><br><span class="line">						zap.Any(<span class="string">&quot;error&quot;</span>, err),</span><br><span class="line">						zap.String(<span class="string">&quot;request&quot;</span>, <span class="type">string</span>(httpRequest)),</span><br><span class="line">						zap.String(<span class="string">&quot;stack&quot;</span>, <span class="type">string</span>(debug.Stack())),</span><br><span class="line">					)</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					lg.Error(<span class="string">&quot;[Recovery from panic]&quot;</span>,</span><br><span class="line">						zap.Any(<span class="string">&quot;error&quot;</span>, err),</span><br><span class="line">						zap.String(<span class="string">&quot;request&quot;</span>, <span class="type">string</span>(httpRequest)),</span><br><span class="line">					)</span><br><span class="line">				&#125;</span><br><span class="line">				c.AbortWithStatus(http.StatusInternalServerError)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;()</span><br><span class="line">		c.Next()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="database"><a href="#database" class="headerlink" title="database"></a>database</h2><p>mysql.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jmoiron/sqlx&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">	<span class="string">&quot;go.uber.org/zap&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db *sqlx.DB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">()</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line">	dsn := fmt.Sprintf(<span class="string">&quot;%s:%s@tcp(%s:%d)/%s?charset=utf8mb4&amp;parseTime=True&quot;</span>,</span><br><span class="line">		viper.GetString(<span class="string">&quot;mysql.user&quot;</span>),</span><br><span class="line">		viper.GetString(<span class="string">&quot;mysql.password&quot;</span>),</span><br><span class="line">		viper.GetString(<span class="string">&quot;mysql.host&quot;</span>),</span><br><span class="line">		viper.GetInt(<span class="string">&quot;mysql.port&quot;</span>),</span><br><span class="line">		viper.GetString(<span class="string">&quot;mysql.dbname&quot;</span>),</span><br><span class="line">	)</span><br><span class="line">	<span class="comment">// 也可以使用MustConnect连接不成功就panic</span></span><br><span class="line">	db, err = sqlx.Connect(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		zap.L().Error(<span class="string">&quot;connect MySQL failed, err:%v\n&quot;</span>, zap.Error(err))</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	db.SetMaxOpenConns(viper.GetInt(<span class="string">&quot;mysql.max_open_conns&quot;</span>))</span><br><span class="line">	db.SetMaxIdleConns(viper.GetInt(<span class="string">&quot;mysql.max_idle_coons&quot;</span>))</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Close</span><span class="params">()</span></span> &#123;</span><br><span class="line">	_ = db.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>redis.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> redis</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/redis/go-redis/v9&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rdb *redis.Client</span><br><span class="line"><span class="keyword">var</span> ctx = context.Background()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">()</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line">	rdb = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">		Addr:     fmt.Sprintf(<span class="string">&quot;%s:%d&quot;</span>, viper.GetString(<span class="string">&quot;redis.host&quot;</span>), viper.GetInt(<span class="string">&quot;redis.port&quot;</span>)),</span><br><span class="line">		Password: viper.GetString(<span class="string">&quot;redis.password&quot;</span>), <span class="comment">// 密码</span></span><br><span class="line">		DB:       viper.GetInt(<span class="string">&quot;redis.db&quot;</span>),          <span class="comment">// 数据库</span></span><br><span class="line">		PoolSize: viper.GetInt(<span class="string">&quot;redis.pool_size&quot;</span>),   <span class="comment">// 连接池大小</span></span><br><span class="line">	&#125;)</span><br><span class="line">	_, err = rdb.Ping(ctx).Result()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Close</span><span class="params">()</span></span> &#123;</span><br><span class="line">	_ = rdb.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="routes"><a href="#routes" class="headerlink" title="routes"></a>routes</h2><p>routes.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> routes</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;GoGin/src/GoWebDevFrame/log&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetUp</span><span class="params">()</span></span> *gin.Engine &#123;</span><br><span class="line">	r := gin.New()</span><br><span class="line">	r.Use(logger.GinLogger(), logger.GinRecovery(<span class="literal">true</span>))</span><br><span class="line">	r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.String(http.StatusOK, <span class="string">&quot;ok&quot;</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="controllers"><a href="#controllers" class="headerlink" title="controllers"></a>controllers</h2><h2 id="logic"><a href="#logic" class="headerlink" title="logic"></a>logic</h2><h2 id="pkg"><a href="#pkg" class="headerlink" title="pkg"></a>pkg</h2><h2 id="models"><a href="#models" class="headerlink" title="models"></a>models</h2>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>GoWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Viper</title>
    <url>/2023/09/06/Go-Viper/</url>
    <content><![CDATA[<h1 id="Viper"><a href="#Viper" class="headerlink" title="Viper"></a>Viper</h1><p>operate config settings file</p>
<p>Viper is a complete configuration solution for Go applications.<br>It is designed to work in applications and can handle all types of configuration requirements and formats.</p>
<ul>
<li>Set the default value</li>
<li>Read configuration information from configuration files in<br><code>JSON</code> the format , <code>TOML</code> , <code>YAML</code> <code>HCL</code> <code>envfile</code> and <code>Java properties</code></li>
<li>Real-time monitoring and re-reading of configuration files (optional)</li>
<li>Read from an environment path(ENV)</li>
<li>Read and monitor configuration changes from the remote configuration system (etcd or Consul).</li>
<li>Read the configuration from the command-line arguments</li>
<li>Read the configuration from buffer</li>
<li>Explicitly configure the value</li>
</ul>
<span id="more"></span>

<p>main.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/fsnotify/fsnotify&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	viper.SetDefault(<span class="string">&quot;fileDir&quot;</span>, <span class="string">&quot;./&quot;</span>)</span><br><span class="line">	<span class="comment">//读取配置文件</span></span><br><span class="line">	viper.SetConfigFile(<span class="string">&quot;./config.yaml&quot;</span>)  <span class="comment">// 指定配置文件路径</span></span><br><span class="line">	viper.SetConfigName(<span class="string">&quot;config&quot;</span>)         <span class="comment">// 配置文件名称(无扩展名)</span></span><br><span class="line">	viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>)           <span class="comment">// 如果配置文件的名称中没有扩展名，则需要配置此项</span></span><br><span class="line">	viper.AddConfigPath(<span class="string">&quot;/etc/appname/&quot;</span>)  <span class="comment">// 查找配置文件所在的路径</span></span><br><span class="line">	viper.AddConfigPath(<span class="string">&quot;$HOME/.appname&quot;</span>) <span class="comment">// 多次调用以添加多个搜索路径</span></span><br><span class="line">	viper.AddConfigPath(<span class="string">&quot;.&quot;</span>)              <span class="comment">// 还可以在工作目录中查找配置</span></span><br><span class="line">	err := viper.ReadInConfig()           <span class="comment">// 查找并读取配置文件</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;                       <span class="comment">// 处理读取配置文件的错误</span></span><br><span class="line">		<span class="built_in">panic</span>(fmt.Errorf(<span class="string">&quot;Fatal error config file: %s \n&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//实时监控配置文件的变化</span></span><br><span class="line">	viper.WatchConfig()</span><br><span class="line">	viper.OnConfigChange(<span class="function"><span class="keyword">func</span><span class="params">(e fsnotify.Event)</span></span> &#123;</span><br><span class="line">		<span class="comment">// 配置文件发生变更之后会调用的回调函数</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;Config file changed:&quot;</span>, e.Name)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;version&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.String(http.StatusOK, viper.Get(<span class="string">&quot;version&quot;</span>).(<span class="type">string</span>))</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>config.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;v0.0.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mysql:</span></span><br><span class="line">  <span class="string">host:&quot;127.0.0.1&quot;</span></span><br><span class="line">  <span class="string">port:13306</span></span><br><span class="line">  <span class="string">dbname:&quot;sql_demo&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>GO-Gin-Zap</title>
    <url>/2023/09/06/GO-Gin-Zap/</url>
    <content><![CDATA[<h1 id="GO-Gin-Zap"><a href="#GO-Gin-Zap" class="headerlink" title="GO-Gin-Zap"></a>GO-Gin-Zap</h1><p>gin的中间件,使用zap代替gin自带的log记录</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Default</span><span class="params">()</span></span> *Engine &#123;</span><br><span class="line">	debugPrintWARNINGDefault()</span><br><span class="line">	engine := New()</span><br><span class="line">	engine.Use(Logger(), Recovery())</span><br><span class="line">	<span class="keyword">return</span> engine</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>自己重写 gin的Default中的<code>engin.Use(Logger(),Recovery())</code>去收集日志</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GinLogger 接收gin框架默认的日志</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GinLogger</span><span class="params">(logger *zap.Logger)</span></span> gin.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		start := time.Now()</span><br><span class="line">		path := c.Request.URL.Path</span><br><span class="line">		query := c.Request.URL.RawQuery</span><br><span class="line">		c.Next()</span><br><span class="line"></span><br><span class="line">		cost := time.Since(start)</span><br><span class="line">		logger.Info(path,</span><br><span class="line">			zap.Int(<span class="string">&quot;status&quot;</span>, c.Writer.Status()),</span><br><span class="line">			zap.String(<span class="string">&quot;method&quot;</span>, c.Request.Method),</span><br><span class="line">			zap.String(<span class="string">&quot;path&quot;</span>, path),</span><br><span class="line">			zap.String(<span class="string">&quot;query&quot;</span>, query),</span><br><span class="line">			zap.String(<span class="string">&quot;ip&quot;</span>, c.ClientIP()),</span><br><span class="line">			zap.String(<span class="string">&quot;user-agent&quot;</span>, c.Request.UserAgent()),</span><br><span class="line">			zap.String(<span class="string">&quot;errors&quot;</span>, c.Errors.ByType(gin.ErrorTypePrivate).String()),</span><br><span class="line">			zap.Duration(<span class="string">&quot;cost&quot;</span>, cost),</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GinRecovery recover掉项目可能出现的panic</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GinRecovery</span><span class="params">(logger *zap.Logger, stack <span class="type">bool</span>)</span></span> gin.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			<span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="comment">// Check for a broken connection, as it is not really a</span></span><br><span class="line">				<span class="comment">// condition that warrants a panic stack trace.</span></span><br><span class="line">				<span class="keyword">var</span> brokenPipe <span class="type">bool</span></span><br><span class="line">				<span class="keyword">if</span> ne, ok := err.(*net.OpError); ok &#123;</span><br><span class="line">					<span class="keyword">if</span> se, ok := ne.Err.(*os.SyscallError); ok &#123;</span><br><span class="line">						<span class="keyword">if</span> strings.Contains(strings.ToLower(se.Error()), <span class="string">&quot;broken pipe&quot;</span>) || strings.Contains(strings.ToLower(se.Error()), <span class="string">&quot;connection reset by peer&quot;</span>) &#123;</span><br><span class="line">							brokenPipe = <span class="literal">true</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				httpRequest, _ := httputil.DumpRequest(c.Request, <span class="literal">false</span>)</span><br><span class="line">				<span class="keyword">if</span> brokenPipe &#123;</span><br><span class="line">					logger.Error(c.Request.URL.Path,</span><br><span class="line">						zap.Any(<span class="string">&quot;error&quot;</span>, err),</span><br><span class="line">						zap.String(<span class="string">&quot;request&quot;</span>, <span class="type">string</span>(httpRequest)),</span><br><span class="line">					)</span><br><span class="line">					<span class="comment">// If the connection is dead, we can&#x27;t write a status to it.</span></span><br><span class="line">					c.Error(err.(<span class="type">error</span>)) <span class="comment">// nolint: errcheck</span></span><br><span class="line">					c.Abort()</span><br><span class="line">					<span class="keyword">return</span></span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> stack &#123;</span><br><span class="line">					logger.Error(<span class="string">&quot;[Recovery from panic]&quot;</span>,</span><br><span class="line">						zap.Any(<span class="string">&quot;error&quot;</span>, err),</span><br><span class="line">						zap.String(<span class="string">&quot;request&quot;</span>, <span class="type">string</span>(httpRequest)),</span><br><span class="line">						zap.String(<span class="string">&quot;stack&quot;</span>, <span class="type">string</span>(debug.Stack())),</span><br><span class="line">					)</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					logger.Error(<span class="string">&quot;[Recovery from panic]&quot;</span>,</span><br><span class="line">						zap.Any(<span class="string">&quot;error&quot;</span>, err),</span><br><span class="line">						zap.String(<span class="string">&quot;request&quot;</span>, <span class="type">string</span>(httpRequest)),</span><br><span class="line">					)</span><br><span class="line">				&#125;</span><br><span class="line">				c.AbortWithStatus(http.StatusInternalServerError)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;()</span><br><span class="line">		c.Next()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;go.uber.org/zap&quot;</span></span><br><span class="line">	<span class="string">&quot;go.uber.org/zap/zapcore&quot;</span></span><br><span class="line">	<span class="string">&quot;gopkg.in/natefinch/lumberjack.v2&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http/httputil&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;runtime/debug&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logger *zap.Logger</span><br><span class="line"><span class="keyword">var</span> sugarLogger *zap.SugaredLogger</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initLogger</span><span class="params">()</span></span> &#123;</span><br><span class="line">	writeSyncer := getLogWriter()</span><br><span class="line">	encoder := getEncoder()</span><br><span class="line">	core := zapcore.NewCore(encoder, writeSyncer, zapcore.DebugLevel)</span><br><span class="line">	logger = zap.New(core, zap.AddCaller())</span><br><span class="line">	sugarLogger = logger.Sugar()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getEncoder</span><span class="params">()</span></span> zapcore.Encoder &#123;</span><br><span class="line">	<span class="keyword">return</span> zapcore.NewConsoleEncoder(zapcore.EncoderConfig&#123;</span><br><span class="line">		TimeKey:        <span class="string">&quot;ts&quot;</span>,</span><br><span class="line">		LevelKey:       <span class="string">&quot;level&quot;</span>,</span><br><span class="line">		NameKey:        <span class="string">&quot;logger&quot;</span>,</span><br><span class="line">		CallerKey:      <span class="string">&quot;caller&quot;</span>,</span><br><span class="line">		MessageKey:     <span class="string">&quot;msg&quot;</span>,</span><br><span class="line">		StacktraceKey:  <span class="string">&quot;stacktrace&quot;</span>,</span><br><span class="line">		LineEnding:     zapcore.DefaultLineEnding,</span><br><span class="line">		EncodeLevel:    zapcore.LowercaseLevelEncoder,</span><br><span class="line">		EncodeTime:     zapcore.ISO8601TimeEncoder,</span><br><span class="line">		EncodeDuration: zapcore.SecondsDurationEncoder,</span><br><span class="line">		EncodeCaller:   zapcore.ShortCallerEncoder&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getLogWriter</span><span class="params">()</span></span> zapcore.WriteSyncer &#123;</span><br><span class="line">	<span class="keyword">return</span> zapcore.AddSync(&amp;lumberjack.Logger&#123;</span><br><span class="line">		Filename:   <span class="string">&quot;./test.log&quot;</span>,</span><br><span class="line">		MaxSize:    <span class="number">1</span>,</span><br><span class="line">		MaxAge:     <span class="number">5</span>,</span><br><span class="line">		MaxBackups: <span class="number">30</span>,</span><br><span class="line">		Compress:   <span class="literal">false</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// GinLogger 接收gin框架默认的日志</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GinLogger</span><span class="params">(logger *zap.Logger)</span></span> gin.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		start := time.Now()</span><br><span class="line">		path := c.Request.URL.Path</span><br><span class="line">		query := c.Request.URL.RawQuery</span><br><span class="line">		c.Next()</span><br><span class="line"></span><br><span class="line">		cost := time.Since(start)</span><br><span class="line">		logger.Info(path,</span><br><span class="line">			zap.Int(<span class="string">&quot;status&quot;</span>, c.Writer.Status()),</span><br><span class="line">			zap.String(<span class="string">&quot;method&quot;</span>, c.Request.Method),</span><br><span class="line">			zap.String(<span class="string">&quot;path&quot;</span>, path),</span><br><span class="line">			zap.String(<span class="string">&quot;query&quot;</span>, query),</span><br><span class="line">			zap.String(<span class="string">&quot;ip&quot;</span>, c.ClientIP()),</span><br><span class="line">			zap.String(<span class="string">&quot;user-agent&quot;</span>, c.Request.UserAgent()),</span><br><span class="line">			zap.String(<span class="string">&quot;errors&quot;</span>, c.Errors.ByType(gin.ErrorTypePrivate).String()),</span><br><span class="line">			zap.Duration(<span class="string">&quot;cost&quot;</span>, cost),</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GinRecovery recover掉项目可能出现的panic</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GinRecovery</span><span class="params">(logger *zap.Logger, stack <span class="type">bool</span>)</span></span> gin.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			<span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="comment">// Check for a broken connection, as it is not really a</span></span><br><span class="line">				<span class="comment">// condition that warrants a panic stack trace.</span></span><br><span class="line">				<span class="keyword">var</span> brokenPipe <span class="type">bool</span></span><br><span class="line">				<span class="keyword">if</span> ne, ok := err.(*net.OpError); ok &#123;</span><br><span class="line">					<span class="keyword">if</span> se, ok := ne.Err.(*os.SyscallError); ok &#123;</span><br><span class="line">						<span class="keyword">if</span> strings.Contains(strings.ToLower(se.Error()), <span class="string">&quot;broken pipe&quot;</span>) || strings.Contains(strings.ToLower(se.Error()), <span class="string">&quot;connection reset by peer&quot;</span>) &#123;</span><br><span class="line">							brokenPipe = <span class="literal">true</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				httpRequest, _ := httputil.DumpRequest(c.Request, <span class="literal">false</span>)</span><br><span class="line">				<span class="keyword">if</span> brokenPipe &#123;</span><br><span class="line">					logger.Error(c.Request.URL.Path,</span><br><span class="line">						zap.Any(<span class="string">&quot;error&quot;</span>, err),</span><br><span class="line">						zap.String(<span class="string">&quot;request&quot;</span>, <span class="type">string</span>(httpRequest)),</span><br><span class="line">					)</span><br><span class="line">					<span class="comment">// If the connection is dead, we can&#x27;t write a status to it.</span></span><br><span class="line">					c.Error(err.(<span class="type">error</span>)) <span class="comment">// nolint: errcheck</span></span><br><span class="line">					c.Abort()</span><br><span class="line">					<span class="keyword">return</span></span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> stack &#123;</span><br><span class="line">					logger.Error(<span class="string">&quot;[Recovery from panic]&quot;</span>,</span><br><span class="line">						zap.Any(<span class="string">&quot;error&quot;</span>, err),</span><br><span class="line">						zap.String(<span class="string">&quot;request&quot;</span>, <span class="type">string</span>(httpRequest)),</span><br><span class="line">						zap.String(<span class="string">&quot;stack&quot;</span>, <span class="type">string</span>(debug.Stack())),</span><br><span class="line">					)</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					logger.Error(<span class="string">&quot;[Recovery from panic]&quot;</span>,</span><br><span class="line">						zap.Any(<span class="string">&quot;error&quot;</span>, err),</span><br><span class="line">						zap.String(<span class="string">&quot;request&quot;</span>, <span class="type">string</span>(httpRequest)),</span><br><span class="line">					)</span><br><span class="line">				&#125;</span><br><span class="line">				c.AbortWithStatus(http.StatusInternalServerError)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;()</span><br><span class="line">		c.Next()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//r := gin.Default()</span></span><br><span class="line">	initLogger()</span><br><span class="line">	r := gin.New()</span><br><span class="line">	r.Use(GinLogger(logger), GinRecovery(logger, <span class="literal">true</span>))</span><br><span class="line">	r.GET(<span class="string">&quot;/hello&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.String(http.StatusOK, <span class="string">&quot;hello gin&quot;</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">	<span class="keyword">defer</span> logger.Sync()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Gin</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Zap</title>
    <url>/2023/09/06/Go-Zap/</url>
    <content><![CDATA[<h1 id="GO-Zap"><a href="#GO-Zap" class="headerlink" title="GO-Zap"></a>GO-Zap</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go get -u go.uber.org/zap</span><br></pre></td></tr></table></figure>

<p>Zap provides two types of loggers— <code>Sugared Logger</code> and <code>Logger</code></p>
<p>In contexts where performance is good but not critical, use <code>SugaredLogger</code><br>It is 4-10 times faster than other structured logging packages and supports structured and            printf-style logging.</p>
<p>Used <code>Logger</code> in contexts where every microsecond and every memory allocation counts.<br>It’s even <code>SugaredLogger</code> faster than and has fewer memory allocations, but it only supports strongly typed structured logging.</p>
<span id="more"></span>

<h2 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;go.uber.org/zap&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logger *zap.Logger</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	initLogger()</span><br><span class="line">	<span class="keyword">defer</span> logger.Sync()</span><br><span class="line">	SimpleHttpGet(<span class="string">&quot;https://www.bilibili.com&quot;</span>)</span><br><span class="line">	SimpleHttpGet(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initLogger</span><span class="params">()</span></span> &#123;</span><br><span class="line">	logger, _ = zap.NewProduction()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SimpleHttpGet</span><span class="params">(url <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	resp, err := http.Get(url)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		logger.Error(</span><br><span class="line">			<span class="string">&quot;Error fetching url&quot;</span>,</span><br><span class="line">			zap.String(<span class="string">&quot;url&quot;</span>, url),</span><br><span class="line">			zap.Error(err),</span><br><span class="line">		)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		logger.Info(<span class="string">&quot;success...&quot;</span>,</span><br><span class="line">			zap.String(<span class="string">&quot;statusCode&quot;</span>, resp.Status),</span><br><span class="line">			zap.String(<span class="string">&quot;url&quot;</span>, url),</span><br><span class="line">		)</span><br><span class="line">		resp.Body.Close()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:1693966905.6762507,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;n11Zap/Logger.go:28&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;success...&quot;</span>,<span class="string">&quot;statusCode&quot;</span>:<span class="string">&quot;200 OK&quot;</span>,<span class="string">&quot;url&quot;</span>:<span class="string">&quot;https://www.bilibili.com&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:1693966906.1908221,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;n11Zap/Logger.go:28&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;success...&quot;</span>,<span class="string">&quot;statusCode&quot;</span>:<span class="string">&quot;200 OK&quot;</span>,<span class="string">&quot;url&quot;</span>:<span class="string">&quot;https://www.baidu.com&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SugaredLogger"><a href="#SugaredLogger" class="headerlink" title="SugaredLogger"></a>SugaredLogger</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;go.uber.org/zap&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sugarLogger *zap.SugaredLogger</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	initSugarLogger()</span><br><span class="line">	<span class="keyword">defer</span> sugarLogger.Sync()</span><br><span class="line">	simpleHttpGetS(<span class="string">&quot;https://zyuu.top&quot;</span>)</span><br><span class="line">	simpleHttpGetS(<span class="string">&quot;https://www.zyuu.top&quot;</span>)</span><br><span class="line">	simpleHttpGetS(<span class="string">&quot;https://www.bilibili.com&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initSugarLogger</span><span class="params">()</span></span> &#123;</span><br><span class="line">	loggerS, _ := zap.NewProduction()</span><br><span class="line">	sugarLogger = loggerS.Sugar()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">simpleHttpGetS</span><span class="params">(url <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	sugarLogger.Debugf(<span class="string">&quot;Trying to hit GET request for %s&quot;</span>, url)</span><br><span class="line">	respS, err := http.Get(url)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		sugarLogger.Error(<span class="string">&quot;Error fetching URL %s : Error = %s&quot;</span>, url, err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		sugarLogger.Info(<span class="string">&quot;Success! statusCode = %s for URL %s&quot;</span>, respS.Status, url)</span><br><span class="line">		respS.Body.Close()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:1693967379.859905,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;n11Zap/sugaredLogger.go:27&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Success! statusCode = %s for URL %s200 OKhttps://zyuu.top&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:1693967385.2217426,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;n11Zap/sugaredLogger.go:27&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Success! statusCode = %s for URL %s200 OKhttps://www.zyuu.top&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:1693967385.7707212,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;n11Zap/sugaredLogger.go:27&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Success! statusCode = %s for URL %s200 OKhttps://www.bilibili.com&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Custom-loggers"><a href="#Custom-loggers" class="headerlink" title="Custom loggers"></a>Custom loggers</h2><h3 id="Output-to-file"><a href="#Output-to-file" class="headerlink" title="Output to file"></a>Output to file</h3><h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;go.uber.org/zap&quot;</span></span><br><span class="line">	<span class="string">&quot;go.uber.org/zap/zapcore&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> loggerCustom *zap.Logger</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	initLoggerCustom()</span><br><span class="line">	<span class="keyword">defer</span> loggerCustom.Sync()</span><br><span class="line">	SimpleHttpGetCustom(<span class="string">&quot;https://www.zyuu.top&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initLoggerCustom</span><span class="params">()</span></span> &#123;</span><br><span class="line">	writeSync := getLogWriter()</span><br><span class="line">	encoder := getEncoder()</span><br><span class="line">	core := zapcore.NewCore(encoder, writeSync, zapcore.DebugLevel)</span><br><span class="line">	loggerCustom = zap.New(core)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getLogWriter</span><span class="params">()</span></span> zapcore.WriteSyncer &#123;</span><br><span class="line">	file, _ := os.Create(<span class="string">&quot;./test.log&quot;</span>)</span><br><span class="line">	<span class="keyword">return</span> zapcore.AddSync(file)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getEncoder</span><span class="params">()</span></span> zapcore.Encoder &#123;</span><br><span class="line">	<span class="keyword">return</span> zapcore.NewJSONEncoder(zap.NewDevelopmentEncoderConfig())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SimpleHttpGetCustom</span><span class="params">(url <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	resp, err := http.Get(url)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		loggerCustom.Error(</span><br><span class="line">			<span class="string">&quot;Error fetching url&quot;</span>,</span><br><span class="line">			zap.String(<span class="string">&quot;url&quot;</span>, url),</span><br><span class="line">			zap.Error(err),</span><br><span class="line">		)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		loggerCustom.Info(<span class="string">&quot;success...&quot;</span>,</span><br><span class="line">			zap.String(<span class="string">&quot;statusCode&quot;</span>, resp.Status),</span><br><span class="line">			zap.String(<span class="string">&quot;url&quot;</span>, url),</span><br><span class="line">		)</span><br><span class="line">		resp.Body.Close()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Output-to-mutilLocations"><a href="#Output-to-mutilLocations" class="headerlink" title="Output to mutilLocations"></a>Output to mutilLocations</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getLogWriter</span><span class="params">()</span></span> zapcore.WriteSyncer &#123;</span><br><span class="line">	file, _ := os.Create(<span class="string">&quot;./test.log&quot;</span>)</span><br><span class="line">	<span class="comment">//return zapcore.AddSync(file)</span></span><br><span class="line">	ws := io.MultiWriter(file, os.Stdout)</span><br><span class="line">	<span class="keyword">return</span> zapcore.AddSync(ws)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="OutPut-to-specific-loc"><a href="#OutPut-to-specific-loc" class="headerlink" title="OutPut to specific loc"></a>OutPut to specific loc</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;go.uber.org/zap&quot;</span></span><br><span class="line">	<span class="string">&quot;go.uber.org/zap/zapcore&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> loggerCustom *zap.Logger</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	initLoggerCustom()</span><br><span class="line">	<span class="keyword">defer</span> loggerCustom.Sync()</span><br><span class="line">	SimpleHttpGetCustom(<span class="string">&quot;https://www.bilibili.com&quot;</span>)</span><br><span class="line">	SimpleHttpGetCustom(<span class="string">&quot;https://www.zyuu2.top&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initLoggerCustom</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//encoder</span></span><br><span class="line">	encoder := getEncoder()</span><br><span class="line">	<span class="comment">//location</span></span><br><span class="line">	core := getLogWriter(encoder)</span><br><span class="line">	loggerCustom = zap.New(core, zap.AddCaller())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getLogWriter</span><span class="params">(encoder zapcore.Encoder)</span></span> zapcore.Core &#123;</span><br><span class="line">	logF, _ := os.Create(<span class="string">&quot;./test.log&quot;</span>)</span><br><span class="line">	c1 := zapcore.NewCore(encoder, zapcore.AddSync(logF), zapcore.DebugLevel)</span><br><span class="line">	<span class="comment">// test.err.log记录ERROR级别的日志</span></span><br><span class="line">	errF, _ := os.Create(<span class="string">&quot;./test.err.log&quot;</span>)</span><br><span class="line">	c2 := zapcore.NewCore(encoder, zapcore.AddSync(errF), zap.ErrorLevel)</span><br><span class="line">	<span class="comment">// 使用NewTee将c1和c2合并到core</span></span><br><span class="line">	<span class="keyword">return</span> zapcore.NewTee(c1, c2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getEncoder</span><span class="params">()</span></span> zapcore.Encoder &#123;</span><br><span class="line">	encoderConfig := zap.NewProductionEncoderConfig()</span><br><span class="line">	encoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder</span><br><span class="line">	encoderConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder</span><br><span class="line">	<span class="keyword">return</span> zapcore.NewConsoleEncoder(encoderConfig)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JSON-Encoder-Log-Encoder"><a href="#JSON-Encoder-Log-Encoder" class="headerlink" title="JSON Encoder-&gt;Log Encoder"></a>JSON Encoder-&gt;Log Encoder</h3><p><strong>NewJSONEncoder-&gt;NewConsoleEncoder</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getEncoder</span><span class="params">()</span></span> zapcore.Encoder &#123;</span><br><span class="line">	<span class="keyword">return</span> zapcore.NewConsoleEncoder(zap.NewProductionEncoderConfig())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.6939687419932888e+09	error	Error fetching url	&#123;&quot;url&quot;: &quot;https://www.zyuu.top&quot;, &quot;error&quot;: &quot;Get \&quot;https://www.zyuu.top\&quot;: net/http: TLS handshake timeout&quot;&#125;</span><br><span class="line">1.693968784160138e+09	info	success...	&#123;&quot;statusCode&quot;: &quot;200 OK&quot;, &quot;url&quot;: &quot;https://www.bilibili.com&quot;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Change</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initLoggerCustom</span><span class="params">()</span></span> &#123;</span><br><span class="line">	writeSync := getLogWriter()</span><br><span class="line">	encoder := getEncoder()</span><br><span class="line">	core := zapcore.NewCore(encoder, writeSync, zapcore.DebugLevel)</span><br><span class="line">    <span class="comment">//add zap.AddCaller()-&gt;记录调用函数信息到log</span></span><br><span class="line">	loggerCustom = zap.New(core, zap.AddCaller())</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getEncoder</span><span class="params">()</span></span> zapcore.Encoder &#123;</span><br><span class="line">	encoderConfig := zap.NewProductionEncoderConfig()</span><br><span class="line">	encoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder</span><br><span class="line">	encoderConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder</span><br><span class="line">	<span class="keyword">return</span> zapcore.NewConsoleEncoder(encoderConfig)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">2023</span><span class="number">-09</span><span class="number">-06</span>T11:<span class="number">03</span>:<span class="number">44.800</span>+<span class="number">0800</span>	INFO	n11Zap/Customloggers.<span class="keyword">go</span>:<span class="number">49</span>	success...	&#123;<span class="string">&quot;statusCode&quot;</span>: <span class="string">&quot;200 OK&quot;</span>, <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://www.bilibili.com&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode9-6</title>
    <url>/2023/09/06/leetcode9-6/</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-deepest-leaves/">1123. Lowest Common Ancestor of Deepest Leaves</a></p>
<p>Given the <code>root</code> of a binary tree, return <em>the lowest common ancestor of its deepest leaves</em>.</p>
<p>Recall that:</p>
<ul>
<li>The node of a binary tree is a leaf if and only if it has no children</li>
<li>The depth of the root of the tree is <code>0</code>. if the depth of a node is <code>d</code>, the depth of each of its children is <code>d + 1</code>.</li>
<li>The lowest common ancestor of a set <code>S</code> of nodes, is the node <code>A</code> with the largest depth such that every node in <code>S</code> is in the subtree with root <code>A</code>.</li>
</ul>
<span id="more"></span>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lcaDeepestLeaves</span><span class="params">(root *TreeNode)</span></span> *TreeNode &#123;</span><br><span class="line">	<span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(node *TreeNode)</span></span> (<span class="type">int</span>, *TreeNode)</span><br><span class="line">	dfs = <span class="function"><span class="keyword">func</span><span class="params">(node *TreeNode)</span></span> (<span class="type">int</span>, *TreeNode) &#123;</span><br><span class="line">		<span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>, <span class="literal">nil</span></span><br><span class="line">		&#125;</span><br><span class="line">		ldepth, lbranch := dfs(node.Left)</span><br><span class="line">		rdepth, rbranch := dfs(node.Right)</span><br><span class="line">		<span class="keyword">if</span> ldepth &gt; rdepth &#123;</span><br><span class="line">			<span class="keyword">return</span> ldepth + <span class="number">1</span>, lbranch</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> ldepth &lt; rdepth &#123;</span><br><span class="line">			<span class="keyword">return</span> rdepth + <span class="number">1</span>, rbranch</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> ldepth + <span class="number">1</span>, node</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	_,ret:=dfs(root)</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode9-5</title>
    <url>/2023/09/05/leetcode9-5/</url>
    <content><![CDATA[<h1 id="2605-Form-Smallest-Number-From-Two-Digit-Arrays"><a href="#2605-Form-Smallest-Number-From-Two-Digit-Arrays" class="headerlink" title="2605. Form Smallest Number From Two Digit Arrays"></a><a href="https://leetcode.cn/problems/form-smallest-number-from-two-digit-arrays/">2605. Form Smallest Number From Two Digit Arrays</a></h1><p>Given two arrays of <strong>unique</strong> digits <code>nums1</code> and <code>nums2</code>, return <em>the <strong>smallest</strong> number that contains <strong>at least</strong> one digit from each array</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [4,1,3], nums2 = [5,7]</span><br><span class="line">Output: 15</span><br><span class="line">Explanation: The number 15 contains the digit 1 from nums1 and the digit 5 from nums2. It can be proven that 15 is the smallest number we can have.</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [3,5,2,6], nums2 = [3,1,7]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The number 3 contains the digit 3 which exists in both arrays.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums1.length, nums2.length &lt;= 9</code></li>
<li><code>1 &lt;= nums1[i], nums2[i] &lt;= 9</code></li>
<li>All digits in each array are <strong>unique</strong>.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;sort&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minNumber</span><span class="params">(nums1 []<span class="type">int</span>, nums2 []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> same <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span></span><br><span class="line">	same = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		ret := <span class="number">10</span></span><br><span class="line">		hash := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">bool</span>)</span><br><span class="line">		<span class="keyword">for</span> _, v := <span class="keyword">range</span> nums1 &#123;</span><br><span class="line">			hash[v] = <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> _, v := <span class="keyword">range</span> nums2 &#123;</span><br><span class="line">			<span class="keyword">if</span> _, ok := hash[v]; ok &#123;</span><br><span class="line">				ret = min(ret, v)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> ret == <span class="number">10</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ret</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ret := same(); ret != <span class="number">-1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> ret</span><br><span class="line">	&#125;</span><br><span class="line">	sort.Ints(nums1)</span><br><span class="line">	sort.Ints(nums2)</span><br><span class="line">	<span class="keyword">return</span> min(nums1[<span class="number">0</span>]*<span class="number">10</span>+nums2[<span class="number">0</span>], nums2[<span class="number">0</span>]*<span class="number">10</span>+nums1[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Hash</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph-LC685(can&#39;t solve)</title>
    <url>/2023/09/04/Graph-LC685/</url>
    <content><![CDATA[<h1 id="685Redundant-Connection-II"><a href="#685Redundant-Connection-II" class="headerlink" title="685Redundant Connection II"></a><a href="https://leetcode.cn/problems/redundant-connection-ii/">685Redundant Connection II</a></h1><p><strong>I am stupid  can’t do solve this</strong><br><strong>can’t even distinguish out the difference with 684</strong></p>
<p>In this problem, a rooted tree is a <strong>directed</strong> graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.</p>
<p>The given input is a directed graph that started as a rooted tree with <code>n</code> nodes (with distinct values from <code>1</code> to <code>n</code>), with one additional directed edge added. The added edge has two different vertices chosen from <code>1</code> to <code>n</code>, and was not an edge that already existed.</p>
<p>The resulting graph is given as a 2D-array of <code>edges</code>. Each element of <code>edges</code> is a pair <code>[ui, vi]</code> that represents a <strong>directed</strong> edge connecting nodes <code>ui</code> and <code>vi</code>, where <code>ui</code> is a parent of child <code>vi</code>.</p>
<p>Return <em>an edge that can be removed so that the resulting graph is a rooted tree of</em> <code>n</code> <em>nodes</em>. If there are multiple answers, return the answer that occurs last in the given 2D-array.</p>
 <span id="more"></span>

<p><strong>Example 1:</strong></p>
<p><img src="/./../pic/Graph-LC685/graph1.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: edges = [[1,2],[1,3],[2,3]]</span><br><span class="line">Output: [2,3]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="/./../pic/Graph-LC685/graph2.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]</span><br><span class="line">Output: [4,1]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == edges.length</code></li>
<li><code>3 &lt;= n &lt;= 1000</code></li>
<li><code>edges[i].length == 2</code></li>
<li><code>1 &lt;= ui, vi &lt;= n</code></li>
<li><code>ui != vi</code></li>
</ul>
<h2 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I am stupid</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>DSU</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph-LC684</title>
    <url>/2023/09/04/Graph-LC684/</url>
    <content><![CDATA[<h1 id="Redundant-Connection"><a href="#Redundant-Connection" class="headerlink" title="Redundant Connection"></a><a href="https://leetcode.cn/problems/redundant-connection/">Redundant Connection</a></h1><p>In this problem, a tree is an <strong>undirected graph</strong> that is connected and has no cycles.</p>
<p>You are given a graph that started as a tree with <code>n</code> nodes labeled from <code>1</code> to <code>n</code>, with one additional edge added. The added edge has two <strong>different</strong> vertices chosen from <code>1</code> to <code>n</code>, and was not an edge that already existed. The graph is represented as an array <code>edges</code> of length <code>n</code> where <code>edges[i] = [ai, bi]</code> indicates that there is an edge between nodes <code>ai</code> and <code>bi</code> in the graph.</p>
<p>Return <em>an edge that can be removed so that the resulting graph is a tree of</em> <code>n</code> <em>nodes</em>. If there are multiple answers, return the answer that occurs last in the input.</p>
<span id="more"></span>



<p><strong>Example 1:</strong></p>
<p><img src="/./../pic/Graph-LC684/reduntant1-1-graph.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: edges = [[1,2],[1,3],[2,3]]</span><br><span class="line">Output: [2,3]</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="/./../pic/Graph-LC684/reduntant1-2-graph.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]</span><br><span class="line">Output: [1,4]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == edges.length</code></li>
<li><code>3 &lt;= n &lt;= 1000</code></li>
<li><code>edges[i].length == 2</code></li>
<li><code>1 &lt;= ai &lt; bi &lt;= edges.length</code></li>
<li><code>ai != bi</code></li>
<li>There are no repeated edges.</li>
<li>The given graph is connected.</li>
</ul>
<h2 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findRedundantConnection</span><span class="params">(edges [][]<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> d DSU</span><br><span class="line">	d.Init(<span class="number">1005</span>)</span><br><span class="line">	<span class="keyword">for</span> _, edge := <span class="keyword">range</span> edges &#123;</span><br><span class="line">		<span class="keyword">if</span> d.IsSame(edge[<span class="number">0</span>], edge[<span class="number">1</span>]) &#123;</span><br><span class="line">			<span class="keyword">return</span> edge</span><br><span class="line">		&#125;</span><br><span class="line">		d.Union(edge[<span class="number">1</span>], edge[<span class="number">0</span>])</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> []<span class="type">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DSU <span class="keyword">struct</span> &#123;</span><br><span class="line">	Father []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DSU)</span></span> Init(n <span class="type">int</span>) &#123;</span><br><span class="line">	d.Father = <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		d.Father[i] = i</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DSU)</span></span> Union(i, j <span class="type">int</span>) &#123;</span><br><span class="line">	iFather := d.Find(i)</span><br><span class="line">	jFather := d.Find(j)</span><br><span class="line">	<span class="keyword">if</span> iFather == jFather &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	d.Father[iFather] = jFather</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DSU)</span></span> Find(i <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> i == d.Father[i] &#123;</span><br><span class="line">		<span class="keyword">return</span> i</span><br><span class="line">	&#125;</span><br><span class="line">	d.Father[i] = d.Find(d.Father[i])</span><br><span class="line">	<span class="keyword">return</span> d.Father[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DSU)</span></span> IsSame(i, j <span class="type">int</span>) <span class="type">bool</span> &#123;</span><br><span class="line">	iFather := d.Find(i)</span><br><span class="line">	jFather := d.Find(j)</span><br><span class="line">	<span class="keyword">return</span> iFather == jFather</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>DSU</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph-LC1971</title>
    <url>/2023/09/04/Graph-LC1971/</url>
    <content><![CDATA[<h1 id="1971Find-if-Path-Exists-in-Graph"><a href="#1971Find-if-Path-Exists-in-Graph" class="headerlink" title="1971Find if Path Exists in Graph"></a><a href="https://leetcode.cn/problems/find-if-path-exists-in-graph/">1971Find if Path Exists in Graph</a></h1><p>There is a <strong>bi-directional</strong>(双向图) graph with <code>n</code> vertices, where each vertex is labeled from <code>0</code> to <code>n - 1</code> (<strong>inclusive</strong>). The edges in the graph are represented as a 2D integer array <code>edges</code>, where each <code>edges[i] = [ui, vi]</code> denotes a bi-directional edge between vertex <code>ui</code> and vertex <code>vi</code>. Every vertex pair is connected by <strong>at most one</strong> edge, and no vertex has an edge to itself.</p>
<p>You want to determine if there is a <strong>valid path</strong> that exists from vertex <code>source</code> to vertex <code>destination</code>.</p>
<p>Given <code>edges</code> and the integers <code>n</code>, <code>source</code>, and <code>destination</code>, return <code>true</code> <em>if there is a <strong>valid path</strong> from</em> <code>source</code> <em>to</em> <code>destination</code><em>, or</em> <code>false</code> <em>otherwise</em><em>.</em></p>
 <span id="more"></span>

<p><strong>Example 1:</strong></p>
<p><img src="/./../pic/Graph-LC1971/validpath-ex1.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2</span><br><span class="line">Output: true</span><br><span class="line">Explanation: There are two paths from vertex 0 to vertex 2:</span><br><span class="line">- 0 → 1 → 2</span><br><span class="line">- 0 → 2</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="/./../pic/Graph-LC1971/validpath-ex2.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5</span><br><span class="line">Output: false</span><br><span class="line">Explanation: There is no path from vertex 0 to vertex 5.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 2 * 105</code></li>
<li><code>0 &lt;= edges.length &lt;= 2 * 105</code></li>
<li><code>edges[i].length == 2</code></li>
<li><code>0 &lt;= ui, vi &lt;= n - 1</code></li>
<li><code>ui != vi</code></li>
<li><code>0 &lt;= source, destination &lt;= n - 1</code></li>
<li>There are no duplicate edges.</li>
<li>There are no self edges.</li>
</ul>
<h2 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">validPath</span><span class="params">(n <span class="type">int</span>, edges [][]<span class="type">int</span>, source <span class="type">int</span>, destination <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> sol DSU</span><br><span class="line">	sol.Init(n)</span><br><span class="line">	<span class="keyword">for</span> _, edge := <span class="keyword">range</span> edges &#123;</span><br><span class="line">		sol.Union(edge[<span class="number">1</span>], edge[<span class="number">0</span>])</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sol.IsSame(source, destination)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DSU <span class="keyword">struct</span> &#123;</span><br><span class="line">	Father []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DSU)</span></span> Init(n <span class="type">int</span>) &#123;</span><br><span class="line">	d.Father = <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		d.Father[i] = i</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DSU)</span></span> Union(i, j <span class="type">int</span>) &#123;</span><br><span class="line">	iFather := d.Find(i)</span><br><span class="line">	jFather := d.Find(j)</span><br><span class="line">	<span class="comment">//i&#x27;s father-&gt;j&#x27;s father</span></span><br><span class="line">	<span class="keyword">if</span> iFather == jFather &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	d.Father[iFather] = jFather</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DSU)</span></span> Find(i <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> i == d.Father[i] &#123;</span><br><span class="line">		<span class="keyword">return</span> i</span><br><span class="line">	&#125;</span><br><span class="line">	d.Father[i] = d.Find(d.Father[i])</span><br><span class="line">	<span class="keyword">return</span> d.Father[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DSU)</span></span> IsSame(i, j <span class="type">int</span>) <span class="type">bool</span> &#123;</span><br><span class="line">	iFather := d.Find(i)</span><br><span class="line">	jFather := d.Find(j)</span><br><span class="line">	<span class="keyword">return</span> iFather == jFather</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>DSU</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>DisjointSetUnion(DSU)</title>
    <url>/2023/09/04/DisjointSetUnion-DSU/</url>
    <content><![CDATA[<h1 id="Disjoint-Set-Union"><a href="#Disjoint-Set-Union" class="headerlink" title="Disjoint Set Union"></a>Disjoint Set Union</h1><p>DSU:use a element in set to represent the set</p>
<p>commonly used to solve connectivity problems<br>whether two elements are in the same set</p>
<p>implement methods including <code>Init</code> <code>Union</code> <code>Find</code> <code>IsSame</code> </p>
<span id="more"></span>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DSU <span class="keyword">struct</span> &#123;</span><br><span class="line">	Father []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DSU)</span></span> Init(n <span class="type">int</span>) &#123;</span><br><span class="line">	d.Father = <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		d.Father[i] = i</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DSU)</span></span> Union(i, j <span class="type">int</span>) &#123;</span><br><span class="line">	iFather := d.Find(i)</span><br><span class="line">	jFather := d.Find(j)</span><br><span class="line">	<span class="keyword">if</span> iFather == jFather &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	d.Father[i] = j</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DSU)</span></span> Find(i <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> i == d.Father[i] &#123;</span><br><span class="line">		<span class="keyword">return</span> i</span><br><span class="line">	&#125;</span><br><span class="line">	d.Father[i] = d.Find(d.Father[i])</span><br><span class="line">	<span class="keyword">return</span> d.Father[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DSU)</span></span> IsSame(i, j <span class="type">int</span>) <span class="type">bool</span> &#123;</span><br><span class="line">	iFather := d.Find(i)</span><br><span class="line">	jFather := d.Find(j)</span><br><span class="line">	<span class="keyword">return</span> iFather == jFather </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	n := <span class="number">10</span> <span class="comment">// Set BSU size</span></span><br><span class="line">	<span class="keyword">var</span> dsu DSU</span><br><span class="line">	dsu.Init(n)</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//0-&gt;1</span></span><br><span class="line">	<span class="comment">//	 ↑</span></span><br><span class="line">	<span class="comment">//2-&gt;3</span></span><br><span class="line">	<span class="comment">//	 ↑</span></span><br><span class="line">	<span class="comment">//4-&gt;5</span></span><br><span class="line">	<span class="comment">//7-&gt;8</span></span><br><span class="line">	dsu.Union(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">	dsu.Union(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">	dsu.Union(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">	dsu.Union(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">	dsu.Union(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">	dsu.Union(<span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Find</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;Root of 0:&quot;</span>, dsu.Find(<span class="number">0</span>))</span><br><span class="line">	fmt.Println(<span class="string">&quot;Root of 1:&quot;</span>, dsu.Find(<span class="number">1</span>))</span><br><span class="line">	fmt.Println(<span class="string">&quot;Root of 2:&quot;</span>, dsu.Find(<span class="number">2</span>))</span><br><span class="line">	fmt.Println(<span class="string">&quot;Root of 3:&quot;</span>, dsu.Find(<span class="number">3</span>))</span><br><span class="line">	fmt.Println(<span class="string">&quot;Root of 4:&quot;</span>, dsu.Find(<span class="number">4</span>))</span><br><span class="line">	fmt.Println(<span class="string">&quot;Root of 5:&quot;</span>, dsu.Find(<span class="number">5</span>))</span><br><span class="line">	<span class="comment">//IsSame</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;root0 root1 have the same father&quot;</span>, dsu.IsSame(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">	fmt.Println(<span class="string">&quot;root7 root8 have the same father&quot;</span>, dsu.IsSame(<span class="number">7</span>, <span class="number">8</span>))</span><br><span class="line">	fmt.Println(<span class="string">&quot;root4 root1 have the same father&quot;</span>, dsu.IsSame(<span class="number">4</span>, <span class="number">1</span>))</span><br><span class="line">	fmt.Println(<span class="string">&quot;root7 root1 have the same father&quot;</span>, dsu.IsSame(<span class="number">7</span>, <span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go run main.go</span></span><br><span class="line">Root of 0: 1</span><br><span class="line">Root of 1: 1</span><br><span class="line">Root of 2: 1</span><br><span class="line">Root of 3: 1</span><br><span class="line">Root of 4: 1</span><br><span class="line">Root of 5: 1</span><br><span class="line">root0 root1 have the same father: true</span><br><span class="line">root7 root8 have the same father: true</span><br><span class="line">root4 root1 have the same father: true</span><br><span class="line">root7 root1 have the same father: false</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>DSU</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph-LC463</title>
    <url>/2023/09/04/Graph-LC463/</url>
    <content><![CDATA[<h1 id="463Island-Perimeter"><a href="#463Island-Perimeter" class="headerlink" title="463Island Perimeter"></a><a href="https://leetcode.cn/problems/island-perimeter/">463Island Perimeter</a></h1><p>You are given <code>row x col</code> <code>grid</code> representing a map where <code>grid[i][j] = 1</code> represents land and <code>grid[i][j] = 0</code> represents water.</p>
<p>Grid cells are connected <strong>horizontally&#x2F;vertically</strong> (not diagonally). The <code>grid</code> is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).</p>
<p>The island doesn’t have “lakes”, meaning the water inside isn’t connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don’t exceed 100. Determine the perimeter of the island.</p>
<span id="more"></span> 

<p><strong>Example 1:</strong></p>
<p><img src="/./../pic/Graph-LC463/island.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]</span><br><span class="line">Output: 16</span><br><span class="line">Explanation: The perimeter is the 16 yellow stripes in the image above.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1]]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,0]]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>row == grid.length</code></li>
<li><code>col == grid[i].length</code></li>
<li><code>1 &lt;= row, col &lt;= 100</code></li>
<li><code>grid[i][j]</code> is <code>0</code> or <code>1</code>.</li>
<li>There is exactly one island in <code>grid</code>.</li>
</ul>
<h2 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h2><h3 id="When-contacting-boundary-and-water-result"><a href="#When-contacting-boundary-and-water-result" class="headerlink" title="When contacting boundary and water , result++"></a>When contacting boundary and water , result++</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">islandPerimeter</span><span class="params">(grid [][]<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	dir := [<span class="number">4</span>][<span class="number">2</span>]<span class="type">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;</span><br><span class="line">	n, m := <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">	ret := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> grid[i][j] == <span class="number">1</span> &#123;</span><br><span class="line">				<span class="keyword">for</span> k := <span class="number">0</span>; k &lt; <span class="number">4</span>; k++ &#123;</span><br><span class="line">					nx := i + dir[k][<span class="number">0</span>]</span><br><span class="line">					ny := j + dir[k][<span class="number">1</span>]</span><br><span class="line">					<span class="keyword">if</span> nx &lt; <span class="number">0</span> || ny &lt; <span class="number">0</span> || nx &gt;= n || ny &gt;= m || grid[nx][ny] == <span class="number">0</span> &#123;</span><br><span class="line">						ret++</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ANS-AllGripNums-4-adjacentGrip-2"><a href="#ANS-AllGripNums-4-adjacentGrip-2" class="headerlink" title="ANS&#x3D;AllGripNums * 4 - adjacentGrip * 2"></a>ANS&#x3D;AllGripNums * 4 - adjacentGrip * 2</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">islandPerimeter</span><span class="params">(grid [][]<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	sum, adjacent := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	n, m := <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> grid[i][j] == <span class="number">1</span> &#123;</span><br><span class="line">				sum++</span><br><span class="line">				<span class="keyword">if</span> i<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[i<span class="number">-1</span>][j] == <span class="number">1</span> &#123;</span><br><span class="line">					adjacent++</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> j<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[i][j<span class="number">-1</span>] == <span class="number">1</span> &#123;</span><br><span class="line">					adjacent++</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum*<span class="number">4</span> - adjacent*<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph-LC841</title>
    <url>/2023/09/04/Graph-LC841/</url>
    <content><![CDATA[<h1 id="841Keys-and-Rooms"><a href="#841Keys-and-Rooms" class="headerlink" title="841Keys and Rooms"></a><a href="https://leetcode.cn/problems/keys-and-rooms/">841Keys and Rooms</a></h1><p>There are <code>n</code> rooms labeled from <code>0</code> to <code>n - 1</code> and all the rooms are locked except for room <code>0</code>. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.</p>
<p>When you visit a room, you may find a set of <strong>distinct keys</strong> in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.</p>
<p>Given an array <code>rooms</code> where <code>rooms[i]</code> is the set of keys that you can obtain if you visited room <code>i</code>, return <code>true</code> <em>if you can visit <strong>all</strong> the rooms, or</em> <code>false</code> <em>otherwise</em>.</p>
 <span id="more"></span>

<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: rooms = [[1],[2],[3],[]]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: </span><br><span class="line">We visit room 0 and pick up key 1.</span><br><span class="line">We then visit room 1 and pick up key 2.</span><br><span class="line">We then visit room 2 and pick up key 3.</span><br><span class="line">We then visit room 3.</span><br><span class="line">Since we were able to visit every room, we return true.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: rooms = [[1,3],[3,0,1],[2],[0]]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: We can not enter room number 2 since the only key that unlocks it is in that room.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == rooms.length</code></li>
<li><code>2 &lt;= n &lt;= 1000</code></li>
<li><code>0 &lt;= rooms[i].length &lt;= 1000</code></li>
<li><code>1 &lt;= sum(rooms[i].length) &lt;= 3000</code></li>
<li><code>0 &lt;= rooms[i][j] &lt; n</code></li>
<li>All the values of <code>rooms[i]</code> are <strong>unique</strong>.</li>
</ul>
<h2 id="resolution"><a href="#resolution" class="headerlink" title="resolution"></a>resolution</h2><h3 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canVisitAllRoomsDFS</span><span class="params">(rooms [][]<span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	visited := <span class="built_in">make</span>([]<span class="type">bool</span>, <span class="built_in">len</span>(rooms))</span><br><span class="line">	<span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(key <span class="type">int</span>)</span></span></span><br><span class="line">	dfs = <span class="function"><span class="keyword">func</span><span class="params">(key <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> visited[key] &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		visited[key] = <span class="literal">true</span></span><br><span class="line">		keys := rooms[key]</span><br><span class="line">		<span class="keyword">for</span> _, key := <span class="keyword">range</span> keys &#123;</span><br><span class="line">			dfs(key)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> rooms &#123;</span><br><span class="line">		<span class="keyword">if</span> !visited[i] &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canVisitAllRooms</span><span class="params">(rooms [][]<span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	visited := <span class="built_in">make</span>([]<span class="type">bool</span>, <span class="built_in">len</span>(rooms))</span><br><span class="line">	<span class="keyword">var</span> bfs <span class="function"><span class="keyword">func</span><span class="params">([][]<span class="type">int</span>)</span></span> <span class="type">bool</span></span><br><span class="line">	bfs = <span class="function"><span class="keyword">func</span><span class="params">(rooms [][]<span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">		visited[<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line">		que := list.New()</span><br><span class="line">		que.PushBack(<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">for</span> que.Len() != <span class="number">0</span> &#123;</span><br><span class="line">			key := que.Remove(que.Front()).(<span class="type">int</span>)</span><br><span class="line">			keys := rooms[key]</span><br><span class="line">			<span class="keyword">for</span> _, key := <span class="keyword">range</span> keys &#123;</span><br><span class="line">				<span class="keyword">if</span> !visited[key] &#123;</span><br><span class="line">					que.PushBack(key)</span><br><span class="line">					visited[key] = <span class="literal">true</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> i := <span class="keyword">range</span> rooms &#123;</span><br><span class="line">			<span class="keyword">if</span> !visited[i] &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> bfs(rooms)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>dfs</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph-LC127</title>
    <url>/2023/09/04/Graph-LC127/</url>
    <content><![CDATA[<h1 id="Word-Ladder"><a href="#Word-Ladder" class="headerlink" title="Word Ladder"></a><a href="https://leetcode.cn/problems/word-ladder/">Word Ladder</a></h1><p>A <strong>transformation sequence(序列)</strong> from word <code>beginWord</code> to word <code>endWord</code> using a dictionary <code>wordList</code> is a sequence of words <code>beginWord -&gt; s1 -&gt; s2 -&gt; ... -&gt; sk</code> </p>
<ul>
<li>Every adjacent pair of words differs by a single letter.</li>
<li>Every <code>si</code> for <code>1 &lt;= i &lt;= k</code> is in <code>wordList</code>. Note that <code>beginWord</code> does not need to be in <code>wordList</code>.</li>
<li><code>sk == endWord</code></li>
</ul>
<p>Given two words, <code>beginWord</code> and <code>endWord</code>, and a dictionary <code>wordList</code>, return <em>the <strong>number of words</strong> in the <strong>shortest transformation sequence</strong> from</em> <code>beginWord</code> <em>to</em> <code>endWord</code><em>, or</em> <code>0</code> <em>if no such sequence exists.</em></p>
<p><strong>Example 1:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Input: beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: One shortest transformation sequence is &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; cog&quot;, which is 5 words long.</span><br></pre></td></tr></table></figure>

<p><img src="/./../pic/Graph-LC127/image-20230904132736425.png" alt="image-20230904132736425"></p>
<span id="more"></span>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: The endWord &quot;cog&quot; is not in wordList, therefore there is no valid transformation sequence.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= beginWord.length &lt;= 10</code></li>
<li><code>endWord.length == beginWord.length</code></li>
<li><code>1 &lt;= wordList.length &lt;= 5000</code></li>
<li><code>wordList[i].length == beginWord.length</code></li>
<li><code>beginWord</code>, <code>endWord</code>, and <code>wordList[i]</code> consist of lowercase English letters.</li>
<li><code>beginWord != endWord</code></li>
<li>All the words in <code>wordList</code> are <strong>unique</strong>.</li>
</ul>
<h2 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;container/list&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ladderLength</span><span class="params">(beginWord <span class="type">string</span>, endWord <span class="type">string</span>, wordList []<span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="comment">//quickly check use map not list</span></span><br><span class="line">	workset := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">bool</span>)</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> wordList &#123;</span><br><span class="line">		workset[v] = <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> !workset[endWord] &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// init a queue</span></span><br><span class="line">	que := list.New()</span><br><span class="line">	que.PushBack(beginWord)</span><br><span class="line">	<span class="comment">//init map to record the length of the path that arrives each word</span></span><br><span class="line">	<span class="comment">//add beginWord to the que and visitmap</span></span><br><span class="line">	visitmap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">	visitmap[beginWord] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> que.Len() != <span class="number">0</span> &#123;</span><br><span class="line">		<span class="comment">// pick a word</span></span><br><span class="line">		<span class="comment">// and length of the path to that word named `path`</span></span><br><span class="line">		word := que.Remove(que.Front()).(<span class="type">string</span>)</span><br><span class="line">		path := visitmap[word]</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(word); i++ &#123;</span><br><span class="line">			<span class="comment">//each character in each word,</span></span><br><span class="line">			<span class="comment">//try replacing it from &#x27;a&#x27; to &#x27;z&#x27;</span></span><br><span class="line">			<span class="keyword">for</span> j := <span class="string">&#x27;a&#x27;</span>; j &lt;= <span class="string">&#x27;z&#x27;</span>; j++ &#123;</span><br><span class="line">				<span class="comment">//character is not duplication</span></span><br><span class="line">				<span class="keyword">if</span> word[i] == <span class="type">byte</span>(j) &#123;</span><br><span class="line">					<span class="keyword">continue</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//generate a new word newWord</span></span><br><span class="line">				newWord := word[:i] + <span class="type">string</span>(j) + word[i+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> newWord == endWord &#123;</span><br><span class="line">					<span class="keyword">return</span> path + <span class="number">1</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// newWord is in workset &amp;&amp; not be visited</span></span><br><span class="line">				<span class="keyword">if</span> workset[newWord] &amp;&amp; visitmap[newWord] == <span class="number">0</span> &#123;</span><br><span class="line">					visitmap[newWord] = path + <span class="number">1</span></span><br><span class="line">					que.PushBack(newWord)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph-LC827</title>
    <url>/2023/09/04/Graph-LC827/</url>
    <content><![CDATA[<h1 id="Making-A-Large-Island"><a href="#Making-A-Large-Island" class="headerlink" title="Making A Large Island"></a><a href="https://leetcode.cn/problems/making-a-large-island/">Making A Large Island</a></h1><p>You are given an <code>n x n</code> binary matrix <code>grid</code>. You are allowed to change <strong>at most one</strong> <code>0</code> to be <code>1</code>.</p>
<p>Return <em>the size of the largest <strong>island</strong> in</em> <code>grid</code> <em>after applying this operation</em>.</p>
<p>An <strong>island</strong> is a 4-directionally connected group of <code>1</code>s.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,0],[0,1]]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>Example 2:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,1],[1,0]]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,1],[1,1]]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Can&#x27;t change any 0 to 1, only one island with area = 4.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == grid.length</code></li>
<li><code>n == grid[i].length</code></li>
<li><code>1 &lt;= n &lt;= 500</code></li>
<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>
</ul>
<h2 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h2><p>Traverse each square, and record it by numbering.<br>use hashmap records, key is the island number, value is the island area </p>
<p>After traversing, traverse the square of 0 (want to turn 0 into 1),<br>count surrounding islands of 1 (which from 0 to 1),<br>add its near areas together,<br>after traversing all 0,<br>get the maximum area after selecting a 0 into 1</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">largestIsland</span><span class="params">(grid [][]<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	n, m := <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">	dir := [<span class="number">4</span>][<span class="number">2</span>]<span class="type">int</span>&#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;</span><br><span class="line">	visited := <span class="built_in">make</span>([][]<span class="type">bool</span>, n)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> visited &#123;</span><br><span class="line">		visited[i] = <span class="built_in">make</span>([]<span class="type">bool</span>, m)</span><br><span class="line">	&#125;</span><br><span class="line">	count := <span class="number">0</span></span><br><span class="line">	ret := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//traverse all,mark and count the areas</span></span><br><span class="line">	<span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(x, y, mark <span class="type">int</span>)</span></span></span><br><span class="line">	dfs = <span class="function"><span class="keyword">func</span><span class="params">(x, y, mark <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> visited[x][y] == <span class="literal">true</span> || grid[x][y] == <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		visited[x][y] = <span class="literal">true</span></span><br><span class="line">        <span class="comment">//mark each individual grid</span></span><br><span class="line">		grid[x][y] = mark</span><br><span class="line">        <span class="comment">//count areas</span></span><br><span class="line">		count++</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">			nx := x + dir[i][<span class="number">0</span>]</span><br><span class="line">			ny := y + dir[i][<span class="number">1</span>]</span><br><span class="line">			<span class="keyword">if</span> nx &lt; <span class="number">0</span> || ny &lt; <span class="number">0</span> || nx &gt;= n || ny &gt;= m &#123;</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			dfs(nx, ny, mark)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//key is the island number, value is the island area </span></span><br><span class="line">	gridNum := <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">	mark := <span class="number">2</span></span><br><span class="line">	isAllgrid := <span class="literal">true</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">            <span class="comment">//the grid has ocean</span></span><br><span class="line">			<span class="keyword">if</span> grid[i][j] == <span class="number">0</span> &#123;</span><br><span class="line">				isAllgrid = <span class="literal">false</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> visited[i][j] == <span class="literal">false</span> &amp;&amp; grid[i][j] == <span class="number">1</span> &#123;</span><br><span class="line">				count = <span class="number">0</span></span><br><span class="line">				dfs(i, j, mark)</span><br><span class="line">				gridNum[mark] = count</span><br><span class="line">				mark++</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> isAllgrid &#123;</span><br><span class="line">		<span class="keyword">return</span> m * n</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Traverse each 0 square, </span></span><br><span class="line">    <span class="comment">//count the area of its near grid, and finally take a maximum value.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//mark the visited grip</span></span><br><span class="line">	visitedGrid := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">bool</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">			nums := <span class="number">1</span></span><br><span class="line">            <span class="comment">//make it empty</span></span><br><span class="line">			visitedGrid = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">bool</span>)</span><br><span class="line">			<span class="keyword">if</span> grid[i][j] == <span class="number">0</span> &#123;</span><br><span class="line">				<span class="keyword">for</span> k := <span class="number">0</span>; k &lt; <span class="number">4</span>; k++ &#123;</span><br><span class="line">					nx := i + dir[k][<span class="number">0</span>]</span><br><span class="line">					ny := j + dir[k][<span class="number">1</span>]</span><br><span class="line">					<span class="keyword">if</span> nx &lt; <span class="number">0</span> || ny &lt; <span class="number">0</span> || nx &gt;= n || ny &gt;= m &#123;</span><br><span class="line">						<span class="keyword">continue</span></span><br><span class="line">					&#125;</span><br><span class="line">                    <span class="comment">//has marked</span></span><br><span class="line">					<span class="keyword">if</span> visitedGrid[grid[nx][ny]] &#123;</span><br><span class="line">						<span class="keyword">continue</span></span><br><span class="line">					&#125;</span><br><span class="line">					nums += gridNum[grid[nx][ny]]</span><br><span class="line">					visitedGrid[grid[nx][ny]] = <span class="literal">true</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> nums &gt; ret &#123;</span><br><span class="line">				ret = nums</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>9.4leetcode449</title>
    <url>/2023/09/04/9-4leetcode449/</url>
    <content><![CDATA[<h1 id="Serialize-and-Deserialize-BST"><a href="#Serialize-and-Deserialize-BST" class="headerlink" title="Serialize and Deserialize BST"></a><a href="https://leetcode.cn/problems/serialize-and-deserialize-bst/">Serialize and Deserialize BST</a></h1><p>Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>
<p>Design an algorithm to serialize and deserialize a <strong>binary search tree</strong>. There is no restriction on how your serialization&#x2F;deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.</p>
<p><strong>The encoded string should be as compact as possible.</strong></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 104]</code>.</li>
<li><code>0 &lt;= Node.val &lt;= 104</code></li>
<li>The input tree is <strong>guaranteed</strong> to be a binary search tree.</li>
</ul>
<span id="more"></span>

<h2 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h2><h3 id="standard-library"><a href="#standard-library" class="headerlink" title="standard library"></a>standard library</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Codec <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span></span> Codec &#123;</span><br><span class="line">	<span class="keyword">return</span> Codec&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Serializes a tree to a single string.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Codec)</span></span> serialize(root *TreeNode) <span class="type">string</span> &#123;</span><br><span class="line">	b, _ := json.Marshal(root)</span><br><span class="line">	<span class="keyword">return</span> <span class="type">string</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Deserializes your encoded data to tree.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Codec)</span></span> deserialize(data <span class="type">string</span>) *TreeNode &#123;</span><br><span class="line">	p := <span class="built_in">new</span>(TreeNode)</span><br><span class="line">	_ = json.Unmarshal([]<span class="type">byte</span>(data), &amp;p)</span><br><span class="line">	<span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * ser := Constructor()</span></span><br><span class="line"><span class="comment"> * deser := Constructor()</span></span><br><span class="line"><span class="comment"> * tree := ser.serialize(root)</span></span><br><span class="line"><span class="comment"> * ans := deser.deserialize(tree)</span></span><br><span class="line"><span class="comment"> * return ans</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="BST-PreTraverse"><a href="#BST-PreTraverse" class="headerlink" title="BST PreTraverse"></a>BST PreTraverse</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//449  2023-09-04 07:51:04</span></span><br><span class="line"><span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Codec <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span></span> Codec &#123;</span><br><span class="line">	<span class="keyword">return</span> Codec&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Serializes a tree to a single string.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Codec)</span></span> serialize(root *TreeNode) <span class="type">string</span> &#123;</span><br><span class="line">	arr := []<span class="type">string</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(node *TreeNode)</span></span></span><br><span class="line">	dfs = <span class="function"><span class="keyword">func</span><span class="params">(node *TreeNode)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		arr = <span class="built_in">append</span>(arr, strconv.Itoa(node.Val))</span><br><span class="line">		dfs(node.Left)</span><br><span class="line">		dfs(node.Right)</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(root)</span><br><span class="line">	<span class="keyword">return</span> strings.Join(arr, <span class="string">&quot; &quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Deserializes your encoded data to tree.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Codec)</span></span> deserialize(data <span class="type">string</span>) *TreeNode &#123;</span><br><span class="line">	<span class="keyword">if</span> data == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	arr := strings.Split(data, <span class="string">&quot; &quot;</span>)</span><br><span class="line">	<span class="keyword">var</span> dfsUnmarshal <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span> *TreeNode</span><br><span class="line">	dfsUnmarshal = <span class="function"><span class="keyword">func</span><span class="params">(min, max <span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(arr) == <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">		&#125;</span><br><span class="line">		val, _ := strconv.Atoi(arr[<span class="number">0</span>])</span><br><span class="line">		<span class="keyword">if</span> val &lt; min || val &gt; max &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">		&#125;</span><br><span class="line">		arr = arr[<span class="number">1</span>:]</span><br><span class="line">		<span class="keyword">return</span> &amp;TreeNode&#123;</span><br><span class="line">			Val:   val,</span><br><span class="line">			Left:  dfsUnmarshal(min, val<span class="number">-1</span>),</span><br><span class="line">			Right: dfsUnmarshal(val+<span class="number">1</span>, max),</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dfsUnmarshal(<span class="number">-1</span>, <span class="number">10001</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * ser := Constructor()</span></span><br><span class="line"><span class="comment"> * deser := Constructor()</span></span><br><span class="line"><span class="comment"> * tree := ser.serialize(root)</span></span><br><span class="line"><span class="comment"> * ans := deser.deserialize(tree)</span></span><br><span class="line"><span class="comment"> * return ans</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>BST</tag>
      </tags>
  </entry>
  <entry>
    <title>GoGorm</title>
    <url>/2023/09/03/Go-Gorm/</url>
    <content><![CDATA[<h1 id="Gorm"><a href="#Gorm" class="headerlink" title="Gorm"></a><a href="https://gorm.io/zh_CN/docs/index.html">Gorm</a></h1><p>Gorm is an ORM framework written in Go.<br>It is well-documented, developer-friendly, and supports mainstream databases.</p>
<p>Official Quick Start Code</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">  <span class="string">&quot;gorm.io/driver/sqlite&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Code  <span class="type">string</span></span><br><span class="line">  Price <span class="type">uint</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  db, err := gorm.Open(sqlite.Open(<span class="string">&quot;test.db&quot;</span>), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;failed to connect database&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 迁移 schema</span></span><br><span class="line">  db.AutoMigrate(&amp;Product&#123;&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create</span></span><br><span class="line">  db.Create(&amp;Product&#123;Code: <span class="string">&quot;D42&quot;</span>, Price: <span class="number">100</span>&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Read</span></span><br><span class="line">  <span class="keyword">var</span> product Product</span><br><span class="line">  db.First(&amp;product, <span class="number">1</span>) <span class="comment">// 根据整型主键查找</span></span><br><span class="line">  db.First(&amp;product, <span class="string">&quot;code = ?&quot;</span>, <span class="string">&quot;D42&quot;</span>) <span class="comment">// 查找 code 字段值为 D42 的记录</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Update - 将 product 的 price 更新为 200</span></span><br><span class="line">  db.Model(&amp;product).Update(<span class="string">&quot;Price&quot;</span>, <span class="number">200</span>)</span><br><span class="line">  <span class="comment">// Update - 更新多个字段</span></span><br><span class="line">  db.Model(&amp;product).Updates(Product&#123;Price: <span class="number">200</span>, Code: <span class="string">&quot;F42&quot;</span>&#125;) <span class="comment">// 仅更新非零值字段</span></span><br><span class="line">  db.Model(&amp;product).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;Price&quot;</span>: <span class="number">200</span>, <span class="string">&quot;Code&quot;</span>: <span class="string">&quot;F42&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Delete - 删除 product</span></span><br><span class="line">  db.Delete(&amp;product, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get -u gorm.io/gorm</span><br><span class="line">go get -u gorm.io/driver/sqlite</span><br></pre></td></tr></table></figure>

<h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line">	<span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// UserInfo 数据表</span></span><br><span class="line"><span class="keyword">type</span> UserInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">	ID     <span class="type">uint</span></span><br><span class="line">	Name   <span class="type">string</span></span><br><span class="line">	Gender <span class="type">string</span></span><br><span class="line">	Hobby  <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dsn := <span class="string">&quot;root:yanjun@tcp(127.0.0.1:3306)/gorm01?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">	db01, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">&quot;连接sql失败&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//自动迁移 把结构体和数据表进行对应</span></span><br><span class="line">	err = db01.AutoMigrate(&amp;UserInfo&#123;&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//创建记录</span></span><br><span class="line">	u1 := UserInfo&#123;</span><br><span class="line">		ID:     <span class="number">1</span>,</span><br><span class="line">		Name:   <span class="string">&quot;name1&quot;</span>,</span><br><span class="line">		Gender: <span class="string">&quot;gender1&quot;</span>,</span><br><span class="line">		Hobby:  <span class="string">&quot;hobby1&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	db01.Create(&amp;u1)</span><br><span class="line">	<span class="comment">//查询</span></span><br><span class="line">	<span class="keyword">var</span> u UserInfo</span><br><span class="line">	db01.First(&amp;u, <span class="number">1</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;u:%#v\n&quot;</span>, u)</span><br><span class="line">	db01.First(&amp;u, <span class="string">&quot;Name=?&quot;</span>, <span class="string">&quot;name1&quot;</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;u:%#v\n&quot;</span>, u)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//更新</span></span><br><span class="line">	db01.Model(&amp;u).Update(<span class="string">&quot;hobby&quot;</span>, <span class="string">&quot;play&quot;</span>)</span><br><span class="line">	db01.Model(&amp;u).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">		<span class="string">&quot;hobby&quot;</span>:  <span class="string">&quot;hobbyNew1&quot;</span>,</span><br><span class="line">		<span class="string">&quot;gender&quot;</span>: <span class="string">&quot;genderNew1&quot;</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//删除</span></span><br><span class="line">	db01.Delete(&amp;u, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;database/sql&quot;</span></span><br><span class="line">	<span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line">	<span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">	<span class="string">&quot;gorm.io/gorm/schema&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type Model struct &#123;</span></span><br><span class="line"><span class="comment">	ID        uint `gorm:&quot;primarykey&quot;`</span></span><br><span class="line"><span class="comment">	CreatedAt time.Time</span></span><br><span class="line"><span class="comment">	UpdatedAt time.Time</span></span><br><span class="line"><span class="comment">	DeletedAt DeletedAt `gorm:&quot;index&quot;`</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">在使用ORM工具时，通常我们需要在代码中定义模型（Models）</span></span><br><span class="line"><span class="comment">与数据库中的数据表进行映射，</span></span><br><span class="line"><span class="comment">在GORM中模型（Models）通常是正常定义的结构体、</span></span><br><span class="line"><span class="comment">基本的go类型或它们的指针。</span></span><br><span class="line"><span class="comment">同时也支持sql.Scanner及driver.Valuer接口（interfaces）。</span></span><br><span class="line"><span class="comment">gorm.Model</span></span><br><span class="line"><span class="comment">为了方便模型定义，GORM内置了一个gorm.Model结构体。</span></span><br><span class="line"><span class="comment">gorm.Model是一个包含了ID, CreatedAt, UpdatedAt, DeletedAt四个字段的Golang结构体。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// User 默认主键ID</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	gorm.Model</span><br><span class="line">	Name         <span class="type">string</span></span><br><span class="line">	Age          sql.NullInt64 <span class="comment">//零值</span></span><br><span class="line">	Birthday     *time.Time</span><br><span class="line">	Email        <span class="type">string</span>  <span class="string">`gorm:&quot;type:varchar(100);unique_index&quot;`</span></span><br><span class="line">	Role         <span class="type">string</span>  <span class="string">`gorm:&quot;size:255&quot;`</span>                            <span class="comment">// 设置字段大小为255</span></span><br><span class="line">	MemberNumber *<span class="type">string</span> <span class="string">`gorm:&quot;unique;not null;column:MemberNumber&quot;`</span> <span class="comment">// 设置会员号（member number）唯一并且不为空</span></span><br><span class="line">	<span class="comment">//默认所有字段的零值,</span></span><br><span class="line">	<span class="comment">//比如 0, &#x27;&#x27;, false 或者其零值，</span></span><br><span class="line">	<span class="comment">//都不会保存到数据库内，使用指针可以避免这种情况。</span></span><br><span class="line">	Num      <span class="type">int</span>    <span class="string">`gorm:&quot;AUTO_INCREMENT&quot;`</span> <span class="comment">// 设置 num 为自增类型</span></span><br><span class="line">	Address  <span class="type">string</span> <span class="string">`gorm:&quot;index:addr&quot;`</span>     <span class="comment">// 给address字段创建名为addr的索引</span></span><br><span class="line">	IgnoreMe <span class="type">int</span>    <span class="string">`gorm:&quot;-&quot;`</span>              <span class="comment">// 忽略本字段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认表名user</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TableName 修改表名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span></span> TableName() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;myUserTable&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Animal 使用`AnimalID`作为主键</span></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123;</span><br><span class="line">	AnimalID <span class="type">int64</span> <span class="string">`gorm:&quot;primary_key&quot;`</span></span><br><span class="line">	Name     <span class="type">string</span></span><br><span class="line">	Age      <span class="type">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	db02, err := gorm.Open(mysql.Open(<span class="string">&quot;root:yanjun@tcp(127.0.0.1:3306)/gorm01?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span>), &amp;gorm.Config&#123;</span><br><span class="line">		NamingStrategy: schema.NamingStrategy&#123;</span><br><span class="line">			TablePrefix:   <span class="string">&quot;&quot;</span>,</span><br><span class="line">			SingularTable: <span class="literal">true</span>,</span><br><span class="line">			NameReplacer:  <span class="literal">nil</span>,</span><br><span class="line">			NoLowerCase:   <span class="literal">false</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">&quot;connect failed&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	err = db02.AutoMigrate(&amp;User&#123;&#125;)</span><br><span class="line">	err = db02.AutoMigrate(&amp;Animal&#123;&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 根据 User 的字段创建 `deleted_users` 表</span></span><br><span class="line">	err = db02.Table(<span class="string">&quot;deleted_users&quot;</span>).AutoMigrate(&amp;User&#123;&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 从另一张表查询数据</span></span><br><span class="line">	<span class="keyword">var</span> deletedUsers []User</span><br><span class="line">	db02.Table(<span class="string">&quot;deleted_users&quot;</span>).Find(&amp;deletedUsers)</span><br><span class="line">	<span class="comment">// SELECT * FROM deleted_users;</span></span><br><span class="line"></span><br><span class="line">	db02.Table(<span class="string">&quot;deleted_users&quot;</span>).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;name1&quot;</span>).Delete(&amp;User&#123;&#125;)</span><br><span class="line">	<span class="comment">// DELETE FROM deleted_users WHERE name = &#x27;name1&#x27;;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line">	<span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	DB *gorm.DB</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Todo Model</span></span><br><span class="line"><span class="keyword">type</span> Todo <span class="keyword">struct</span> &#123;</span><br><span class="line">	ID     <span class="type">int</span>    <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">	Title  <span class="type">string</span> <span class="string">`json:&quot;title&quot;`</span></span><br><span class="line">	Status <span class="type">bool</span>   <span class="string">`json:&quot;status&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initMySQL</span><span class="params">()</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line">	dsn := <span class="string">&quot;root:yanjun@tcp(127.0.0.1:3306)/bubble?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">	DB, err = gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//连接sql</span></span><br><span class="line">	err := initMySQL()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//建立关联</span></span><br><span class="line">	err = DB.AutoMigrate(&amp;Todo&#123;&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	r := gin.Default()</span><br><span class="line">	<span class="comment">//静态文件</span></span><br><span class="line">	r.Static(<span class="string">&quot;/static&quot;</span>, <span class="string">&quot;static&quot;</span>)</span><br><span class="line">	<span class="comment">//gin读取模板文件</span></span><br><span class="line">	r.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line">	r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;index.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// v1</span></span><br><span class="line">	v1Group := r.Group(<span class="string">&quot;v1&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//待办事项</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//添加</span></span><br><span class="line">		v1Group.POST(<span class="string">&quot;/todo&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			<span class="comment">//前端提交到后端</span></span><br><span class="line">			<span class="keyword">var</span> todo Todo</span><br><span class="line">			err = c.BindJSON(&amp;todo)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="built_in">panic</span>(<span class="string">&quot;[error]前端返回值到后端失败&quot;</span>)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//存入sql,返回响应</span></span><br><span class="line">			<span class="keyword">if</span> err = DB.Create(&amp;todo).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, todo)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="comment">//查看 所有&amp;一个</span></span><br><span class="line">		v1Group.GET(<span class="string">&quot;/todo&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			<span class="keyword">var</span> todoList []Todo</span><br><span class="line">			<span class="keyword">if</span> err = DB.Find(&amp;todoList).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, todoList)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">		v1Group.GET(<span class="string">&quot;/todo/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="comment">//更新</span></span><br><span class="line">		v1Group.PUT(<span class="string">&quot;/todo/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			id, ok := c.Params.Get(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">			<span class="keyword">if</span> !ok &#123;</span><br><span class="line">				c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;无效id&quot;</span>&#125;)</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">var</span> todo Todo</span><br><span class="line">			<span class="keyword">if</span> err = DB.Where(<span class="string">&quot;id=?&quot;</span>, id).First(&amp;todo).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">			err = c.BindJSON(&amp;todo)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="built_in">panic</span>(err)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> err = DB.Save(&amp;todo).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, todo)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="comment">//删除</span></span><br><span class="line">		v1Group.DELETE(<span class="string">&quot;/todo/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			id, ok := c.Params.Get(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">			<span class="keyword">if</span> !ok &#123;</span><br><span class="line">				c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;无效id&quot;</span>&#125;)</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> err = DB.Where(<span class="string">&quot;id=?&quot;</span>, id).Delete(Todo&#123;&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				c.JSON(http.StatusOK, gin.H&#123;id: <span class="string">&quot;deleted&quot;</span>&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	_ = r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Gorm</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-file</title>
    <url>/2023/09/03/Go-file/</url>
    <content><![CDATA[<h1 id="Go-File-Standard-Library"><a href="#Go-File-Standard-Library" class="headerlink" title="Go-File Standard Library"></a>Go-File Standard Library</h1><p>Golang has Standard Library to operate file<br>include create write read and so on</p>
<span id="more"></span>

<h2 id="Open-Close"><a href="#Open-Close" class="headerlink" title="Open&#x2F;Close"></a>Open&#x2F;Close</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">file, err := os.Open(<span class="string">&quot;./main.go&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;open file failed!, err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br></pre></td></tr></table></figure>

<h2 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h2><p><code>func (f *File) Read(b []byte) (n int, err error)</code></p>
<p><code>func NewReader(rd io.Reader) *Reader </code></p>
<p><code>func ReadFile(name string) ([]byte, error) </code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f, err := os.Open(<span class="string">&quot;readfile.txt&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;false&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> f.Close()</span><br><span class="line">	<span class="comment">/*m1*/</span></span><br><span class="line">	<span class="keyword">var</span> tmp = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">256</span>)</span><br><span class="line">	<span class="keyword">var</span> content []<span class="type">byte</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="comment">// loop read</span></span><br><span class="line">		n, err := f.Read(tmp)</span><br><span class="line">		<span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;read all&quot;</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;read failed&quot;</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		content = <span class="built_in">append</span>(content, tmp[:n]...)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//fmt.Println(string(content))</span></span><br><span class="line">	<span class="comment">/*m2*/</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;m2&quot;</span>)</span><br><span class="line">	reader := bufio.NewReader(f)</span><br><span class="line">	<span class="keyword">for</span> &#123;	</span><br><span class="line">		line, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">		<span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">			<span class="keyword">if</span> <span class="built_in">len</span>(line) != <span class="number">0</span> &#123;</span><br><span class="line">				fmt.Println(line)</span><br><span class="line">			&#125;</span><br><span class="line">			fmt.Println(<span class="string">&quot;read all&quot;</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;false&quot;</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(line)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*m3*/</span></span><br><span class="line">	readAll, err := os.ReadFile(<span class="string">&quot;./readfile.txt&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;false&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="type">string</span>(readAll))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Write"><a href="#Write" class="headerlink" title="Write"></a>Write</h2><p><code>os.OpenFile()</code></p>
<table>
<thead>
<tr>
<th>Modes</th>
<th>Meaning</th>
</tr>
</thead>
<tbody><tr>
<td><code>os.O_WRONLY</code></td>
<td>只写</td>
</tr>
<tr>
<td><code>os.O_CREATE</code></td>
<td>创建文件</td>
</tr>
<tr>
<td><code>os.O_RDONLY</code></td>
<td>只读</td>
</tr>
<tr>
<td><code>os.O_RDWR</code></td>
<td>读写</td>
</tr>
<tr>
<td><code>os.O_TRUNC</code></td>
<td>清空</td>
</tr>
<tr>
<td><code>os.O_APPEND</code></td>
<td>追加</td>
</tr>
</tbody></table>
<p><code>perm</code>：File permissions，Octal number。r（read）04，w（write）02，x（execute）01</p>
<p><code>func OpenFile(name string, flag int, perm FileMode) (*File, error) </code></p>
<p><code>func (f *File) Write(b []byte) (n int, err error)</code><br><code>func (f *File) WriteString(s string) (n int, err error)</code></p>
<p><code>func NewWriter(w io.Writer) *Writer </code></p>
<p><code>func WriteFile(name string, data []byte, perm FileMode) error</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">write1</span><span class="params">()</span></span> &#123;</span><br><span class="line">	file, err := os.OpenFile(<span class="string">&quot;write.txt&quot;</span>, os.O_CREATE|os.O_APPEND, <span class="number">0666</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;open failed&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> file.Close()</span><br><span class="line">	file.Write([]<span class="type">byte</span>(<span class="string">&quot;hello world\n&quot;</span>))</span><br><span class="line">	file.WriteString(<span class="string">&quot;hello golang\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">write2</span><span class="params">()</span></span> &#123;</span><br><span class="line">	file, err := os.OpenFile(<span class="string">&quot;write2.txt&quot;</span>, os.O_CREATE|os.O_APPEND, <span class="number">0666</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> file.Close()</span><br><span class="line">    writer := bufio.NewWriter(file)  <span class="comment">//Write data to the cache(缓存区)</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		writer.WriteString(<span class="string">&quot;hello golang&quot;</span> + fmt.Sprintf(strconv.Itoa(i)) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	writer.Flush() <span class="comment">//Write the contents of the cache to a file</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">write3</span><span class="params">()</span></span> &#123;</span><br><span class="line">	str := <span class="string">&quot;hello world hello golang&quot;</span></span><br><span class="line">	err := os.WriteFile(<span class="string">&quot;./write3.txt&quot;</span>, []<span class="type">byte</span>(str), <span class="number">0666</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;false&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>GO-flag</title>
    <url>/2023/09/03/Go-flag/</url>
    <content><![CDATA[<h1 id="Golang-Flag-Standard-Library"><a href="#Golang-Flag-Standard-Library" class="headerlink" title="Golang-Flag Standard Library"></a>Golang-Flag Standard Library</h1><p>The Go language <code>flag</code> package implements the parsing of command line arguments</p>
<h2 id="Get-the-command-line-arguments"><a href="#Get-the-command-line-arguments" class="headerlink" title="Get the command line arguments"></a>Get the command line arguments</h2><span id="more"></span>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//os.Args-&gt;[]string</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(os.Args) &gt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> idx, arg := <span class="keyword">range</span> os.Args &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;args[%d]=%v\n&quot;</span>, idx, arg)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go run osArgs.go 1 2</span></span><br><span class="line">args[0]=C:\Users\yu\AppData\Local\Temp\go-build3364657135\b001\exe\osArgs.exe</span><br><span class="line">args[1]=1</span><br><span class="line">args[2]=2</span><br></pre></td></tr></table></figure>

<h2 id="Define-the-command-line-flag-parameter"><a href="#Define-the-command-line-flag-parameter" class="headerlink" title="Define the command-line flag parameter"></a>Define the command-line flag parameter</h2><p>The command line parameter types supported by the flag package are ,<br><code>bool</code> <code>int</code> , <code>int64</code> <code>uint</code> <code>uint64</code> <code>float</code> <code>float64</code> <code>string</code> <code>duration</code> </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;flag&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">/*定义flag参数*/</span></span><br><span class="line">	<span class="comment">//name := flag.String(&quot;name&quot;, &quot;张三&quot;, &quot;姓名&quot;)</span></span><br><span class="line">	<span class="comment">//age := flag.Int(&quot;age&quot;, 18, &quot;年龄&quot;)</span></span><br><span class="line">	<span class="comment">//married := flag.Bool(&quot;married&quot;, false, &quot;婚否&quot;)</span></span><br><span class="line">	<span class="comment">//delay := flag.Duration(&quot;d&quot;, 0, &quot;时间间隔&quot;)</span></span><br><span class="line">	<span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line">	<span class="keyword">var</span> age <span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> married <span class="type">bool</span></span><br><span class="line">	<span class="keyword">var</span> delay time.Duration</span><br><span class="line">	flag.StringVar(&amp;name, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;姓名&quot;</span>)</span><br><span class="line">	flag.IntVar(&amp;age, <span class="string">&quot;age&quot;</span>, <span class="number">18</span>, <span class="string">&quot;年龄&quot;</span>)</span><br><span class="line">	flag.BoolVar(&amp;married, <span class="string">&quot;married&quot;</span>, <span class="literal">false</span>, <span class="string">&quot;婚否&quot;</span>)</span><br><span class="line">	flag.DurationVar(&amp;delay, <span class="string">&quot;d&quot;</span>, <span class="number">0</span>, <span class="string">&quot;时间间隔&quot;</span>)</span><br><span class="line">	<span class="comment">/*解析*/</span></span><br><span class="line">	flag.Parse()</span><br><span class="line">	fmt.Println(name, age, married, delay)</span><br><span class="line">	<span class="comment">//返回命令行参数后的其他参数</span></span><br><span class="line">	fmt.Println(flag.Args())</span><br><span class="line">	<span class="comment">//返回命令行参数后的其他参数个数</span></span><br><span class="line">	fmt.Println(flag.NArg())</span><br><span class="line">	<span class="comment">//返回使用的命令行参数个数</span></span><br><span class="line">	fmt.Println(flag.NFlag())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	 	</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-log</title>
    <url>/2023/09/03/Go-log/</url>
    <content><![CDATA[<h1 id="LOG"><a href="#LOG" class="headerlink" title="LOG"></a>LOG</h1><h2 id="GO-log-Standard-Library"><a href="#GO-log-Standard-Library" class="headerlink" title="GO-log Standard Library"></a>GO-log Standard Library</h2><p>he Go <code>log</code>  package implements a simple log service base on Standard Library.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	log.SetFlags(log.Lshortfile | log.Ltime | log.Ldate | log.LUTC)</span><br><span class="line">	log.Println(<span class="string">&quot;日志1&quot;</span>)</span><br><span class="line">	log.SetPrefix(<span class="string">&quot;[log]&quot;</span>)</span><br><span class="line">	log.Println(<span class="string">&quot;日志2&quot;</span>)</span><br><span class="line">	logf, err := os.OpenFile(<span class="string">&quot;./Flog.log&quot;</span>, os.O_CREATE|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	log.SetOutput(logf)</span><br><span class="line">	log.Println(<span class="string">&quot;日志3&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="func-SetFlags-flag-int"><a href="#func-SetFlags-flag-int" class="headerlink" title="func SetFlags(flag int)"></a><code>func SetFlags(flag int)</code></h3><p>Defaultly, loggers only provide log time information,<br>but in many cases we want to get more information,<br>such as the file name and line number of the log.<br><code>log</code> The standard library gives us ways to add these choices.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Ldate       				 // 2009/01/23</span><br><span class="line">   Ltime                        // 01:23:23</span><br><span class="line">   Lmicroseconds                // 01:23:23.123123</span><br><span class="line">   Llongfile                     // path+line： /a/b/c/d.go:23</span><br><span class="line">   Lshortfile                    // fileName+line：d.go:23（会覆盖掉Llongfile）</span><br><span class="line">   LUTC                         // UTCtime</span><br><span class="line">   LstdFlags    				 // Dfaultlogger</span><br></pre></td></tr></table></figure>

<h3 id="Prefix"><a href="#Prefix" class="headerlink" title="Prefix"></a>Prefix</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Prefix</span><span class="params">()</span></span> <span class="type">string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetPrefix</span><span class="params">(prefix <span class="type">string</span>)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="OutPutLocal"><a href="#OutPutLocal" class="headerlink" title="OutPutLocal"></a>OutPutLocal</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetOutput</span><span class="params">(w io.Writer)</span></span></span><br></pre></td></tr></table></figure>





<h2 id="Logrus"><a href="#Logrus" class="headerlink" title="Logrus"></a><a href="https://github.com/sirupsen/logrus">Logrus</a></h2><h2 id="Uber-go-zap"><a href="#Uber-go-zap" class="headerlink" title="Uber-go zap"></a>Uber-go zap</h2>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-redis</title>
    <url>/2023/09/03/Go-redis/</url>
    <content><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>Redis (<strong>Remote Dictionary Server</strong>)<br><strong>key-value</strong> non-relational (NoSQL) database based on an <strong>in-memory</strong> implementation</p>
<p>Redis provides a variety of different types of data structures,<br>many business scenarios problems can be naturally reflect to these data structures.<br>In addition, with features such as replication, persistence, and client-side sharding,<br>Redis can easily scale into(扩展) a system that can contain hundreds of GB datas<br>and handle millions of requests per second.</p>
<p>Redis supports data structures such as<br><code>string,hash,list,set,sortedSets,bitmaps,hyperloglogs,geospatial,streams</code></p>
<span id="more"></span>

<h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><p>NoSQL (Not only SQL) is a collective term for a database management system that is different from traditional relational databases</p>
<p>Redis (<strong>Remote Dictionary Server</strong>)<br><strong>key-value</strong> non-relational (NoSQL) database based on an <strong>in-memory</strong> implementation</p>
<table>
<thead>
<tr>
<th></th>
<th>SQL</th>
<th>NoSQL</th>
</tr>
</thead>
<tbody><tr>
<td>dataType</td>
<td>structured</td>
<td>NotStructured</td>
</tr>
<tr>
<td>dataRelation</td>
<td>Relational</td>
<td>NotRelational</td>
</tr>
<tr>
<td>queryMethod</td>
<td>SQL</td>
<td>not-SQL</td>
</tr>
<tr>
<td>transactions</td>
<td>ACID</td>
<td>BASE</td>
</tr>
</tbody></table>
<h2 id="Commend"><a href="#Commend" class="headerlink" title="Commend"></a>Commend</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">redis-cli</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -it --network host --<span class="built_in">rm</span> redis redis-cli</span></span><br></pre></td></tr></table></figure>

<p>query key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KEYS pattern </span><br></pre></td></tr></table></figure>

<p>del key</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DEL name</span><br></pre></td></tr></table></figure>

<p>insert</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> Key <span class="keyword">Value</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MSET k1 v1 k2 v3 k3 v3 [key,value...]</span><br></pre></td></tr></table></figure>

<p>exist</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXISTS</span> key</span><br></pre></td></tr></table></figure>

<p>expirationTime</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPIRE key</span><br></pre></td></tr></table></figure>

<p>see expire</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">TTL key</span><br></pre></td></tr></table></figure>

<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p> value:string int float</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> key</span><br><span class="line">  summary: <span class="keyword">Returns</span> the string <span class="keyword">value</span> <span class="keyword">of</span> a key.</span><br><span class="line">  </span><br><span class="line">MGET key [key ...]</span><br><span class="line">  summary: Atomically <span class="keyword">returns</span> the string <span class="keyword">values</span> <span class="keyword">of</span> <span class="keyword">one</span> <span class="keyword">or</span> more keys.</span><br><span class="line">  </span><br><span class="line"><span class="keyword">SET</span> key <span class="keyword">value</span> [NX<span class="operator">|</span>XX] [<span class="keyword">GET</span>] [EX seconds<span class="operator">|</span>PX milliseconds<span class="operator">|</span>EXAT unix<span class="operator">-</span><span class="type">time</span><span class="operator">-</span>seconds<span class="operator">|</span>PXAT unix<span class="operator">-</span><span class="type">time</span><span class="operator">-</span>			milliseconds<span class="operator">|</span>KEEPTTL]</span><br><span class="line">  summary: Sets the string <span class="keyword">value</span> <span class="keyword">of</span> a key, ignoring its type. The key <span class="keyword">is</span> created if it doesn<span class="string">&#x27;t 				exist.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">MSET key value [key value ...]</span></span><br><span class="line"><span class="string">  summary: Atomically creates or modifies the string values of one or more keys.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">INCR key</span></span><br><span class="line"><span class="string">  summary: Increments the integer value of a key by one. Uses 0 as initial value if the key doesn&#x27;</span>t 	 	exist.  </span><br><span class="line"></span><br><span class="line">INCRBY<span class="operator">/</span>INCRBYFLOAT key increment</span><br><span class="line">  summary: Increments the <span class="type">integer</span> <span class="keyword">value</span> <span class="keyword">of</span> a key <span class="keyword">by</span> a step. Uses <span class="number">0</span> <span class="keyword">as</span> <span class="keyword">initial</span> <span class="keyword">value</span> if the key 				doesn<span class="string">&#x27;t exist. </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">SETEX key seconds value</span></span><br><span class="line"><span class="string">  summary: Sets the string value and expiration time of a key. Creates the key if it doesn&#x27;</span>t exist.</span><br><span class="line"></span><br><span class="line">SETNX key <span class="keyword">value</span></span><br><span class="line">  summary: <span class="keyword">Set</span> the string <span class="keyword">value</span> <span class="keyword">of</span> a key <span class="keyword">only</span> <span class="keyword">when</span> the key doesn<span class="string">&#x27;t exist.</span></span><br></pre></td></tr></table></figure>

<p>struct</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">projectName:serverName:type:id</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> red:user:1 <span class="string">&#x27;&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;jack&quot;,&quot;age&quot;:21&#125;&#x27;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> red:user:2 <span class="string">&#x27;&#123;&quot;id&quot;:2,&quot;name&quot;:&quot;mike&quot;,&quot;age&quot;:16&#125;&#x27;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> red:product:1 <span class="string">&#x27;&#123;&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;loop&quot;,&quot;pri&quot;,1000&#125;&#x27;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> red:product:1 <span class="string">&#x27;&#123;&quot;id&quot;:&quot;2&quot;,&quot;name&quot;:&quot;loop2&quot;,&quot;pri&quot;,10000&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys red*</span><br><span class="line">1) <span class="string">&quot;red:product:1&quot;</span></span><br><span class="line">2) <span class="string">&quot;red:user:2&quot;</span></span><br><span class="line">3) <span class="string">&quot;red:user:1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; keys red:product*</span><br><span class="line">1) <span class="string">&quot;red:product:1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; keys red:user*</span><br><span class="line">1) <span class="string">&quot;red:user:2&quot;</span></span><br><span class="line">2) <span class="string">&quot;red:user:1&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">HDEL key field [field ...]</span><br><span class="line"></span><br><span class="line">HEXISTS key field</span><br><span class="line"></span><br><span class="line">HGET key field</span><br><span class="line"></span><br><span class="line">HGETALL key  </span><br><span class="line"></span><br><span class="line">HSET key field</span><br><span class="line"> </span><br><span class="line">HKEYS key</span><br><span class="line"></span><br><span class="line">HVALS key <span class="operator">/</span><span class="operator">/</span><span class="keyword">get</span> key</span><br><span class="line"></span><br><span class="line">HLEN key	<span class="operator">/</span><span class="operator">/</span><span class="keyword">get</span> <span class="keyword">value</span></span><br><span class="line"> </span><br><span class="line">HMGET key field [field ...]</span><br><span class="line"> </span><br><span class="line">HMSET key field <span class="keyword">value</span> [field <span class="keyword">value</span> ...]</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET zyuu:user:1 age 111</span><br><span class="line">127.0.0.1:6379&gt; HGET zyuu:user:1 age</span><br><span class="line">&quot;111&quot;</span><br><span class="line">127.0.0.1:6379&gt;HMSET zyuu:user:2 name lilei age 20 sex man</span><br><span class="line">127.0.0.1:6379&gt; HGETALL zyuu:user:2</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;lilei&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;20&quot;</span><br><span class="line">5) &quot;sex&quot;</span><br><span class="line">6) &quot;man&quot;</span><br></pre></td></tr></table></figure>

<h3 id="List-based-on-doublie-linkedlist"><a href="#List-based-on-doublie-linkedlist" class="headerlink" title="List (based on doublie-linkedlist)"></a>List (based on doublie-linkedlist)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LPUSH<span class="operator">/</span>RPUSH key element [element ...]</span><br><span class="line">LPOP<span class="operator">/</span>RPOP key [count]</span><br><span class="line">LRANGE key <span class="keyword">start</span> stop</span><br></pre></td></tr></table></figure>

<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><hr>
<h1 id="Go-redis"><a href="#Go-redis" class="headerlink" title="Go-redis"></a><a href="https://redis.io/">Go-redis</a></h1><p>Install Redis locally or use Docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name redis507 -p 6379:6379 -d redis:5.0.7</span><br><span class="line">docker run -it --network host --<span class="built_in">rm</span> redis:5.0.7 redis-cli</span><br></pre></td></tr></table></figure>

<p>Go-redis package<br><a href="https://github.com/gomodule/redigo">redigo</a> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get github.com/gomodule/redigo/redis</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/redis/go-redis">go-redis</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> mod init github.com/my/repo</span><br><span class="line"><span class="keyword">go</span> get github.com/redis/<span class="keyword">go</span>-redis/v9</span><br></pre></td></tr></table></figure>

<p>Here we use <code>go-redis</code>package</p>
<h2 id="Connect"><a href="#Connect" class="headerlink" title="Connect"></a>Connect</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;errors&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/redis/go-redis/v9&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// $ docker run -it --network host --rm redis redis-cli</span></span><br><span class="line"><span class="keyword">var</span> rdb = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">	Addr:     <span class="string">&quot;localhost:6379&quot;</span>,</span><br><span class="line">	Password: <span class="string">&quot;&quot;</span>, <span class="comment">// 密码</span></span><br><span class="line">	DB:       <span class="number">0</span>,  <span class="comment">// 数据库</span></span><br><span class="line">	PoolSize: <span class="number">20</span>, <span class="comment">// 连接池大小</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> redisDB *redis.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	redisDB = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">		Addr:     <span class="string">&quot;localhost:6379&quot;</span>,</span><br><span class="line">		DB:       <span class="number">3</span>,</span><br><span class="line">		Password: <span class="string">&quot;&quot;</span>,</span><br><span class="line">		PoolSize: <span class="number">20</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">	ctx, cancel := context.WithTimeout(context.Background(), time.Millisecond*<span class="number">3000</span>)</span><br><span class="line">	<span class="keyword">defer</span> cancel()</span><br><span class="line">	_, err := redisDB.Ping(ctx).Result()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	DoCommend1(ctx)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DoCommend1</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">	<span class="comment">//执行命令获取结果</span></span><br><span class="line">	val, err := redisDB.Get(ctx, <span class="string">&quot;key&quot;</span>).Result()</span><br><span class="line">	fmt.Println(val, err)</span><br><span class="line">	<span class="comment">//获取命令对象</span></span><br><span class="line">	cmder := redisDB.Get(ctx, <span class="string">&quot;key&quot;</span>)</span><br><span class="line">	fmt.Println(cmder.Val())</span><br><span class="line">	fmt.Println(cmder.Err())</span><br><span class="line">	<span class="comment">//行命令获取错误</span></span><br><span class="line">	err = redisDB.Set(ctx, <span class="string">&quot;key&quot;</span>, <span class="string">&quot;hello golang&quot;</span>, <span class="number">3</span>*time.Second).Err()</span><br><span class="line">	<span class="comment">// 直接执行命令获取值</span></span><br><span class="line">	value := redisDB.Get(ctx, <span class="string">&quot;key&quot;</span>).Val()</span><br><span class="line">	fmt.Println(value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="commend"><a href="#commend" class="headerlink" title="commend"></a>commend</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DoCommend commend</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DoCommend</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ctx, cancel := context.WithTimeout(context.Background(), <span class="number">500</span>*time.Millisecond)</span><br><span class="line">	<span class="keyword">defer</span> cancel()</span><br><span class="line">	<span class="comment">//执行命令获取结果</span></span><br><span class="line">	val, err := rdb.Get(ctx, <span class="string">&quot;key&quot;</span>).Result()</span><br><span class="line">	fmt.Println(val, err)</span><br><span class="line">	<span class="comment">//获取命令对象</span></span><br><span class="line">	cmder := rdb.Get(ctx, <span class="string">&quot;key&quot;</span>)</span><br><span class="line">	fmt.Println(cmder.Val())</span><br><span class="line">	fmt.Println(cmder.Err())</span><br><span class="line">	<span class="comment">//行命令获取错误</span></span><br><span class="line">	err = rdb.Set(ctx, <span class="string">&quot;key&quot;</span>, <span class="string">&quot;hello golang&quot;</span>, <span class="number">3</span>*time.Second).Err()</span><br><span class="line">	<span class="comment">// 直接执行命令获取值</span></span><br><span class="line">	value := rdb.Get(ctx, <span class="string">&quot;key&quot;</span>).Val()</span><br><span class="line">	fmt.Println(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="anycommend"><a href="#anycommend" class="headerlink" title="anycommend"></a>anycommend</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DoAny any commend</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DoAny</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ctx, cancel := context.WithTimeout(context.Background(), <span class="number">500</span>*time.Millisecond)</span><br><span class="line">	<span class="keyword">defer</span> cancel()</span><br><span class="line">	err := rdb.Do(ctx, <span class="string">&quot;set&quot;</span>, <span class="string">&quot;key&quot;</span>, <span class="string">&quot;hello,world&quot;</span>, <span class="string">&quot;EX&quot;</span>, <span class="number">3600</span>).Err()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	val, err := rdb.Do(ctx, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;key&quot;</span>).Result()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(val)</span><br><span class="line"></span><br><span class="line">	aff, err := rdb.Do(ctx, <span class="string">&quot;EXISTS&quot;</span>, <span class="string">&quot;key&quot;</span>).Result()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;aff:&quot;</span>, aff)</span><br><span class="line"></span><br><span class="line">	aff, err = rdb.Do(ctx, <span class="string">&quot;DEL&quot;</span>, <span class="string">&quot;key&quot;</span>).Result()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;aff:&quot;</span>, aff)</span><br><span class="line"></span><br><span class="line">	aff, err = rdb.Do(ctx, <span class="string">&quot;EXISTS&quot;</span>, <span class="string">&quot;key&quot;</span>).Result()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;aff:&quot;</span>, aff)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RedisNil redis nil</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RedisNil</span><span class="params">(key, defaultValue <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	ctx, cancel := context.WithTimeout(context.Background(), <span class="number">500</span>*time.Millisecond)</span><br><span class="line">	<span class="keyword">defer</span> cancel()</span><br><span class="line">	val, err := rdb.Get(ctx, key).Result()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="comment">//not exist key</span></span><br><span class="line">		<span class="keyword">if</span> errors.Is(err, redis.Nil) &#123;</span><br><span class="line">			<span class="keyword">return</span> defaultValue, <span class="literal">nil</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> val, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ZsetRedis</span><span class="params">()</span></span> &#123;</span><br><span class="line">	zsetKey := <span class="string">&quot;language_rank&quot;</span></span><br><span class="line">	<span class="comment">//value</span></span><br><span class="line">	languages := []redis.Z&#123;</span><br><span class="line">		&#123;Score: <span class="number">90.0</span>, Member: <span class="string">&quot;Go&quot;</span>&#125;,</span><br><span class="line">		&#123;Score: <span class="number">90.1</span>, Member: <span class="string">&quot;Java&quot;</span>&#125;,</span><br><span class="line">		&#123;Score: <span class="number">90.2</span>, Member: <span class="string">&quot;C&quot;</span>&#125;,</span><br><span class="line">		&#123;Score: <span class="number">90.3</span>, Member: <span class="string">&quot;cpp&quot;</span>&#125;,</span><br><span class="line">		&#123;Score: <span class="number">90.4</span>, Member: <span class="string">&quot;C#&quot;</span>&#125;,</span><br><span class="line">		&#123;Score: <span class="number">90.5</span>, Member: <span class="string">&quot;Python&quot;</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	ctx, cancer := context.WithTimeout(context.Background(), <span class="number">500</span>*time.Millisecond)</span><br><span class="line">	<span class="keyword">defer</span> cancer()</span><br><span class="line"></span><br><span class="line">	<span class="comment">//ZADD</span></span><br><span class="line">	err := rdbZ.ZAdd(ctx, zsetKey, languages...).Err()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;add success&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//add go 0.1</span></span><br><span class="line">	newScore, err := rdbZ.ZIncrBy(ctx, zsetKey, <span class="number">0.1</span>, <span class="string">&quot;Go&quot;</span>).Result()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(newScore)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//get the max3</span></span><br><span class="line">	ret := rdbZ.ZRevRangeWithScores(ctx, zsetKey, <span class="number">0</span>, <span class="number">2</span>).Val()</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> ret &#123;</span><br><span class="line">		fmt.Println(v.Member, v.Score)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//get score limit</span></span><br><span class="line">	<span class="comment">/*op := &amp;redis.ZRangeBy&#123;</span></span><br><span class="line"><span class="comment">		Min: &quot;90&quot;,</span></span><br><span class="line"><span class="comment">		Max: &quot;90.2&quot;,</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	ret, err = rdbZ.ZRevRangeByScoreWithScores(ctx, zsetKey, &amp;redis.ZRangeBy&#123;</span><br><span class="line">		Min: <span class="string">&quot;90&quot;</span>,</span><br><span class="line">		Max: <span class="string">&quot;90.2&quot;</span>,</span><br><span class="line">	&#125;).Result()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="KEYS"><a href="#KEYS" class="headerlink" title="KEYS *"></a>KEYS *</h2><p>prefix</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PrefixKey Get prefix keys</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrefixKey</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ctx, cancer := context.WithTimeout(context.Background(), <span class="number">500</span>*time.Millisecond)</span><br><span class="line">	<span class="keyword">defer</span> cancer()</span><br><span class="line">	<span class="comment">//method 1</span></span><br><span class="line">	vals, _ := rdbZ.Keys(ctx, <span class="string">&quot;*&quot;</span>).Result()</span><br><span class="line">	fmt.Println(vals)</span><br><span class="line">	<span class="comment">//method 2</span></span><br><span class="line">	iter := rdbZ.Scan(ctx, <span class="number">0</span>, <span class="string">&quot;*&quot;</span>, <span class="number">0</span>).Iterator()</span><br><span class="line">	<span class="keyword">for</span> iter.Next(ctx) &#123;</span><br><span class="line">		<span class="comment">//err:=rdbZ.Del(ctx,iter.Val())</span></span><br><span class="line">		<span class="comment">//err := rdbZ.Do(ctx, &quot;DEL&quot;, iter.Val()).Err()</span></span><br><span class="line">		<span class="comment">//if err != nil &#123;</span></span><br><span class="line">		<span class="comment">//	fmt.Println(err)</span></span><br><span class="line">		<span class="comment">//	return</span></span><br><span class="line">		<span class="comment">//&#125;</span></span><br><span class="line">		fmt.Println(iter.Val())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err := iter.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">to be <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph-LC417</title>
    <url>/2023/09/03/Graph-LC417/</url>
    <content><![CDATA[<h1 id="Leetcode-417-dfs"><a href="#Leetcode-417-dfs" class="headerlink" title="Leetcode 417-dfs"></a>Leetcode 417-<code>dfs</code></h1><h2 id="Pacific-Atlantic-Water-Flow"><a href="#Pacific-Atlantic-Water-Flow" class="headerlink" title="Pacific Atlantic Water Flow"></a><a href="https://leetcode.cn/problems/pacific-atlantic-water-flow/">Pacific Atlantic Water Flow</a></h2><p><em>Becase of method of DFS and BFS are Similar,</em><br><em>therefore using dfs to solve this problem</em></p>
<p>There is an <code>m x n</code> rectangular(矩形) island<br>that borders both the <strong>Pacific Ocean</strong>(太平洋) and <strong>Atlantic Ocean</strong>(大西洋).<br>The <strong>Pacific Ocean</strong> touches the island’s left and top edges,<br>and the <strong>Atlantic Ocean</strong> touches the island’s right and bottom edges.</p>
<p>The island is partitioned into a grid of square cells.<br>You are given an <code>m x n</code> integer matrix <code>heights</code><br>where <code>heights[r][c]</code> represents the <strong>height above sea level</strong> of<br>the cell at coordinate(坐标) <code>(r, c)</code>.</p>
<p>The island receives a lot of rain,<br>and the rain water can flow to neighboring cells directly north, south, east, and west<br>if the neighboring cell’s height is <strong>less than or equal to</strong> the current cell’s height.<br>Water can flow from any cell adjacent to an ocean into the ocean.</p>
<p>Return <em>a <strong>2D list</strong> of grid coordinates</em> <code>result</code><br><em>where</em> <code>result[i] = [ri, ci]</code> denotes that<br><em>rain water can flow from cell</em> <code>(ri, ci)</code> <em>to <strong>both</strong> the Pacific and Atlantic oceans</em>. </p>
<span id="more"></span>



<p><img src="/./../pic/Graph-LC417/image-20230903183542427.png" alt="image-20230903183542427"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]</span><br><span class="line">Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]</span><br><span class="line">Explanation: The following cells can flow to the Pacific and Atlantic oceans, as shown below:</span><br><span class="line">[0,4]: [0,4] -&gt; Pacific Ocean </span><br><span class="line">       [0,4] -&gt; Atlantic Ocean</span><br><span class="line">[1,3]: [1,3] -&gt; [0,3] -&gt; Pacific Ocean </span><br><span class="line">       [1,3] -&gt; [1,4] -&gt; Atlantic Ocean</span><br><span class="line">[1,4]: [1,4] -&gt; [1,3] -&gt; [0,3] -&gt; Pacific Ocean </span><br><span class="line">       [1,4] -&gt; Atlantic Ocean</span><br><span class="line">[2,2]: [2,2] -&gt; [1,2] -&gt; [0,2] -&gt; Pacific Ocean </span><br><span class="line">       [2,2] -&gt; [2,3] -&gt; [2,4] -&gt; Atlantic Ocean</span><br><span class="line">[3,0]: [3,0] -&gt; Pacific Ocean </span><br><span class="line">       [3,0] -&gt; [4,0] -&gt; Atlantic Ocean</span><br><span class="line">[3,1]: [3,1] -&gt; [3,0] -&gt; Pacific Ocean </span><br><span class="line">       [3,1] -&gt; [4,1] -&gt; Atlantic Ocean</span><br><span class="line">[4,0]: [4,0] -&gt; Pacific Ocean </span><br><span class="line">       [4,0] -&gt; Atlantic Ocean</span><br><span class="line">Note that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans.</span><br></pre></td></tr></table></figure>

<h2 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h2><p>这道题英语看的我头疼,我大概描述一下<br>流向太平洋只能向左向上<br>流向大西洋只能向右向下<br>从太平洋边上的节点 逆流而上，将遍历过的节点都标记上。<br>从大西洋的边上节点 逆流而长，将遍历过的节点也标记上。<br>然后两方都标记过的节点就是既可以流太平洋也可以流大西洋的节点。<br>result是一个包含可行点的二维数组</p>
<p>由于dfs和bfs只是处理方式不一样,其他的总体代码大同小异<br>所以只写dfs</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pacificAtlantic</span><span class="params">(heights [][]<span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> ret [][]<span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> dir = [<span class="number">4</span>][<span class="number">2</span>]<span class="type">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;</span><br><span class="line">	n, m := <span class="built_in">len</span>(heights), <span class="built_in">len</span>(heights[<span class="number">0</span>])</span><br><span class="line">	pacific, atlantic := <span class="built_in">make</span>([][]<span class="type">bool</span>, n), <span class="built_in">make</span>([][]<span class="type">bool</span>, n)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> pacific &#123;</span><br><span class="line">		pacific[i], atlantic[i] = <span class="built_in">make</span>([]<span class="type">bool</span>, m), <span class="built_in">make</span>([]<span class="type">bool</span>, m)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(visited [][]<span class="type">bool</span>, x, y <span class="type">int</span>)</span></span></span><br><span class="line">	dfs = <span class="function"><span class="keyword">func</span><span class="params">(visited [][]<span class="type">bool</span>, x, y <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> visited[x][y] &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		visited[x][y] = <span class="literal">true</span></span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">			nextX := x + dir[i][<span class="number">0</span>]</span><br><span class="line">			nextY := y + dir[i][<span class="number">1</span>]</span><br><span class="line">			<span class="keyword">if</span> nextX &lt; <span class="number">0</span> || nextY &lt; <span class="number">0</span> || nextX &gt;= n || nextY &gt;= m &#123;</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> heights[nextX][nextY] &gt;= heights[x][y] &#123;</span><br><span class="line">				dfs(visited, nextX, nextY)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		用于遍历矩阵的行(从上到下)</span></span><br><span class="line"><span class="comment">		调用 dfs 函数标记从当前行的第一列出发可以流向太平洋的单元格，即(i, 0)这个单元格</span></span><br><span class="line"><span class="comment">		调用 dfs 函数标记从当前行的最后一列出发可以流向大西洋的单元格，即(i, m-1)这个单元格</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		dfs(pacific, i, <span class="number">0</span>)</span><br><span class="line">		dfs(atlantic, i, m<span class="number">-1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		用于遍历矩阵的列(从左到右)</span></span><br><span class="line"><span class="comment">		调用 dfs 函数标记从当前列的第一行出发可以流向太平洋的单元格，即 (0, j) 这个单元格。</span></span><br><span class="line"><span class="comment">		调用 dfs 函数标记从当前列的最后一行一行出发可以流向太平洋的单元格，即 (n-1, j) 这个单元格。</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">		dfs(pacific, <span class="number">0</span>, j)</span><br><span class="line">		dfs(atlantic, n<span class="number">-1</span>, j)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> pacific[i][j] &amp;&amp; atlantic[i][j] &#123;</span><br><span class="line">				ret = <span class="built_in">append</span>(ret, []<span class="type">int</span>&#123;i, j&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph-LC130</title>
    <url>/2023/09/03/Graph-LC130/</url>
    <content><![CDATA[<h1 id="Leetcode-200-dfs-and-bfs"><a href="#Leetcode-200-dfs-and-bfs" class="headerlink" title="Leetcode 200-dfs and bfs"></a>Leetcode 200-<code>dfs</code> and <code>bfs</code></h1><h2 id="Surrounded-Regions"><a href="#Surrounded-Regions" class="headerlink" title="Surrounded Regions"></a><a href="https://leetcode.cn/problems/surrounded-regions/">Surrounded Regions</a></h2><p>Given an <code>m x n</code> matrix <code>board</code> containing <code>&#39;X&#39;</code> and <code>&#39;O&#39;</code>, <em>capture all regions that are 4-directionally surrounded by</em> <code>&#39;X&#39;</code>.</p>
<p>A region is <strong>captured</strong> by flipping all <code>&#39;O&#39;</code>s into <code>&#39;X&#39;</code>s in that surrounded region.</p>
<p> <img src="/./../pic/Graph-LC130/image-20230903174833997.png" alt="image-20230903174833997"></p>
<span id="more"></span>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Input: board = [[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;O&quot;,&quot;O&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;X&quot;,&quot;O&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;O&quot;,&quot;X&quot;,&quot;X&quot;]]</span><br><span class="line">Output: [[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;O&quot;,&quot;X&quot;,&quot;X&quot;]]</span><br><span class="line">Explanation: Notice that an &#x27;O&#x27; should not be flipped if:</span><br><span class="line">- It is on the border, or</span><br><span class="line">- It is adjacent to an &#x27;O&#x27; that should not be flipped.</span><br><span class="line">The bottom &#x27;O&#x27; is on the border, so it is not flipped.</span><br><span class="line">The other three &#x27;O&#x27; form a surrounded region, so they are flipped.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Input: board = [[&quot;X&quot;]]</span><br><span class="line">Output: [[&quot;X&quot;]]</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == board.length</code></li>
<li><code>n == board[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 200</code></li>
<li><code>board[i][j]</code> is <code>&#39;X&#39;</code> or <code>&#39;O&#39;</code>.</li>
</ul>
<!-- more -->

<h2 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h2><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Change boundary `O` -&gt; `A`</span></span><br><span class="line"><span class="comment">Change all list `O` -&gt; `X`</span></span><br><span class="line"><span class="comment">Change all list `A` -&gt; `O`</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solve</span><span class="params">(board [][]<span class="type">byte</span>)</span></span> &#123;</span><br><span class="line">	n, m := <span class="built_in">len</span>(board), <span class="built_in">len</span>(board[<span class="number">0</span>])</span><br><span class="line">	dir := [<span class="number">4</span>][<span class="number">2</span>]<span class="type">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;</span><br><span class="line">	<span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span></span><br><span class="line">	dfs = <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		board[x][y] = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">			nextX := x + dir[i][<span class="number">0</span>]</span><br><span class="line">			nextY := y + dir[i][<span class="number">1</span>]</span><br><span class="line">			<span class="keyword">if</span> nextX &lt; <span class="number">0</span> || nextY &lt; <span class="number">0</span> || nextX &gt;= n || nextY &gt;= m &#123;</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> board[nextX][nextY] == <span class="string">&#x27;O&#x27;</span> &#123;</span><br><span class="line">				dfs(nextX, nextY)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> board[i][<span class="number">0</span>] == <span class="string">&#x27;O&#x27;</span> &#123;</span><br><span class="line">			dfs(i, <span class="number">0</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> board[i][m<span class="number">-1</span>] == <span class="string">&#x27;O&#x27;</span> &#123;</span><br><span class="line">			dfs(i, m<span class="number">-1</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">		<span class="keyword">if</span> board[<span class="number">0</span>][j] == <span class="string">&#x27;O&#x27;</span> &#123;</span><br><span class="line">			dfs(<span class="number">0</span>, j)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> board[n<span class="number">-1</span>][j] == <span class="string">&#x27;O&#x27;</span> &#123;</span><br><span class="line">			dfs(n<span class="number">-1</span>, j)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> board[i][j] == <span class="string">&#x27;O&#x27;</span> &#123;</span><br><span class="line">				board[i][j] = <span class="string">&#x27;X&#x27;</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> board[i][j] == <span class="string">&#x27;A&#x27;</span> &#123;</span><br><span class="line">				board[i][j] = <span class="string">&#x27;O&#x27;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Change boundary `O` -&gt; `A`</span></span><br><span class="line"><span class="comment">Change all list `O` -&gt; `X`</span></span><br><span class="line"><span class="comment">Change all list `A` -&gt; `O`</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solve</span><span class="params">(board [][]<span class="type">byte</span>)</span></span> &#123;</span><br><span class="line">	n, m := <span class="built_in">len</span>(board), <span class="built_in">len</span>(board[<span class="number">0</span>])</span><br><span class="line">	dir := [<span class="number">4</span>][<span class="number">2</span>]<span class="type">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;</span><br><span class="line">	<span class="keyword">var</span> bfs <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span></span><br><span class="line">	bfs = <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		board[x][y] = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">		que := list.New()</span><br><span class="line">		que.PushBack(x)</span><br><span class="line">		que.PushBack(y)</span><br><span class="line">		<span class="keyword">for</span> que.Len() != <span class="number">0</span> &#123;</span><br><span class="line">			curX := que.Remove(que.Front()).(<span class="type">int</span>)</span><br><span class="line">			curY := que.Remove(que.Front()).(<span class="type">int</span>)</span><br><span class="line">			<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">				nextX := curX + dir[i][<span class="number">0</span>]</span><br><span class="line">				nextY := curY + dir[i][<span class="number">1</span>]</span><br><span class="line">				<span class="keyword">if</span> nextX &lt; <span class="number">0</span> || nextY &lt; <span class="number">0</span> || nextX &gt;= n || nextY &gt;= m &#123;</span><br><span class="line">					<span class="keyword">continue</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> board[nextX][nextY] == <span class="string">&#x27;O&#x27;</span> &#123;</span><br><span class="line">					que.PushBack(nextX)</span><br><span class="line">					que.PushBack(nextY)</span><br><span class="line">					board[nextX][nextY] = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> board[i][<span class="number">0</span>] == <span class="string">&#x27;O&#x27;</span> &#123;</span><br><span class="line">			bfs(i, <span class="number">0</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> board[i][m<span class="number">-1</span>] == <span class="string">&#x27;O&#x27;</span> &#123;</span><br><span class="line">			bfs(i, m<span class="number">-1</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">		<span class="keyword">if</span> board[<span class="number">0</span>][j] == <span class="string">&#x27;O&#x27;</span> &#123;</span><br><span class="line">			bfs(<span class="number">0</span>, j)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> board[n<span class="number">-1</span>][j] == <span class="string">&#x27;O&#x27;</span> &#123;</span><br><span class="line">			bfs(n<span class="number">-1</span>, j)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> board[i][j] == <span class="string">&#x27;O&#x27;</span> &#123;</span><br><span class="line">				board[i][j] = <span class="string">&#x27;X&#x27;</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> board[i][j] == <span class="string">&#x27;A&#x27;</span> &#123;</span><br><span class="line">				board[i][j] = <span class="string">&#x27;O&#x27;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>dfs</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph-LC1020</title>
    <url>/2023/09/03/Graph-LC1020/</url>
    <content><![CDATA[<h1 id="Leetcode-1020-dfs-and-bfs"><a href="#Leetcode-1020-dfs-and-bfs" class="headerlink" title="Leetcode 1020-dfs and bfs"></a>Leetcode 1020-<code>dfs</code> and <code>bfs</code></h1><h2 id="1020-Number-of-Enclaves"><a href="#1020-Number-of-Enclaves" class="headerlink" title="1020. Number of Enclaves"></a><a href="https://leetcode.cn/problems/number-of-enclaves/">1020. Number of Enclaves</a></h2><p>You are given an <code>m x n</code> binary matrix <code>grid</code>, where <code>0</code> represents a sea cell and <code>1</code> represents a land cell.</p>
<p>A <strong>move</strong> consists of walking from one land cell to another adjacent (<strong>4-directionally</strong>) land cell or walking off the boundary of the <code>grid</code>.</p>
<p>Return <em>the number of land cells in</em> <code>grid</code> <em>for which we cannot walk off the boundary of the grid in any number of <strong>moves</strong></em>.</p>
<span id="more"></span>

<p><img src="/./../pic/Graph-LC1020/image-20230903161136120.png" alt="image-20230903161136120"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Input: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary.</span><br></pre></td></tr></table></figure>

<h2 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h2><p>Be similar with lc200,<br>dfs from a vertex tarverse all vertices until encounter the endCondition<br>bfs from a vertex traverse all vertices round by round </p>
<p>When encountering land around the boundary<br> change <code>1</code> to <code>0</code> is OK,then </p>
<h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="comment">// leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numEnclaves</span><span class="params">(grid [][]<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	n, m := <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">	dir := [<span class="number">4</span>][<span class="number">2</span>]<span class="type">int</span>&#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;</span><br><span class="line">	count := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span></span><br><span class="line">	dfs = <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		grid[x][y] = <span class="number">0</span></span><br><span class="line">		count++</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">			nX := x + dir[i][<span class="number">0</span>]</span><br><span class="line">			nY := y + dir[i][<span class="number">1</span>]</span><br><span class="line">			<span class="keyword">if</span> nX &lt; <span class="number">0</span> || nY &lt; <span class="number">0</span> || nX &gt;= n || nY &gt;= m &#123;</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> grid[nX][nY] == <span class="number">0</span> &#123;</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			dfs(nX, nY)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//from left and right traverse to middle</span></span><br><span class="line">	<span class="comment">// make the land near the boundary from 1 to 0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> grid[i][<span class="number">0</span>] == <span class="number">1</span> &#123;</span><br><span class="line">			dfs(i, <span class="number">0</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> grid[i][m<span class="number">-1</span>] == <span class="number">1</span> &#123;</span><br><span class="line">			dfs(i, m<span class="number">-1</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// from top and bottom traverse to middle</span></span><br><span class="line">	<span class="comment">// alse 1  is changed to 0</span></span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">		<span class="keyword">if</span> grid[<span class="number">0</span>][j] == <span class="number">1</span> &#123;</span><br><span class="line">			dfs(<span class="number">0</span>, j)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> grid[n<span class="number">-1</span>][j] == <span class="number">1</span> &#123;</span><br><span class="line">			dfs(n<span class="number">-1</span>, j)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// initalize result count 0</span></span><br><span class="line">	count = <span class="number">0</span></span><br><span class="line">	<span class="comment">//traverse all graph</span></span><br><span class="line">	<span class="comment">//compute and count the result</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> grid[i][j] == <span class="number">1</span> &#123;</span><br><span class="line">				dfs(i, j)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure>

<h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numEnclaves</span><span class="params">(grid [][]<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	n, m := <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">	dir := [<span class="number">4</span>][<span class="number">2</span>]<span class="type">int</span>&#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;</span><br><span class="line">	count := <span class="number">0</span></span><br><span class="line">	<span class="keyword">var</span> bfs <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span></span><br><span class="line">	bfs = <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		grid[x][y] = <span class="number">0</span></span><br><span class="line">		count++</span><br><span class="line">		que := list.New()</span><br><span class="line">		que.PushBack(x)</span><br><span class="line">		que.PushBack(y)</span><br><span class="line">		<span class="keyword">for</span> que.Len() != <span class="number">0</span> &#123;</span><br><span class="line">			curX := que.Remove(que.Front()).(<span class="type">int</span>)</span><br><span class="line">			curY := que.Remove(que.Front()).(<span class="type">int</span>)</span><br><span class="line">			<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">				nextX := curX + dir[i][<span class="number">0</span>]</span><br><span class="line">				nextY := curY + dir[i][<span class="number">1</span>]</span><br><span class="line">				<span class="keyword">if</span> nextX &lt; <span class="number">0</span> || nextY &lt; <span class="number">0</span> || nextX &gt;= n || nextY &gt;= m &#123;</span><br><span class="line">					<span class="keyword">continue</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> grid[nextX][nextY] == <span class="number">1</span> &#123;</span><br><span class="line">					que.PushBack(nextX)</span><br><span class="line">					que.PushBack(nextY)</span><br><span class="line">					count++</span><br><span class="line">					grid[nextX][nextY] = <span class="number">0</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> grid[i][<span class="number">0</span>] == <span class="number">1</span> &#123;</span><br><span class="line">			bfs(i, <span class="number">0</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> grid[i][m<span class="number">-1</span>] == <span class="number">1</span> &#123;</span><br><span class="line">			bfs(i, m<span class="number">-1</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">		<span class="keyword">if</span> grid[<span class="number">0</span>][j] == <span class="number">1</span> &#123;</span><br><span class="line">			bfs(<span class="number">0</span>, j)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> grid[n<span class="number">-1</span>][j] == <span class="number">1</span> &#123;</span><br><span class="line">			bfs(n<span class="number">-1</span>, j)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	count = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> grid[i][j] == <span class="number">1</span> &#123;</span><br><span class="line">				bfs(i, j)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>dfs</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph-LC695</title>
    <url>/2023/09/03/Graph-LC695/</url>
    <content><![CDATA[<h1 id="Leetcode-695-dfs-and-bfs"><a href="#Leetcode-695-dfs-and-bfs" class="headerlink" title="Leetcode 695-dfs and bfs"></a>Leetcode 695-<code>dfs</code> and <code>bfs</code></h1><h2 id="Max-Area-of-Island"><a href="#Max-Area-of-Island" class="headerlink" title="Max Area of Island"></a><a href="https://leetcode.cn/problems/max-area-of-island/">Max Area of Island</a></h2><p>You are given an <code>m x n</code> binary matrix <code>grid</code>. An island is a group of <code>1</code>‘s (representing land) connected <strong>4-directionally</strong> (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.</p>
<p>The <strong>area</strong> of an island is the number of cells with a value <code>1</code> in the island.</p>
<p>Return <em>the maximum <strong>area</strong> of an island in</em> <code>grid</code>. If there is no island, return <code>0</code>.</p>
 <span id="more"></span>

<p><img src="/./../pic/Graph-LC695/image-20230903105407377.png" alt="image-20230903105407377"></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">nput: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: The answer is not 11, because the island must be connected 4-directionally.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == grid.length</code></li>
<li><code>n == grid[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 50</code></li>
<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>
</ul>
<h2 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h2><h3 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="comment">// leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxAreaOfIsland</span><span class="params">(grid [][]<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	n, m := <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">	visited := <span class="built_in">make</span>([][]<span class="type">bool</span>, n)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> grid &#123;</span><br><span class="line">		visited[i] = <span class="built_in">make</span>([]<span class="type">bool</span>, m)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// four directions</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		&#123;0, 1&#125;  to right: col+1</span></span><br><span class="line"><span class="comment">		&#123;1, 0&#125; 	to down: row+1</span></span><br><span class="line"><span class="comment">		&#123;-1, 0&#125;	to up: row-1。</span></span><br><span class="line"><span class="comment">		&#123;0, -1&#125; to left: col-1</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">var</span> dir = [<span class="number">4</span>][<span class="number">2</span>]<span class="type">int</span>&#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;</span><br><span class="line">	count, ret := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">//dfs func</span></span><br><span class="line">	<span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span></span><br><span class="line">	dfs = <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		<span class="comment">//visited or ocean</span></span><br><span class="line">		<span class="keyword">if</span> visited[x][y] == <span class="literal">true</span> || grid[x][y] == <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		visited[x][y] = <span class="literal">true</span></span><br><span class="line">		count++</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">			nextX := x + dir[i][<span class="number">0</span>]</span><br><span class="line">			nextY := y + dir[i][<span class="number">1</span>]</span><br><span class="line">			<span class="keyword">if</span> nextX &lt; <span class="number">0</span> || nextX &gt;= n || nextY &lt; <span class="number">0</span> || nextY &gt;= m &#123;</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			dfs(nextX, nextY)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> visited[i][j] == <span class="literal">false</span> &amp;&amp; grid[i][j] == <span class="number">1</span> &#123;</span><br><span class="line">				count = <span class="number">0</span></span><br><span class="line">				dfs(i, j)</span><br><span class="line">				ret = max(ret, count)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;<span class="keyword">if</span> a &gt; b &#123;<span class="keyword">return</span> a&#125;;<span class="keyword">return</span> b&#125;</span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure>

<h3 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxAreaOfIsland</span><span class="params">(grid [][]<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	n, m := <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">	visited := <span class="built_in">make</span>([][]<span class="type">bool</span>, n)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> grid &#123;</span><br><span class="line">		visited[i] = <span class="built_in">make</span>([]<span class="type">bool</span>, m)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> dir = [<span class="number">4</span>][<span class="number">2</span>]<span class="type">int</span>&#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;</span><br><span class="line">	count, ret := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> bfs <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span></span><br><span class="line">	bfs = <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		que := list.New()</span><br><span class="line">		<span class="comment">//que.PushBack([2]int&#123;x, y&#125;)</span></span><br><span class="line">		que.PushBack(x)</span><br><span class="line">		que.PushBack(y)</span><br><span class="line">		visited[x][y] = <span class="literal">true</span></span><br><span class="line">		count++</span><br><span class="line">		<span class="keyword">for</span> que.Len() != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="comment">//cur := que.Remove(que.Front()).([2]int)</span></span><br><span class="line">			<span class="comment">//curx, cury := cur[0], cur[1]</span></span><br><span class="line">			curx := que.Remove(que.Front()).(<span class="type">int</span>)</span><br><span class="line">			cury := que.Remove(que.Front()).(<span class="type">int</span>)</span><br><span class="line">			<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">				nextX := curx + dir[i][<span class="number">0</span>]</span><br><span class="line">				nextY := cury + dir[i][<span class="number">1</span>]</span><br><span class="line">				<span class="keyword">if</span> nextX &lt; <span class="number">0</span> || nextX &gt;= n || nextY &lt; <span class="number">0</span> || nextY &gt;= m &#123;</span><br><span class="line">					<span class="keyword">continue</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> visited[nextX][nextY] == <span class="literal">false</span> &amp;&amp; grid[nextX][nextY] == <span class="number">1</span> &#123;</span><br><span class="line">					count++</span><br><span class="line">                    <span class="comment">//que.PushBack([2]int&#123;nextX, nextY&#125;)</span></span><br><span class="line">					que.PushBack(nextX)</span><br><span class="line">					que.PushBack(nextY)</span><br><span class="line">					visited[nextX][nextY] = <span class="literal">true</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> visited[i][j] == <span class="literal">false</span> &amp;&amp; grid[i][j] == <span class="number">1</span> &#123;</span><br><span class="line">				count = <span class="number">0</span></span><br><span class="line">				bfs(i, j)</span><br><span class="line">				ret = max(ret, count)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>dfs</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>9.3leetcode1921</title>
    <url>/2023/09/03/leetcode9-3-1921/</url>
    <content><![CDATA[<h1 id="LeetCode1921-Eliminate-Max-nums-of-Monsters"><a href="#LeetCode1921-Eliminate-Max-nums-of-Monsters" class="headerlink" title="LeetCode1921-Eliminate Max nums of Monsters"></a>LeetCode1921-Eliminate Max nums of Monsters</h1><p>You are playing a video game<br>where you are defending your city from a group of <code>n</code> monsters.<br> You are given a <strong>0-indexed</strong> integer array <code>dist</code> of size <code>n</code>,<br>where <code>dist[i]</code> is the <strong>initial distance</strong> in kilometers of the <code>ith</code> monster from the city.</p>
<p>The monsters walk toward the city at a <strong>constant</strong> speed.<br>The speed of each monster is given to you in an integer array <code>speed</code> of size <code>n</code>,<br>where <code>speed[i]</code> is the speed of the <code>ith</code> monster in kilometers per minute.</p>
<p>You have a weapon that, can kill a <strong>single</strong> monster.<br>However, the weapon takes <strong>one minute</strong> to charge.<br>The weapon is fully charged at the very start.</p>
<p>You lose when any monster reaches your city.<br>If a monster reaches the city at the exact moment the weapon is fully charged,<br>it counts as a <strong>loss</strong>,<br>and the game ends before you can use your weapon.</p>
<p>Return the <strong>maximum</strong> number of monsters<br>that you can kill before you lose,<br><em>or</em> <code>n</code> if you can kill all the monsters before they reach the city.</p>
<span id="more"></span>

<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: dist = [1,3,4], speed = [1,1,1]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line">In the beginning, the distances of the monsters are [1,3,4]. You eliminate the first monster.</span><br><span class="line">After a minute, the distances of the monsters are [X,2,3]. You eliminate the second monster.</span><br><span class="line">After a minute, the distances of the monsters are [X,X,2]. You eliminate the thrid monster.</span><br><span class="line">All 3 monsters can be eliminated.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: dist = [1,1,2,3], speed = [1,1,1,1]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation:</span><br><span class="line">In the beginning, the distances of the monsters are [1,1,2,3]. You eliminate the first monster.</span><br><span class="line">After a minute, the distances of the monsters are [X,0,1,2], so you lose.</span><br><span class="line">You can only eliminate 1 monster.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: dist = [3,2,4], speed = [5,3,2]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation:</span><br><span class="line">In the beginning, the distances of the monsters are [3,2,4]. You eliminate the first monster.</span><br><span class="line">After a minute, the distances of the monsters are [X,0,2], so you lose.</span><br><span class="line">You can only eliminate 1 monster. </span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == dist.length == speed.length</code></li>
<li><code>1 &lt;= n &lt;= 105</code></li>
<li><code>1 &lt;= dist[i], speed[i] &lt;= 105</code></li>
</ul>
<h2 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h2><p>greedy algorithm</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;sort&quot;</span></span><br><span class="line"><span class="comment">// leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">eliminateMaximum</span><span class="params">(dist []<span class="type">int</span>, speed []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	n:=<span class="built_in">len</span>(dist)</span><br><span class="line">	comeTime := <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> dist[i]%speed[i]==<span class="number">0</span>&#123;</span><br><span class="line">			comeTime[i]=dist[i]/speed[i]</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			comeTime[i]=dist[i]/speed[i]+<span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sort.Ints(comeTime)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> comeTime[i]&gt;=i+<span class="number">1</span>&#123;</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> i</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph-LC200</title>
    <url>/2023/09/02/Graph-LC200/</url>
    <content><![CDATA[<h1 id="Leetcode-200-dfs-and-bfs"><a href="#Leetcode-200-dfs-and-bfs" class="headerlink" title="Leetcode 200-dfs and bfs"></a>Leetcode 200-<code>dfs</code> and <code>bfs</code></h1><h2 id="Number-of-Islands"><a href="#Number-of-Islands" class="headerlink" title="Number of Islands"></a><a href="https://leetcode.cn/problems/number-of-islands/">Number of Islands</a></h2><p>Given an <code>m x n</code> 2D binary <code>grid</code> which represents a map of <code>1</code> (land) and <code>0</code> (water), return <em>the number of islands</em>.</p>
<p>An <strong>island</strong> is surrounded by water and is formed by connecting adjacent(邻近的) lands horizontally(水平) or vertically(垂直). You may assume all four edges of the grid are all surrounded by water.</p>
 <span id="more"></span>

<p><strong>Example 1:</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">Input: grid = [</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]</span><br><span class="line">]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">Input: grid = [</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]</span><br><span class="line">]</span><br><span class="line">Output: 3 </span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == grid.length</code></li>
<li><code>n == grid[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 300</code></li>
<li><code>grid[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>
</ul>
<h2 id="resolution"><a href="#resolution" class="headerlink" title="resolution"></a>resolution</h2><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 200  2023-09-02 20:21:35</span></span><br><span class="line"><span class="comment">// leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numIslands</span><span class="params">(grid [][]<span class="type">byte</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	n, m := <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">	visited := <span class="built_in">make</span>([][]<span class="type">bool</span>, n)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> visited &#123;</span><br><span class="line">		visited[i] = <span class="built_in">make</span>([]<span class="type">bool</span>, m)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// four directions</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		&#123;0, 1&#125;  to right: col+1</span></span><br><span class="line"><span class="comment">		&#123;1, 0&#125; 	to down: row+1</span></span><br><span class="line"><span class="comment">		&#123;-1, 0&#125;	to up: row-1</span></span><br><span class="line"><span class="comment">		&#123;0, -1&#125; to left: col-1</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">var</span> dir = [<span class="number">4</span>][<span class="number">2</span>]<span class="type">int</span>&#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//dfs function</span></span><br><span class="line">	<span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span></span><br><span class="line">	dfs = <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		<span class="comment">// has been visited or the point is ocean</span></span><br><span class="line">		<span class="keyword">if</span> visited[x][y]==<span class="literal">true</span> || grid[x][y] == <span class="string">&#x27;0&#x27;</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// has been visited</span></span><br><span class="line">		visited[x][y] = <span class="literal">true</span></span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">			<span class="comment">//right down up left</span></span><br><span class="line">			nextX := x + dir[i][<span class="number">0</span>]</span><br><span class="line">			nextY := y + dir[i][<span class="number">1</span>]</span><br><span class="line">			<span class="keyword">if</span> nextX &lt; <span class="number">0</span> || nextX &gt;= n || nextY &lt; <span class="number">0</span> || nextY &gt;= m &#123;</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			dfs(nextX, nextY)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ret := <span class="number">0</span></span><br><span class="line">	<span class="comment">// traverse the grip</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">			<span class="comment">//this point is not visited and is land</span></span><br><span class="line">			<span class="keyword">if</span> visited[i][j]==<span class="literal">false</span> &amp;&amp; grid[i][j] == <span class="string">&#x27;1&#x27;</span> &#123;</span><br><span class="line">				ret++</span><br><span class="line">				<span class="comment">//from this point tarvers all linked land</span></span><br><span class="line">				dfs(i, j)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure>

<h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><p>ues queue</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;container/list&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 200  2023-09-02 20:21:35</span></span><br><span class="line"><span class="comment">// leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numIslands</span><span class="params">(grid [][]<span class="type">byte</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	n, m := <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">	visited := <span class="built_in">make</span>([][]<span class="type">bool</span>, n)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> visited &#123;</span><br><span class="line">		visited[i] = <span class="built_in">make</span>([]<span class="type">bool</span>, m)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> dir = [<span class="number">4</span>][<span class="number">2</span>]<span class="type">int</span>&#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> bfs <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span></span><br><span class="line">	bfs = <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		que := list.New()</span><br><span class="line">		que.PushBack([<span class="number">2</span>]<span class="type">int</span>&#123;x, y&#125;)</span><br><span class="line">		visited[x][y] = <span class="literal">true</span></span><br><span class="line">		<span class="keyword">for</span> que.Len() != <span class="number">0</span> &#123;</span><br><span class="line">			cur := que.Remove(que.Front()).([<span class="number">2</span>]<span class="type">int</span>)</span><br><span class="line">			curx, cury := cur[<span class="number">0</span>], cur[<span class="number">1</span>]</span><br><span class="line">			<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">				nextX := curx + dir[i][<span class="number">0</span>]</span><br><span class="line">				nextY := cury + dir[i][<span class="number">1</span>]</span><br><span class="line">				<span class="keyword">if</span> nextX &lt; <span class="number">0</span> || nextX &gt;= n || nextY &lt; <span class="number">0</span> || nextY &gt;= m &#123;</span><br><span class="line">					<span class="keyword">continue</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> visited[nextX][nextY] == <span class="literal">false</span> &amp;&amp; grid[nextX][nextY] == <span class="string">&#x27;1&#x27;</span> &#123;</span><br><span class="line">					que.PushBack([<span class="number">2</span>]<span class="type">int</span>&#123;nextX, nextY&#125;)</span><br><span class="line">					visited[nextX][nextY] = <span class="literal">true</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ret := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; m; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> visited[i][j] == <span class="literal">false</span> &amp;&amp; grid[i][j] == <span class="string">&#x27;1&#x27;</span> &#123;</span><br><span class="line">				ret++</span><br><span class="line">				bfs(i, j)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>dfs</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph-bfs</title>
    <url>/2023/09/02/Graph-bfs/</url>
    <content><![CDATA[<h1 id="BreadthFirstSearch"><a href="#BreadthFirstSearch" class="headerlink" title="BreadthFirstSearch"></a>BreadthFirstSearch</h1><h2 id="Quote-and-translate-from-Code-Caprice"><a href="#Quote-and-translate-from-Code-Caprice" class="headerlink" title="Quote and translate from  Code Caprice"></a>Quote and translate from  <em><strong><a href="https://programmercarl.com/">Code Caprice</a></strong></em></h2><p>BFS is always used to solve the shortest path problem between two vertices.<br>BFS starts from the starting vertex, the starting vertexis the center of the circle of search,<br>once the end point is encountered, the record of the previous node is the shortest road.</p>
<span id="more"></span>

<h2 id="The-process-of-BFS"><a href="#The-process-of-BFS" class="headerlink" title="The process of BFS"></a>The process of BFS</h2><p>BFS is a round-by-circle search process<br>using a square map,each direction of search is <code>up/down/right/left</code><br>then a start location is given,so BFS can take a step to the four directions</p>
<p><img src="/./../pic/Graph-bfs/image-20230902144715129.png" alt="image-20230902144715129"></p>
<p>Now set an <code>end</code> location,the process of <code>BFS</code> is following<br>From the start vertex,search circle by circle and inside out<br>the first step is the vertex holding <code>1</code><br>the second step is the vertex holding <code>2</code><br>when stepNum is <code>4</code>,has found the <code>end</code></p>
<p><img src="/./../pic/Graph-bfs/image-20230902144812331.png" alt="image-20230902144812331"></p>
<p>The way BFS traverses round by circle,<br>so once it encounters the <code>end</code> point, it must be the shortest path.<br>And the map can also have obstacles, as shown in the image:</p>
<p><img src="/./../pic/Graph-bfs/image-20230902150649652.png" alt="image-20230902150649652"></p>
<p>In the <code>5th</code> step, the <code>6th</code> step only dyed the key nodes<br>and the other directions did not dye<br>only needs to pay attention to the logic of dyeing in key places<br>As we can see from the pic, if obstacles are added,<br>the <code>6th</code> step to reach the end </p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>Based on LinkedList</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bfs</span><span class="params">(grid [][]<span class="type">byte</span>, visited [][]<span class="type">bool</span>, x <span class="type">int</span>, y <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// grid --&gt;map</span></span><br><span class="line">    <span class="comment">// vistied --&gt; value has been traverse</span></span><br><span class="line">    <span class="comment">// x,y --&gt; the start SearchNode&#x27;s index </span></span><br><span class="line">    <span class="comment">// Representing four directions (up left down right)</span></span><br><span class="line">	dir := [<span class="number">4</span>][<span class="number">2</span>]<span class="type">int</span>&#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">	queue := <span class="built_in">make</span>([][<span class="number">2</span>]<span class="type">int</span>, <span class="number">0</span>)          <span class="comment">// Define a queue</span></span><br><span class="line">	queue = <span class="built_in">append</span>(queue, [<span class="number">2</span>]<span class="type">int</span>&#123;x, y&#125;) <span class="comment">// Add the starting node to the queue</span></span><br><span class="line">	visited[x][y] = <span class="literal">true</span>                <span class="comment">// Mark the starting visitednode</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Start traversing elements in the queue</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span> &#123; </span><br><span class="line">		cur := queue[<span class="number">0</span>]</span><br><span class="line">		queue = queue[<span class="number">1</span>:]            <span class="comment">// get an element from the queue</span></span><br><span class="line">		curx, cury := cur[<span class="number">0</span>], cur[<span class="number">1</span>] <span class="comment">// Current node coordinates</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment">// Start traversing in four directions - left, right, up, and down</span></span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123; </span><br><span class="line">            <span class="comment">// Get coordinates of the adjacent nodes</span></span><br><span class="line">			nextx := curx + dir[i][<span class="number">0</span>]</span><br><span class="line">			nexty := cury + dir[i][<span class="number">1</span>] </span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Skip if the coordinate indexs are out of bounds</span></span><br><span class="line">			<span class="keyword">if</span> nextx &lt; <span class="number">0</span> || nextx &gt;= <span class="built_in">len</span>(grid) || nexty &lt; <span class="number">0</span> || nexty &gt;= <span class="built_in">len</span>(grid[<span class="number">0</span>]) &#123;</span><br><span class="line">				<span class="keyword">continue</span> </span><br><span class="line">			&#125;</span><br><span class="line">            </span><br><span class="line">			<span class="comment">// If the node hasn&#x27;t been visited</span></span><br><span class="line">			<span class="keyword">if</span> !visited[nextx][nexty] &#123; </span><br><span class="line">                <span class="comment">// Add the node to the queue for the next round of traversal</span></span><br><span class="line">				queue = <span class="built_in">append</span>(queue, [<span class="number">2</span>]<span class="type">int</span>&#123;nextx, nexty&#125;) </span><br><span class="line">                <span class="comment">// Mark it as visited immediately to avoid duplicates</span></span><br><span class="line">				visited[nextx][nexty] = <span class="literal">true</span>                </span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>GraphDfs-LC797</title>
    <url>/2023/09/02/GraphDfs-LC797/</url>
    <content><![CDATA[<h1 id="Leetcode-797"><a href="#Leetcode-797" class="headerlink" title="Leetcode-797"></a>Leetcode-797</h1><p>Given a directed acyclic graph (DAG) of <strong>n</strong> nodes labeled from <strong>0</strong> to <strong>n - 1</strong>,<br>find all possible paths from node <strong>0</strong> to node <strong>n - 1</strong> and return them in <strong>any order</strong>.<br>The graph is given as follows: <code>graph[i]</code> is a list of all nodes you can visit from node <code>i</code><br>(i.e., there is a directed edge from node <code>i</code> to node <code>graph[i][j]</code>).</p>
<span id="more"></span>

<p><strong>Example 1</strong></p>
<p><img src="/./../pic/GraphDfs-LC797/image-20230902111802810.png" alt="image-20230902111802810"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: graph = [[1,2],[3],[3],[]]</span><br><span class="line">Output: [[0,1,3],[0,2,3]]</span><br><span class="line">Explanation: There are two paths: 0 -&gt; 1 -&gt; 3 and 0 -&gt; 2 -&gt; 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2</strong></p>
<p><img src="/./../pic/GraphDfs-LC797/image-20230902112111869.png" alt="image-20230902112111869"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]</span><br><span class="line">Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]</span><br></pre></td></tr></table></figure>



<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == graph.length</code></li>
<li><code>2 &lt;= n &lt;= 15</code></li>
<li><code>0 &lt;= graph[i][j] &lt; n</code></li>
<li><code>graph[i][j] != i</code> (i.e., there will be no self-loops).</li>
<li>All the elements of <code>graph[i]</code> are <strong>unique</strong>.</li>
<li>The input graph is <strong>guaranteed</strong> to be a <strong>DAG</strong>.</li>
</ul>
<p><strong>Resolution</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 797  2023-09-02 11:15:28</span></span><br><span class="line"><span class="comment">// leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">allPathsSourceTarget</span><span class="params">(graph [][]<span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> ret [][]<span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> path []<span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span></span><br><span class="line">	dfs = <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> x == <span class="built_in">len</span>(graph)<span class="number">-1</span> &#123;</span><br><span class="line">			<span class="comment">// get a path</span></span><br><span class="line">			tmp := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(path))</span><br><span class="line">			<span class="built_in">copy</span>(tmp, path)</span><br><span class="line">			ret = <span class="built_in">append</span>(ret, tmp)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//find the nodeX link all nodes</span></span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(graph[x]); i++ &#123;</span><br><span class="line">			<span class="comment">// add to path</span></span><br><span class="line">			path = <span class="built_in">append</span>(path, graph[x][i])</span><br><span class="line">			dfs(graph[x][i])</span><br><span class="line">			<span class="comment">// traverse</span></span><br><span class="line">			path = path[:<span class="built_in">len</span>(path)<span class="number">-1</span>]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	path = <span class="built_in">append</span>(path, <span class="number">0</span>)</span><br><span class="line">	dfs(<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph-dfs</title>
    <url>/2023/09/02/Graph-dfs/</url>
    <content><![CDATA[<h1 id="DepthFirstSearch"><a href="#DepthFirstSearch" class="headerlink" title="DepthFirstSearch"></a>DepthFirstSearch</h1><h2 id="Quote-and-translate-from-Code-Caprice"><a href="#Quote-and-translate-from-Code-Caprice" class="headerlink" title="Quote and translate from  Code Caprice"></a>Quote and translate from  <em><strong><a href="https://programmercarl.com/">Code Caprice</a></strong></em></h2><p><strong>A</strong> undirected graph that we want to search all pths form <code>vertex1</code> to <code>vertex6</code></p>
<p><img src="/./../pic/Graph-dfs/image01.png" alt="image-20230902105209987"></p>
<span id="more"></span>

<p><strong>T</strong>hen the first path of DFS search looks like this:<br>Assuming that the first time you extend the default direction, you find <code>vertex6</code></p>
<p><img src="/./../pic/Graph-dfs/image-20230902105329872.png" alt="image-20230902105329872"></p>
<p><strong>A</strong>t this time, we found <code>vertex6</code>, then we should search for other directions<br>so <code>Path2</code> reversed, changed direction, took <code>path3</code><br>and then also found the end <code>vertex6</code>. Then reversing <code>path2</code> and<br> changing it to <code>path3</code> is  the process of backtracking in DFS </p>
<p><img src="/./../pic/Graph-dfs/image-20230902105518919.png" alt="image-20230902105518919"></p>
<p><strong>F</strong>ind a path from <code>vertex1</code> to <code>vertex</code>6,<br>and then to the direction, and then turned back,<br> <code>path4</code> was withdrawn (the process of backtracking) and changed to <code>path5</code>.</p>
<p><img src="/./../pic/Graph-dfs/image-20230902110148371.png" alt="image-20230902110148371"></p>
<p><strong>F</strong>ind a path from <code>vertex1</code> to <code>vertex6</code>,<br>and then to the direction, at this time turned back,<br><code>path6</code> was undone (the process of backtracking),<br>changed to <code>path7</code>, <code>path8</code> and <code>path7</code>, <code>path9</code>,<br>and found that there was a dead end, all of which came to the node they walked.</p>
<p><img src="/./../pic/Graph-dfs/image-20230902110506611.png" alt="image-20230902110506611"></p>
<p><strong>T</strong>hen the path connected by <code>vertex2</code> and the path linked by <code>vertex3</code> have passed,<br>and the undo path can only be reversed upwards to choose to cancel the original choice of <code>vertex4</code>,<br>that is, cancel <code>path5</code> and change it to <code>path10</code></p>
<p><img src="/./../pic/Graph-dfs/image-20230902110709419.png" alt="image-20230902110709419"></p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph-Search</title>
    <url>/2023/09/02/Graph03-Traverse/</url>
    <content><![CDATA[<h1 id="Search-Graph"><a href="#Search-Graph" class="headerlink" title="Search  Graph"></a>Search  Graph</h1><p>To traverse a graph ,we always hold <code>DepthFirstSearch(dfs)</code>and <code>BreadthFirstSearch(bfs)</code></p>
<p><code>dfs</code>: Search in one direction, until can not search, and then change direction<br>        the process of changing direction involves backtracking</p>
<p><code>bfs</code>: Traverse all  vertices connected by this vertex,<br>         and when you go to the next vertex then traverse all the vertices connected to the vertex,<br>         and the search direction is more like a breadth, a search process in all directions.</p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>dfs</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>9.2leetcode2511</title>
    <url>/2023/09/02/leetcode9-2/</url>
    <content><![CDATA[<p>You are given a <strong>0-indexed</strong> integer array <code>forts</code> of length <code>n</code> representing the positions of several forts. <code>forts[i]</code> can be <code>-1</code>, <code>0</code>, or <code>1</code> where:</p>
<ul>
<li><code>-1</code> represents there is <strong>no fort</strong> at the <code>ith</code> position.</li>
<li><code>0</code> indicates there is an <strong>enemy</strong> fort at the <code>ith</code> position.</li>
<li><code>1</code> indicates the fort at the <code>ith</code> the position is under your command.</li>
</ul>
<p>Now you have decided to move your army from one of your forts at position <code>i</code> to an empty position <code>j</code> such that:</p>
<ul>
<li><code>0 &lt;= i, j &lt;= n - 1</code></li>
<li>The army travels over enemy forts <strong>only</strong>. Formally, for all <code>k</code> where <code>min(i,j) &lt; k &lt; max(i,j)</code>, <code>forts[k] == 0.</code></li>
</ul>
<p>While moving the army, all the enemy forts that come in the way are <strong>captured</strong>.</p>
<p>Return <em>the <strong>maximum</strong> number of enemy forts that can be captured</em>. In case it is <strong>impossible</strong> to move your army, or you do not have any fort under your command, return <code>0</code><em>.</em></p>
<span id="more"></span>

<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: forts = [1,0,0,-1,0,0,0,0,1]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation:</span><br><span class="line">- Moving the army from position 0 to position 3 captures 2 enemy forts, at 1 and 2.</span><br><span class="line">- Moving the army from position 8 to position 3 captures 4 enemy forts.</span><br><span class="line">Since 4 is the maximum number of enemy forts that can be captured, we return 4.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: forts = [0,0,1,-1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: Since no enemy fort can be captured, 0 is returned.</span><br></pre></td></tr></table></figure>





<p>给你一个长度为 <code>n</code> ，下标从 <strong>0</strong> 开始的整数数组 <code>forts</code> ，表示一些城堡。<code>forts[i]</code> 可以是 <code>-1</code> ，<code>0</code> 或者 <code>1</code> ，其中：</p>
<ul>
<li><code>-1</code> 表示第 <code>i</code> 个位置 <strong>没有</strong> 城堡。</li>
<li><code>0</code> 表示第 <code>i</code> 个位置有一个 <strong>敌人</strong> 的城堡。</li>
<li><code>1</code> 表示第 <code>i</code> 个位置有一个你控制的城堡。</li>
</ul>
<p>现在，你需要决定，将你的军队从某个你控制的城堡位置 <code>i</code> 移动到一个空的位置 <code>j</code> ，满足：</p>
<ul>
<li><code>0 &lt;= i, j &lt;= n - 1</code></li>
<li>军队经过的位置 <strong>只有</strong> 敌人的城堡。正式的，对于所有 <code>min(i,j) &lt; k &lt; max(i,j)</code> 的 <code>k</code> ，都满足 <code>forts[k] == 0</code> 。</li>
</ul>
<p>当军队移动时，所有途中经过的敌人城堡都会被 <strong>摧毁</strong> 。</p>
<p><strong>Resolution</strong></p>
<p>计算-1和1之间全是0情况下最大的0的数量</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;math&quot;</span></span><br><span class="line"><span class="comment">// 2511  2023-09-02 00:02:31</span></span><br><span class="line"><span class="comment">// leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">captureForts</span><span class="params">(forts []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	pre := math.MinInt <span class="comment">//pre non-0 element</span></span><br><span class="line">	ret := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> idx, val := <span class="keyword">range</span> forts &#123;</span><br><span class="line">		<span class="keyword">if</span> val != <span class="number">0</span> &#123;</span><br><span class="line">			<span class="comment">//The subscript of the current non-0 element is idx, </span></span><br><span class="line">			<span class="comment">//and the subscript of the previous non-0 element is pre</span></span><br><span class="line">			<span class="comment">//forts[i] != forts[pre] means one is -1 and another is 1</span></span><br><span class="line">			<span class="keyword">if</span> pre &gt;= <span class="number">0</span> &amp;&amp; forts[idx] != forts[pre] &#123;</span><br><span class="line">				ret = max(ret, idx-pre<span class="number">-1</span>)</span><br><span class="line">			&#125;</span><br><span class="line">			pre = idx</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;<span class="keyword">if</span> b &gt; a &#123;<span class="keyword">return</span> b&#125;;<span class="keyword">return</span> a&#125;</span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Traverse</tag>
      </tags>
  </entry>
  <entry>
    <title>0X10Plan</title>
    <url>/2023/09/02/0X10Plan/</url>
    <content><![CDATA[<p>💮Learn Graph algorithm<br>💮Gin and Gorm<br>💮OS two chapters<br>💮Golang related books<br>💮Running more than three days<br>💮Leetcode one easy of middle problem per day<br>💮Daily learning outcomes are clocked into the Markdown document</p>
]]></content>
      <categories>
        <category>Planing</category>
      </categories>
      <tags>
        <tag>Planing</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph-The basic operation of Graph</title>
    <url>/2023/09/01/Graph02/</url>
    <content><![CDATA[<h1 id="The-basic-operation-of-Graph"><a href="#The-basic-operation-of-Graph" class="headerlink" title="The basic operation of Graph"></a>The basic operation of Graph</h1><p>This Blog   use <strong>adjacency matrices</strong> and <strong>adjacency list</strong> to implement <strong>Graph</strong> in <code>Golang</code></p>
<span id="more"></span>

<h2 id="Adjacency-matrices"><a href="#Adjacency-matrices" class="headerlink" title="Adjacency matrices"></a><strong>Adjacency matrices</strong></h2><p>vertices <code>n</code>  non-direction Graph</p>
<ul>
<li><strong>Add&#x2F;Remove Edges</strong>：indirectly  revise dege in <strong>adjacency matrices</strong> ，<code>O(1)</code> time-complexity</li>
<li><strong>Add Vertex</strong>：Add a row and column at the end of the adjacency matrix and fill in all <code>0</code>, using the <code>O(n)</code> time-complexity.</li>
<li><strong>Remove Vertex</strong>：Delete a row and a column in the adjacency matrix. When the worst-case scenario is reached when the first row and column are removed, <code>(n-1)^2</code> elements need to be “moved up left” to use the <code>O(n^2)</code>time.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// adjacency matrices implement Non-direcionGraph</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// graphArray</span></span><br><span class="line"><span class="keyword">type</span> graphArray <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">//verticesList</span></span><br><span class="line">	vertices []<span class="type">int</span></span><br><span class="line">	<span class="comment">//matrices</span></span><br><span class="line">	adjMat [][]<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// newGraphArray Function of construction</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newGraphArray</span><span class="params">(vertices []<span class="type">int</span>, edges [][]<span class="type">int</span>)</span></span> *graphArray &#123;</span><br><span class="line">	<span class="comment">// construct matrices</span></span><br><span class="line">	n := <span class="built_in">len</span>(vertices)</span><br><span class="line">	adjMat := <span class="built_in">make</span>([][]<span class="type">int</span>, n)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> adjMat &#123;</span><br><span class="line">		adjMat[i] = <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// initialize the graph</span></span><br><span class="line">	g := &amp;graphArray&#123;</span><br><span class="line">		vertices: vertices,</span><br><span class="line">		adjMat:   adjMat,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// add edges</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> edges &#123;</span><br><span class="line">		g.addEdge(edges[i][<span class="number">0</span>], edges[i][<span class="number">1</span>])</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> g</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// size Nums of vertices</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *graphArray)</span></span> size() <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">len</span>(g.vertices)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// addVertex Add a vertex</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *graphArray)</span></span> addVertex(val <span class="type">int</span>) &#123;</span><br><span class="line">	n := g.size()</span><br><span class="line">	<span class="comment">//append the new val to vertices list</span></span><br><span class="line">	g.vertices = <span class="built_in">append</span>(g.vertices, val)</span><br><span class="line">	<span class="comment">//add a new row</span></span><br><span class="line">	newRow := <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">	g.adjMat = <span class="built_in">append</span>(g.adjMat, newRow)</span><br><span class="line">	<span class="comment">//add a new col</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> g.adjMat &#123;</span><br><span class="line">		g.adjMat[i] = <span class="built_in">append</span>(g.adjMat[i], <span class="number">0</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// removeVertex Remove a vertex following its idx</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *graphArray)</span></span> removeVertex(idx <span class="type">int</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> idx &gt;= g.size() &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;index not exist,remove failed&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// remove vertex</span></span><br><span class="line">	g.vertices = <span class="built_in">append</span>(g.vertices[:idx], g.vertices[idx+<span class="number">1</span>:]...)</span><br><span class="line">	<span class="comment">// remove row</span></span><br><span class="line">	g.adjMat = <span class="built_in">append</span>(g.adjMat[:idx], g.adjMat[idx+<span class="number">1</span>:]...)</span><br><span class="line">	<span class="comment">// remove col</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> g.adjMat &#123;</span><br><span class="line">		g.adjMat[i] = <span class="built_in">append</span>(g.adjMat[i][:idx], g.adjMat[i][idx+<span class="number">1</span>:]...)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// addEdge Add a new edge</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *graphArray)</span></span> addEdge(i, j <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="comment">// idx is not right: i==j</span></span><br><span class="line">	<span class="keyword">if</span> i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= g.size() || j &gt;= g.size() || i == j &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;The index is out of bounds or two edges is coincident&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	g.adjMat[i][j] = <span class="number">1</span></span><br><span class="line">	g.adjMat[j][i] = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// removeEdge Remove a edge</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *graphArray)</span></span> removeEdge(i, j <span class="type">int</span>) &#123;</span><br><span class="line">	<span class="comment">// idx is not right: i==j</span></span><br><span class="line">	<span class="keyword">if</span> i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= g.size() || j &gt;= g.size() || i == j &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;The index is out of bounds or two edges is coincident&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	g.adjMat[i][j] = <span class="number">0</span></span><br><span class="line">	g.adjMat[j][i] = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// print </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *graphArray)</span></span> <span class="built_in">print</span>() &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;\t顶点列表%v\n&quot;</span>, g.vertices)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;\t矩阵\n&quot;</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> g.adjMat &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;\t\t%v\n&quot;</span>, g.adjMat[i])</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// construct vertices list and edges</span></span><br><span class="line">	vertices := []<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	edges := [][]<span class="type">int</span>&#123;</span><br><span class="line">		&#123;<span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">		&#123;<span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">		&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">		&#123;<span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// construct graph</span></span><br><span class="line">	g := newGraphArray(vertices, edges)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// print init edge</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;初始图：&quot;</span>)</span><br><span class="line">	g.<span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// add new vertex and edge</span></span><br><span class="line">	g.addVertex(<span class="number">4</span>)</span><br><span class="line">	g.addEdge(<span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// print the new graph</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;\n更新后的图：&quot;</span>)</span><br><span class="line">	g.<span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// remove vertex and edge</span></span><br><span class="line">	g.removeVertex(<span class="number">2</span>)</span><br><span class="line">	<span class="comment">//g.removeEdge(0, 1)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// print </span></span><br><span class="line">	fmt.Println(<span class="string">&quot;\n最终图：&quot;</span>)</span><br><span class="line">	g.<span class="built_in">print</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go run main.go</span></span><br><span class="line"></span><br><span class="line">初始图：</span><br><span class="line">        顶点列表[0 1 2 3]</span><br><span class="line">        矩阵</span><br><span class="line">                [0 1 1 0]</span><br><span class="line">                [1 0 1 0]</span><br><span class="line">                [1 1 0 1]</span><br><span class="line">                [0 0 1 0]</span><br><span class="line"></span><br><span class="line">更新后的图：</span><br><span class="line">        顶点列表[0 1 2 3 4]</span><br><span class="line">        矩阵</span><br><span class="line">                [0 1 1 0 0]</span><br><span class="line">                [1 0 1 0 1]</span><br><span class="line">                [1 1 0 1 0]</span><br><span class="line">                [0 0 1 0 0]</span><br><span class="line">                [0 1 0 0 0]</span><br><span class="line"></span><br><span class="line">最终图：</span><br><span class="line">        顶点列表[0 1 3 4]</span><br><span class="line">        矩阵</span><br><span class="line">                [0 1 0 0]</span><br><span class="line">                [1 0 0 1]</span><br><span class="line">                [0 0 0 0]</span><br><span class="line">                [0 1 0 0]</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="Adjacency-list"><a href="#Adjacency-list" class="headerlink" title="Adjacency list"></a>Adjacency list</h2><p>non-direction verticesNums are <code>n</code>、edgeNums are <code>m</code> </p>
<ul>
<li><strong>Add edge</strong>：add an edge to the end of the linked list of vertices,Because non-direction graph,<br>needing to add edges in both directions at the same time.</li>
<li><strong>Remove edge</strong>：Find and delete the specified edge in the vertex  linked list<br> In an non-direction graph, you need to delete edges in both directions at the same time.</li>
<li><strong>Add vertex</strong>：Add a linked list to the adjacency list and add the new vertex as the linked list head node,</li>
<li><strong>Remove vertex</strong>：Traverse the entire adjacency list, remove all edges containing the specified vertices</li>
<li><strong>Initialize</strong>：Create <code>m </code>vertices and <code>2m </code>edges  in the adjacency list</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	Val <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// graphAdjList Based on adjacency list implement non-direction graph</span></span><br><span class="line"><span class="keyword">type</span> graphAdjList <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// AdjList:key:Vertex，value：All adjacency vertices for that vertex</span></span><br><span class="line">    <span class="comment">//map key:Vertex value:[]Vertex</span></span><br><span class="line">	adjList <span class="keyword">map</span>[Vertex][]Vertex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// newGraphAdjList Construct</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newGraphAdjList</span><span class="params">(edges [][]Vertex)</span></span> *graphAdjList &#123;</span><br><span class="line">	g := &amp;graphAdjList&#123;</span><br><span class="line">		adjList: <span class="built_in">make</span>(<span class="keyword">map</span>[Vertex][]Vertex),</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// add all vertices and edges</span></span><br><span class="line">	<span class="keyword">for</span> _, edge := <span class="keyword">range</span> edges &#123;</span><br><span class="line">		g.addVertex(edge[<span class="number">0</span>])</span><br><span class="line">		g.addVertex(edge[<span class="number">1</span>])</span><br><span class="line">		g.addEdge(edge[<span class="number">0</span>], edge[<span class="number">1</span>])</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> g</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// size Get the nums of vertices</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *graphAdjList)</span></span> size() <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">len</span>(g.adjList)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// addEdge Add a new edge</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *graphAdjList)</span></span> addEdge(vet1 Vertex, vet2 Vertex) &#123;</span><br><span class="line">	_, ok1 := g.adjList[vet1]</span><br><span class="line">	_, ok2 := g.adjList[vet2]</span><br><span class="line">	<span class="keyword">if</span> !ok1 || !ok2 || vet1 == vet2 &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;adding false&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// add a edge vet1 - vet2</span></span><br><span class="line">	g.adjList[vet1] = <span class="built_in">append</span>(g.adjList[vet1], vet2)</span><br><span class="line">	g.adjList[vet2] = <span class="built_in">append</span>(g.adjList[vet2], vet1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// removeEdge Remove edge</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *graphAdjList)</span></span> removeEdge(vet1 Vertex, vet2 Vertex) &#123;</span><br><span class="line">	_, ok1 := g.adjList[vet1]</span><br><span class="line">	_, ok2 := g.adjList[vet2]</span><br><span class="line">	<span class="keyword">if</span> !ok1 || !ok2 || vet1 == vet2 &#123;</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// remove vet1 - vet2</span></span><br><span class="line">	g.adjList[vet1] = DeleteSliceElms(g.adjList[vet1], vet2)</span><br><span class="line">	g.adjList[vet2] = DeleteSliceElms(g.adjList[vet2], vet1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// addVertex Add a new vertex</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *graphAdjList)</span></span> addVertex(vet Vertex) &#123;</span><br><span class="line">	_, ok := g.adjList[vet]</span><br><span class="line">	<span class="keyword">if</span> ok &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// add a new linked list to the adjacency list</span></span><br><span class="line">	g.adjList[vet] = <span class="built_in">make</span>([]Vertex, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// removeVertex Remove vertex</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *graphAdjList)</span></span> removeVertex(vet Vertex) &#123;</span><br><span class="line">	_, ok := g.adjList[vet]</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">// delete the vertex(vet) corresponding list in adjList</span></span><br><span class="line">	<span class="built_in">delete</span>(g.adjList, vet)</span><br><span class="line">	<span class="comment">// traverse other vertices corresponding edges，remove the edges contained in vets</span></span><br><span class="line">	<span class="keyword">for</span> v, list := <span class="keyword">range</span> g.adjList &#123;</span><br><span class="line">		g.adjList[v] = DeleteSliceElms(list, vet)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// print </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *graphAdjList)</span></span> <span class="built_in">print</span>() &#123;</span><br><span class="line">	<span class="keyword">var</span> builder strings.Builder</span><br><span class="line">	fmt.Printf(<span class="string">&quot;邻接表 = \n&quot;</span>)</span><br><span class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> g.adjList &#123;</span><br><span class="line">		builder.WriteString(<span class="string">&quot;\t\t&quot;</span> + strconv.Itoa(k.Val) + <span class="string">&quot;: &quot;</span>)</span><br><span class="line">		<span class="keyword">for</span> _, vet := <span class="keyword">range</span> v &#123;</span><br><span class="line">			builder.WriteString(strconv.Itoa(vet.Val) + <span class="string">&quot; &quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(builder.String())</span><br><span class="line">		builder.Reset()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeleteSliceElms Delete a specific slice element</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeleteSliceElms</span><span class="params">(slice []Vertex, val Vertex)</span></span> []Vertex &#123;</span><br><span class="line">	<span class="keyword">var</span> result []Vertex</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> slice &#123;</span><br><span class="line">		<span class="keyword">if</span> v != val &#123;</span><br><span class="line">			result = <span class="built_in">append</span>(result, v)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	vet1 := Vertex&#123;<span class="number">1</span>&#125;</span><br><span class="line">	vet2 := Vertex&#123;<span class="number">2</span>&#125;</span><br><span class="line">	vet3 := Vertex&#123;<span class="number">3</span>&#125;</span><br><span class="line">	vet4 := Vertex&#123;<span class="number">4</span>&#125;</span><br><span class="line">	vet5 := Vertex&#123;<span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">	edges := [][]Vertex&#123;</span><br><span class="line">		&#123;vet1, vet2&#125;,</span><br><span class="line">		&#123;vet2, vet3&#125;,</span><br><span class="line">		&#123;vet3, vet4&#125;,</span><br><span class="line">		&#123;vet4, vet1&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	g := newGraphAdjList(edges)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;初始图：&quot;</span>)</span><br><span class="line">	g.<span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">	g.addVertex(vet5)</span><br><span class="line">	g.addEdge(vet1, vet5)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;\n更新后的图：&quot;</span>)</span><br><span class="line">	g.<span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">	g.removeVertex(vet2)</span><br><span class="line">	g.removeEdge(vet1, vet3)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;\n最终图：&quot;</span>)</span><br><span class="line">	g.<span class="built_in">print</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">初始图：</span><br><span class="line">邻接表 =</span><br><span class="line">          1: 2 4</span><br><span class="line">          2: 1 3</span><br><span class="line">          3: 2 4</span><br><span class="line">          4: 3 1</span><br><span class="line"></span><br><span class="line">更新后的图：</span><br><span class="line">邻接表 =</span><br><span class="line">           1: 2 4 5</span><br><span class="line">           2: 1 3</span><br><span class="line">           3: 2 4</span><br><span class="line">           4: 3 1</span><br><span class="line">           5: 1</span><br><span class="line"></span><br><span class="line">最终图：</span><br><span class="line">邻接表 =</span><br><span class="line">           1: 4 5</span><br><span class="line">           3: 4</span><br><span class="line">           4: 3 1</span><br><span class="line">           5: 1</span><br></pre></td></tr></table></figure>

<p><img src="/./../pic/Graph02/Graph01.png" alt="image-20230901235239699"></p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>GraphIntroduce</title>
    <url>/2023/09/01/Graph01/</url>
    <content><![CDATA[<h1 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h1><p>Start learning of Graph.<br>Mainly refer to the following books《Hello Algorithm》《代码随想录》</p>
<span id="more"></span>

<h2 id="Introduce"><a href="#Introduce" class="headerlink" title="Introduce"></a>Introduce</h2><p><strong>Graph</strong><br>consists of an infinite non-empty set of vertices and a set of edges between vertices</p>
<p><img src="/./../pic/Graph/graph01.png" alt="graph01"></p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">V</span><span class="operator">=</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span><span class="number">2</span><span class="operator">,</span><span class="number">3</span><span class="operator">,</span><span class="number">4</span><span class="operator">,</span><span class="number">5</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="built_in">E</span><span class="operator">=</span><span class="punctuation">&#123;</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">,</span><span class="number">2</span><span class="punctuation">)</span><span class="operator">,</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">,</span><span class="number">3</span><span class="punctuation">)</span><span class="operator">,</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">,</span><span class="number">5</span><span class="punctuation">)</span><span class="operator">,</span><span class="punctuation">(</span><span class="number">2</span><span class="operator">,</span><span class="number">3</span><span class="punctuation">)</span><span class="operator">,</span><span class="punctuation">(</span><span class="number">2</span><span class="operator">,</span><span class="number">4</span><span class="punctuation">)</span><span class="operator">,</span><span class="punctuation">(</span><span class="number">2</span><span class="operator">,</span><span class="number">5</span><span class="punctuation">)</span><span class="operator">,</span><span class="punctuation">(</span><span class="number">4</span><span class="operator">,</span><span class="number">5</span><span class="punctuation">)</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="variable">G</span><span class="operator">=</span><span class="punctuation">&#123;</span><span class="variable">V</span><span class="operator">,</span><span class="built_in">E</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>Common：<strong>G(V,E)</strong></p>
<p><strong>G represents a graph</strong><br><strong>V is the set of vertices in figure G</strong><br><strong>E is the set of edges in Figure G</strong></p>
<p>In the data elements in the graph, we call them Vertex, the set of vertices is infinite and not empty. In a graph, there may be a relationship between any two vertices, the logical relationship between the vertices is represented by edges, and the edge set can be empty.</p>
<p>Graphs are divided into <strong>undirected graphs</strong> and <strong>directed graphs</strong> according to the direction of the edges.</p>
<ul>
<li>an undirected graph consists of vertices and edges,</li>
<li>A directed graph consists of vertices and arcs(弧). The arc is divided into an arc tail and an arc head, and the end with an arrow is the arc head.<img src="/./../pic/Graph/graph02.png" alt="graph02"></li>
</ul>
<p>According to whether the vertices are connected or not, it is divided into<br><strong>connected graph</strong> and  <strong>non-connected graph</strong> </p>
<ul>
<li><p>For connected graphs, from one vertex, you can reach any of the other vertices.</p>
</li>
<li><p>For non-connected graphs, at least one vertex is unreachable from a vertex.</p>
</li>
<li><p><img src="/./../pic/Graph/graph03.png" alt="image-20230901180215803"></p>
</li>
</ul>
<p>According to the weight, it is divided into <strong>power graph</strong> and  <strong>nopwer graph</strong></p>
<p><img src="/./../pic/Graph/graph04.png" alt="image-20230901180544716"></p>
<p>图数据结构包含以下常用术语。</p>
<ul>
<li><p>adjacency：in two vertices connect。</p>
</li>
<li><p>path：the path from VertexA to VertexB   </p>
</li>
<li><p>degree：The number of edges owned by a vertex</p>
</li>
</ul>
<h2 id="Representation-of-the-figure"><a href="#Representation-of-the-figure" class="headerlink" title="Representation of the figure"></a>Representation of the figure</h2><p>Common representations of graphs include <strong>adjacency matrices</strong> and <strong>adjacency list</strong></p>
<h3 id="Adjacency-matrices"><a href="#Adjacency-matrices" class="headerlink" title="Adjacency matrices"></a>Adjacency matrices</h3><p>A graph holds vertices <code>n</code>，adjacency matrices use <code>n*n</code> matrices implement graph，Each row (column) represents a vertex,using element <code>1</code> or <code>0</code> denote wether vertices holding a path</p>
<p>adjacency matrices <code>M</code>、<code>vertices:V</code> ，matrices element <code>M[i,j]=1</code> denote  vertex<code>V[i] </code> to vertex <code>V[j]</code> has a path<br>,so <code>M[i,j]=0</code>means there is no path in two vertices.</p>
<p><img src="/./../pic/Graph/graph05.png" alt="image-20230901181201339"></p>
<p>adjacency matrices has the following characteristics</p>
<ul>
<li>Vertices cannot be connected to themselves, so adjacency matrix main diagonal elements have no meaning.</li>
<li>For undirected graphs, the edges in both directions are the same power, where the adjacency matrix is symmetric with respect to the principal diagonal.<br>Replacing the elements of the adjacency matrix with weights from 1 and 0 represents a weight graph.</li>
</ul>
<h3 id="Adjacency-list"><a href="#Adjacency-list" class="headerlink" title="Adjacency list"></a>Adjacency list</h3><p> adjacency list use <code>n</code> linklist to implement graph，whose node is used to implement vertex.<br>the <code>ith</code>linklisr is reflect the vertex <code>i</code> </p>
<p><img src="/./../pic/Graph/graph06.png" alt="image-20230901181618572"></p>
<p>The adjacency table only stores the edges that actually exist, and the total number of edges is usually much smaller than  ‘ <code>O(n^2) </code>, so it is more space-efficient. However, in the adjacency table, it is necessary to traverse the linked list to find edges, so it is not as time-efficient as the adjacency matrix.</p>
<p>The adjacency table structure is very similar to the “chained address” in the hash table,<br> so we can also take a similar approach to optimize efficiency.<br>For example, when the linked list is long, the linked list can be converted into an <strong>AVL tree</strong> or a red-black tree,<br>thereby optimizing the time efficiency from <code>O(n) </code>to <code>O(logN)</code><br> It is also possible to convert a linked list to a hash table, thereby reducing the time complexity to <code>O(1)</code></p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL01</title>
    <url>/2023/09/01/MySQL01/</url>
    <content><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p><strong>SQL (Structured Query Language:结构化查询语言) 是用于管理关系数据库管理系统（RDBMS）。 SQL 的范围包括数据插入、查询、更新和删除，数据库模式创建和修改，以及数据访问控制。</strong></p>
<span id="more"></span>



<h2 id="SQL-分类"><a href="#SQL-分类" class="headerlink" title="SQL 分类"></a>SQL 分类</h2><p>SQL语言在功能上主要分为如下3大类：<br><strong>DDL（Data Definition Languages、数据定义语言）</strong>，这些语句定义了不同的数据库、表、视图、索<br>引等数据库对象，还可以用来创建、删除、修改数据库和数据表的结构。<br>主要的语句关键字包括CREATE 、DROP 、ALTER 等。<br><strong>DML（Data Manipulation Language、数据操作语言）</strong>，用于添加、删除、更新和查询数据库记<br>录，并检查数据完整性。<br>主要的语句关键字包括INSERT 、DELETE 、UPDATE 、SELECT 等。<br>SELECT是SQL语言的基础，最为重要。<br><strong>DCL（Data Control Language、数据控制语言）</strong>，用于定义数据库、表、字段、用户的访问权限和<br>安全级别。<br>主要的语句关键字包括GRANT 、REVOKE 、COMMIT 、ROLLBACK 、SAVEPOINT 等。<br>因为查询语句使用的非常的频繁，所以很多人把查询语句单拎出来一类：DQL（数据查询语言）。<br>还有单独将COMMIT 、ROLLBACK 取出来称为TCL （Transaction Control Language，事务控制语<br>言）。</p>
<h2 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h2><ul>
<li>SQL 可以写在一行或者多行。为了提高可读性，各子句分行写，必要时使用缩进</li>
<li>每条命令以 ; 或 \g 或 \G 结束</li>
<li>关键字不能被缩写也不能分行</li>
<li>关于标点符号</li>
<li>必须保证所有的()、单引号、双引号是成对结束的</li>
<li>必须使用英文状态下的半角输入方式</li>
<li>字符串型和日期时间类型的数据可以使用单引号（’ ‘）表示</li>
<li>列的别名，尽量使用双引号（” “），而且不建议省略as</li>
<li>MySQL 在 Windows 环境下是大小写不敏感的</li>
<li>MySQL 在 Linux 环境下是大小写敏感的</li>
<li>数据库名、表名、表的别名、变量名是严格区分大小写的</li>
<li>关键字、函数名、列名(或字段名)、列的别名(字段的别名) 是忽略大小写的。</li>
<li><strong>推荐采用统一的书写规范：</strong></li>
<li><strong>数据库名、表名、表别名、字段名、字段别名等都小写</strong></li>
<li><strong>SQL 关键字、函数名、绑定变量等都大写</strong></li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] name [CHAHRCTER <span class="keyword">SET</span> utf8] [<span class="keyword">COLLATE</span> utf8_bin];</span><br></pre></td></tr></table></figure>

<p>CHAHRCTER字符集<br>COLLATE校对规则	utf8_bin区分大小写 ，默认utf8_general_ci不区分大小写</p>
<h3 id="查看删除数据库"><a href="#查看删除数据库" class="headerlink" title="查看删除数据库"></a>查看删除数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] name;</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES ;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE hello;#显示数据库创建语句</span><br></pre></td></tr></table></figure>



<h3 id="备份和恢复数据库"><a href="#备份和恢复数据库" class="headerlink" title="备份和恢复数据库"></a>备份和恢复数据库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqlump -u 用户名 -p -B 数据库1 数据库2 数据库3 &gt;d:\\文件名.sql #doc命令</span><br><span class="line">mysqlump -u 用户名 -p 数据库1 表1 表2 表3 &gt;d:\\文件名.sql #doc命令</span><br><span class="line">Source 文件名.sql #mysql命令</span><br></pre></td></tr></table></figure>



<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line">(</span><br><span class="line">	field datatype,</span><br><span class="line">    field datatype,</span><br><span class="line">    field datatype,</span><br><span class="line">)<span class="type">character</span> <span class="keyword">set</span>字符集 <span class="keyword">collate</span> 校对规则 engine引擎 </span><br></pre></td></tr></table></figure>



<h3 id="表类型和存储引擎"><a href="#表类型和存储引擎" class="headerlink" title="表类型和存储引擎"></a>表类型和存储引擎</h3><p>MySQL的表的类型由存储引擎决定，主要包括MyLSAM、innoDB、Memory等<br>MySQL数据库主要支持六种类型，分别时CSV、MEMORY、ARCHIVE、MGR_MYISAM、MYISAM、innoDB。</p>
<p>这六种又分为两类，一类是事务安全型(transaction-safe)如 [innoDB]，<br>其余都属于第二类，非事务安全型(non-transaction-safe) [MYISAM和MEMORY]</p>
<p>mysql&gt; show engines;</p>
<table>
<thead>
<tr>
<th>Engine</th>
<th>Comment</th>
<th>Transactions</th>
<th>XA(跨数据库事务)</th>
<th>Savepoints</th>
</tr>
</thead>
<tbody><tr>
<td>InnoDB</td>
<td>支持事务，行级锁定，外键</td>
<td>YES</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr>
<td>MyISAM</td>
<td>MyISAM存储引擎</td>
<td>NO</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr>
<td>MRG_MYISAM</td>
<td>相同的 MyISAM 表的集合</td>
<td>NO</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr>
<td>MEMORY</td>
<td>基于哈希，存储在内存中，对临时表很有用</td>
<td>NO</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr>
<td>CSV</td>
<td>CSV 存储引擎</td>
<td>NO</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr>
<td>ARCHIVE</td>
<td>Archive存档类型存储引擎</td>
<td>NO</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr>
<td>PERFORMANCE_SCHEMA</td>
<td>性能架构</td>
<td>NO</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr>
<td>BLACKHOLE</td>
<td>dev&#x2F;null 存储引擎（您写入的任何内容都会消失）</td>
<td>NO</td>
<td>NO</td>
<td>NO</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>功能</strong></th>
<th><strong>MyISAM</strong></th>
<th><strong>MEMORY</strong></th>
<th><strong>innoDB</strong></th>
<th><strong>ARCHIVE</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>存储限制</strong></td>
<td>256BT</td>
<td>RAM</td>
<td>64BT</td>
<td></td>
</tr>
<tr>
<td><strong>事务</strong></td>
<td></td>
<td></td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td><strong>全文索引</strong></td>
<td>Yes</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>B树索引</strong></td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td><strong>哈希索引</strong></td>
<td>Yes</td>
<td>Yes</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>集群索引</strong></td>
<td></td>
<td>Yes</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td><strong>数据索引</strong></td>
<td></td>
<td>Yes</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td><strong>数据压缩</strong></td>
<td>Yes</td>
<td></td>
<td></td>
<td>Yes</td>
</tr>
<tr>
<td><strong>空间使用率</strong></td>
<td>低</td>
<td>N&#x2F;A</td>
<td>高</td>
<td>非常低</td>
</tr>
<tr>
<td><strong>外键</strong></td>
<td></td>
<td></td>
<td>Yes</td>
<td></td>
</tr>
</tbody></table>
<p>1.MyISAM不支持事务、也不支持外键，但其访同速度快，对事务完整性没有要求</p>
<p>2.InnoDB存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但是比起MyISAM存储引擎，InnoDB写的处理效率差一些并直会占用更多的磁盘空间以保留数据和索引。</p>
<p>3.MEMORY存储引擎使用存在内存中的内容来创建表。每个MEMORY表只实际对应一个磁盘文件。MEMORY类型的表访问非常得快，因为它的数据是放在内存中的并默认使用HASH索引。但是一旦服务关闭，表中的数据就会丢失掉，表的结构还在。</p>
<p><strong>修改存储引擎</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 engine<span class="operator">=</span>xxxx;</span><br></pre></td></tr></table></figure>



<h3 id="MySQL常用数据类型"><a href="#MySQL常用数据类型" class="headerlink" title="MySQL常用数据类型"></a>MySQL常用数据类型</h3><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><table>
<thead>
<tr>
<th>类型</th>
<th>占字节数</th>
<th>最大宽度</th>
<th>无符号的数值范围</th>
<th>有符号的数值范围</th>
</tr>
</thead>
<tbody><tr>
<td>bit(m)</td>
<td>bit(m) m1到64</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>int[unsigned]</td>
<td>4</td>
<td>int(11)</td>
<td>0 到 2^32 – 1</td>
<td>-2^31 到 2^31 – 1</td>
</tr>
<tr>
<td>tinyint[unsigned]</td>
<td>1</td>
<td>tinyint(4)</td>
<td>0 到 2^8 – 1</td>
<td>- 2^7 到 2^7 – 1</td>
</tr>
<tr>
<td>smallint[unsigned]</td>
<td>2</td>
<td>smallint(6)</td>
<td>0 到 2^16 – 1</td>
<td>- 2^15 到 2^15 – 1</td>
</tr>
<tr>
<td>mediumint[unsigned]</td>
<td>3</td>
<td>mediumint(9)</td>
<td>0 到 2^24 – 1</td>
<td>- 2^23 到 2^23 – 1</td>
</tr>
<tr>
<td>bigint[unsigned]</td>
<td>8</td>
<td>bigint(20)</td>
<td>0到 2^64 – 1</td>
<td>- 2^63 到 2^63 – 1</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `BIT`(num BIT(<span class="number">8</span>));</span><br><span class="line"><span class="comment">-- m=8 表示一个字节0-255 --</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `BIT` <span class="keyword">VALUES</span> (<span class="number">123</span>); #<span class="number">01111011</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `BIT` <span class="keyword">VALUES</span> (<span class="number">255</span>); #<span class="number">11111111</span></span><br></pre></td></tr></table></figure>



<h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><table>
<thead>
<tr>
<th>类型</th>
<th align="left">所占字节数</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>float(m,d)</td>
<td align="left">4</td>
<td>单精度，m 为总个数， d 小数点后边位数 ，默认是float(10,2)</td>
</tr>
<tr>
<td>double(m,d)</td>
<td align="left">8</td>
<td>双精度，m 为总个数，d为小数点后边位数，默认是double(16,4)</td>
</tr>
<tr>
<td>decimal(m,d)</td>
<td align="left">m字节（mysql3.23之前版本），m+2字节（mysql 3.23以后版本 ）</td>
<td>储存为字符串的浮点数 m大小为1-256，d的大小为0-30，默认是decimal(18,9)</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="type">DECIMAL</span>`(</span><br><span class="line">    num1 <span class="type">float</span>,</span><br><span class="line">    num2 <span class="keyword">double</span>,</span><br><span class="line">    num3 <span class="type">decimal</span>(<span class="number">30</span>,<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="type">DECIMAL</span>` <span class="keyword">VALUES</span> (<span class="number">88.12345678912345</span>,<span class="number">88.12345678912345</span>,<span class="number">88.12345678912345</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> `<span class="type">DECIMAL</span>`;</span><br><span class="line"><span class="number">88.1235</span>,<span class="number">88.12345678912345</span>,<span class="number">88.12345678912345000000</span></span><br></pre></td></tr></table></figure>



<h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">字节范围大小</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">varchar</td>
<td align="left">0-65535字节,使用中根据编码实际情况填写，如utf8为65532&#x2F;3字符，gbk为65532&#x2F;2字符</td>
<td align="center">可变长度字符串（必须指定长度） [0-2^16-1]</td>
</tr>
<tr>
<td align="left">char</td>
<td align="left">0-255字节</td>
<td align="center">固定长度字符串</td>
</tr>
<tr>
<td align="left">tinytext</td>
<td align="left">0-255字节</td>
<td align="center">短文本字符串（不能指定长度）</td>
</tr>
<tr>
<td align="left">text</td>
<td align="left">0-65535字节</td>
<td align="center">长文本数据</td>
</tr>
<tr>
<td align="left">longtext</td>
<td align="left">0-4294967295字节</td>
<td align="center">极大文本数据 [0-2^24-1]</td>
</tr>
<tr>
<td align="left">tinyblob</td>
<td align="left">0-255字节</td>
<td align="center">二进制字符串（存储图片，视频等）（不能指定长度）</td>
</tr>
<tr>
<td align="left">blob</td>
<td align="left">0-65535字节</td>
<td align="center">二进制形式的长文本 [0-2^16-1]</td>
</tr>
<tr>
<td align="left">longblob</td>
<td align="left">0-4294967295字节</td>
<td align="center">二进制形式的极大文本数据</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="type">CHAR</span>(<span class="number">4</span>) #这个<span class="number">4</span>表示字符数(最大<span class="number">255</span>)，不是字节数，中英文都放<span class="number">4</span>个，按字符计算</span><br><span class="line"><span class="type">VARCHAR</span>(<span class="number">4</span>) #这个<span class="number">4</span>表示字符数，中英文都以定义好的表的编码来存放数据,一个字符所占的字节数取决于编码</span><br></pre></td></tr></table></figure>



<h4 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h4><table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>所占字节数</strong></th>
<th><strong>存储格式</strong></th>
<th><strong>支持的范围</strong></th>
</tr>
</thead>
<tbody><tr>
<td>date</td>
<td>3</td>
<td>YYYY-MM-DD</td>
<td>‘1000-01-01’ 到 ‘9999-12-31’</td>
</tr>
<tr>
<td>time</td>
<td>3</td>
<td>HH:MM:SS</td>
<td>‘-838:59:59’ 到 ‘838:59:59’</td>
</tr>
<tr>
<td>datetime</td>
<td>8</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</td>
</tr>
<tr>
<td>timestamp</td>
<td>4</td>
<td>自动存储记录修改的时间，设置值时只允许设置数字类型的值</td>
<td>时间戳，从1970-01-01 00:00:00到当前的时间差值。</td>
</tr>
<tr>
<td>year</td>
<td>1</td>
<td>YYYY</td>
<td>1901 到 2155</td>
</tr>
</tbody></table>
<h4 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h4><table>
<thead>
<tr>
<th>类型</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>set</td>
<td>集合类型</td>
<td>set(‘num1’,‘num2’,‘num3’)</td>
</tr>
<tr>
<td>enum</td>
<td>枚举类型</td>
<td>enum(‘num1’,‘num2’,‘num3’)</td>
</tr>
</tbody></table>
<h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `emp`(</span><br><span class="line">    `id` <span class="type">INT</span>,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">    `sex`   <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">    `birthday` <span class="type">DATE</span>,</span><br><span class="line">    `entry_date` DATETIME,</span><br><span class="line">    `job`    <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">    `salary` <span class="keyword">DOUBLE</span>,</span><br><span class="line">    `resume`    TEXT</span><br><span class="line">)CHARSET utf8 <span class="keyword">COLLATE</span> utf8_bin ENGINE INNODB;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `emp` <span class="keyword">VALUES</span></span><br><span class="line">                      (<span class="number">100</span>,<span class="string">&#x27;name1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;2000-11-11&#x27;</span>,<span class="string">&#x27;2010-11-10 11:11:11&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;job1&#x27;</span>,<span class="number">3000</span>,<span class="string">&#x27;resume1&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename <span class="keyword">ADD</span> (<span class="keyword">column</span> databyte [<span class="keyword">DEFAULT</span> expr]);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> `image` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> AFTER resume;</span><br></pre></td></tr></table></figure>

<h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DESC</span> TableName;</span><br><span class="line"><span class="keyword">DESC</span> emp;</span><br></pre></td></tr></table></figure>



<h3 id="修改列"><a href="#修改列" class="headerlink" title="修改列"></a>修改列</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TableName MODIFY (<span class="keyword">column</span> databyte [<span class="keyword">DEFAULT</span> expr]);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp MODIFY job <span class="type">VARCHAR</span>(<span class="number">60</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h4 id="修改列名"><a href="#修改列名" class="headerlink" title="修改列名"></a>修改列名</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TableName CHANGE `OldName` <span class="keyword">TO</span> `NewName` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>; </span><br></pre></td></tr></table></figure>

<h4 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TableName <span class="keyword">DROP</span> (<span class="keyword">column</span> databyte);</span><br></pre></td></tr></table></figure>

<h4 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> emp <span class="keyword">TO</span> employee;</span><br></pre></td></tr></table></figure>

<h4 id="修改表的字符集"><a href="#修改表的字符集" class="headerlink" title="修改表的字符集"></a>修改表的字符集</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br></pre></td></tr></table></figure>



<h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><p><em><strong>create read update delete</strong></em></p>
<p>数据库的CRUD语句</p>
<h3 id="Insert-添加数据"><a href="#Insert-添加数据" class="headerlink" title="Insert 添加数据"></a>Insert 添加数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TableName (column1,column2,column3) <span class="keyword">VALUES</span> (value1,value2,value3);</span><br><span class="line">#col与val是对应的</span><br></pre></td></tr></table></figure>

<ul>
<li><p>插入的数据应与字段的类型数据相同</p>
</li>
<li><p>数据的长度应该在列的规定范围内</p>
</li>
<li><p>VALUES中列出的数据位置必须与被加入的列的排列位置相应</p>
</li>
<li><p>字符和日期型数据应该包含在单引号中</p>
</li>
<li><p>列可以插入空值[前提是该字段允许为空] insert into table value(null)</p>
</li>
<li><p>添加多条记录</p>
<p><code>INSERT INTO TableName (column1,column2,column3)</code> </p>
<p>​							<code>VALUES (value1,value2,value3)，</code></p>
<p>​											<code>(value1,value2,value3);</code></p>
</li>
<li><p>默认值的使用，当不给某个字段值时，如果有默认值就会添加，否则报错</p>
<p>如果某个列没有指定 not null，那么添加数据时，没有给定值，就会默认给null</p>
<p>如果希望指定某个列的默认值，可以在创建表的时候指定</p>
</li>
</ul>
<h4 id="自增长"><a href="#自增长" class="headerlink" title="自增长"></a>自增长</h4><p>表中存在id列，希望添加数据时，该列从1开始自动增长</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">字段名 <span class="type">INT</span> <span class="keyword">primary</span> key auto_increment</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tableName auto_increment<span class="operator">=</span><span class="number">100</span> #修改自增长开始值</span><br></pre></td></tr></table></figure>

<p><strong>添加方式</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> xxx (字段<span class="number">1</span>，字段<span class="number">2.</span>..) <span class="keyword">VALUES</span> (<span class="keyword">null</span>,<span class="string">&#x27;值&#x27;</span>...);#希望自增长，字段<span class="number">1</span>直接填<span class="keyword">null</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> xxx ((字段<span class="number">1</span>，字段<span class="number">2</span>，字段<span class="number">3.</span>..) <span class="keyword">VALUES</span> (<span class="string">&#x27;值2&#x27;</span>,<span class="string">&#x27;值3&#x27;</span>...);#直接不写auto所在的列</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> xxx <span class="keyword">VALUES</span> (<span class="keyword">null</span>,<span class="string">&#x27;值1&#x27;</span>...);</span><br></pre></td></tr></table></figure>

<p><strong>若指定则从指定的值增长</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> xxx (字段<span class="number">1</span>，字段<span class="number">2.</span>..) <span class="keyword">VALUES</span> (<span class="number">666</span>,<span class="keyword">null</span>,<span class="string">&#x27;值&#x27;</span>...);#从<span class="number">666</span>开始增长</span><br></pre></td></tr></table></figure>



<h3 id="Update-更新数据"><a href="#Update-更新数据" class="headerlink" title="Update 更新数据"></a>Update 更新数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> TableName </span><br><span class="line">	<span class="keyword">SET</span> col1<span class="operator">=</span>expr1,col2<span class="operator">=</span>expr2 [<span class="keyword">WHERE</span> expr];</span><br></pre></td></tr></table></figure>

<ul>
<li>UPDATE可以用新值跟新原有列表中的割裂</li>
<li>SET语句指示要修改哪些列和要赋予那些值</li>
<li>WHERE子句指定更新哪些行，没有WHERE全更新</li>
<li>如果要更新多个字段 通过 <code>set 字段1=值1,字段2=值2</code>&#x3D;</li>
</ul>
<h3 id="Delete-删除数据"><a href="#Delete-删除数据" class="headerlink" title="Delete 删除数据"></a>Delete 删除数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DEALETE <span class="keyword">FROM</span> TableName [<span class="keyword">WHERE</span> expr;];</span><br></pre></td></tr></table></figure>

<ul>
<li>不使用WHERE子句，将删除表中所有的数据</li>
<li>DELETE 不能删除某一列的值(可使用update设为null或者’ ‘)</li>
<li>DELETE 语句仅删除记录，不删除表本身，如果要删除表，使用<code>drop table</code>语句</li>
</ul>
<h3 id="Select-查找数据"><a href="#Select-查找数据" class="headerlink" title="Select 查找数据"></a>Select 查找数据</h3><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>] <span class="operator">*</span><span class="operator">|</span> &#123;col1,col2,col3...&#125; <span class="keyword">FROM</span> tablename;</span><br></pre></td></tr></table></figure>

<ul>
<li>SELECT指定查询哪些列的数据</li>
<li>col指定列名</li>
<li>代表查询所有列</li>
<li>FROM指定查询哪张表</li>
<li>DISTINCT可选，指显示结果时，是否去掉重复数据，每个字段都相同才会去重</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">TABLE</span> student</span><br><span class="line">(</span><br><span class="line">    id      <span class="type">int</span>         <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">    `name`   <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    chinese <span class="type">FLOAT</span>       <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>,</span><br><span class="line">    english <span class="type">FLOAT</span>       <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>,</span><br><span class="line">    math    <span class="type">FLOAT</span>       <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (id, `name`, chinese, english, math)</span><br><span class="line">	  <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;NAME1&#x27;</span>, <span class="number">89</span>, <span class="number">78</span>, <span class="number">90</span>),</span><br><span class="line">       		(<span class="number">2</span>, <span class="string">&#x27;NAME2&#x27;</span>, <span class="number">67</span>, <span class="number">98</span>, <span class="number">56</span>),</span><br><span class="line">      	 	(<span class="number">3</span>, <span class="string">&#x27;NAME3&#x27;</span>, <span class="number">87</span>, <span class="number">78</span>, <span class="number">77</span>),		</span><br><span class="line">      	 	(<span class="number">4</span>, <span class="string">&#x27;NAME4&#x27;</span>, <span class="number">88</span>, <span class="number">98</span>, <span class="number">90</span>),</span><br><span class="line">       		(<span class="number">5</span>, <span class="string">&#x27;NAME5&#x27;</span>, <span class="number">82</span>, <span class="number">84</span>, <span class="number">67</span>),</span><br><span class="line">       		(<span class="number">6</span>, <span class="string">&#x27;NAME6&#x27;</span>, <span class="number">55</span>, <span class="number">85</span>, <span class="number">45</span>),</span><br><span class="line">       		(<span class="number">7</span>, <span class="string">&#x27;NAME7&#x27;</span>, <span class="number">75</span>, <span class="number">65</span>, <span class="number">30</span>),</span><br><span class="line">       		(<span class="number">8</span>, <span class="string">&#x27;NAME8&#x27;</span>, <span class="number">45</span>, <span class="number">65</span>, <span class="number">99</span>);  </span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`,english <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> english <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure>

<h4 id="使用表达式对查询的列运算与别名"><a href="#使用表达式对查询的列运算与别名" class="headerlink" title="使用表达式对查询的列运算与别名"></a>使用表达式对查询的列运算与别名</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="operator">|</span>&#123;<span class="keyword">column</span><span class="operator">|</span>expression , column2<span class="operator">|</span>expression,...&#125; <span class="keyword">FROM</span> TableName;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> columnName <span class="keyword">AS</span> 别名 <span class="keyword">FROM</span> TableName;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`,(chinese<span class="operator">+</span>math<span class="operator">+</span>english) <span class="keyword">AS</span> <span class="string">&#x27;SUM&#x27;</span> <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure>

<h4 id="WHERE子句常用运算符"><a href="#WHERE子句常用运算符" class="headerlink" title="WHERE子句常用运算符"></a>WHERE子句常用运算符</h4><table>
<thead>
<tr>
<th align="center"><strong>比较运算符</strong></th>
<th align="left"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x3D;     !&#x3D;     &gt;     &lt;    &gt;&#x3D;   &lt;&#x3D;</td>
<td align="left">等于,不等于,大于,小于,大于等于,小于等于</td>
</tr>
<tr>
<td align="center">BETWEEN  …AND…</td>
<td align="left">在某个范围内,左右闭区间</td>
</tr>
<tr>
<td align="center">LIKE  NOT LIKE</td>
<td align="left">模糊搜索某种模式</td>
</tr>
<tr>
<td align="center">IN</td>
<td align="left">指定针对某个列的多个可能值</td>
</tr>
<tr>
<td align="center">IS NULL</td>
<td align="left">判断是否为空</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center"><strong>逻辑运算符</strong></th>
<th align="left"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">AND</td>
<td align="left">多个条件同时成立</td>
</tr>
<tr>
<td align="center">OR</td>
<td align="left">多个条件任一成立</td>
</tr>
<tr>
<td align="center">NOT</td>
<td align="left">不成立</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;name1&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english <span class="operator">&gt;</span> <span class="number">90</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english <span class="keyword">BETWEEN</span> <span class="number">80</span> <span class="keyword">AND</span> <span class="number">90</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english <span class="keyword">IN</span> ( <span class="number">89</span>,<span class="number">90</span>,<span class="number">91</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> student <span class="keyword">WHERE</span> </span><br><span class="line">				(english<span class="operator">+</span>math<span class="operator">+</span>chinese)<span class="operator">&gt;</span><span class="number">200</span> </span><br><span class="line">				<span class="keyword">AND</span> math <span class="operator">&lt;</span> chinese </span><br><span class="line">				<span class="keyword">AND</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;韩%&#x27;</span>;</span><br><span class="line">#查询总分大于<span class="number">200</span>，数学小于语文，姓&quot;韩&quot;的学生</span><br></pre></td></tr></table></figure>



<h4 id="ORDER-BY子句排序查询结果"><a href="#ORDER-BY子句排序查询结果" class="headerlink" title="ORDER BY子句排序查询结果"></a>ORDER BY子句排序查询结果</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1,column2,column3...FROM <span class="keyword">table</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">column</span> <span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>,...</span><br></pre></td></tr></table></figure>

<ul>
<li>ORDER BY指定排序的列，排序的列既可以是表的列名也可以是select语句后指定的别名</li>
<li>ASC升序[默认]，DESC降序</li>
<li>ORDER BY语句硬位于SELECT语句的结尾</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`,(chinese <span class="operator">+</span> math <span class="operator">+</span> english) <span class="keyword">AS</span> total <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> total <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;李%&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> math <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>





<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="COUNT统计函数"><a href="#COUNT统计函数" class="headerlink" title="COUNT统计函数"></a>COUNT统计函数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">|</span><span class="built_in">COUNT</span>(列名) <span class="keyword">FROM</span> TableName [<span class="keyword">WHERE</span> expr];</span><br></pre></td></tr></table></figure>

<ul>
<li>COUNT(*)返回满足条件的记录的行数</li>
<li>COUNT(列名)是统计满足条件的某列有多少个，但是会排除为空的情况</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `COUNT` (`name` <span class="type">VARCHAR</span>(<span class="number">20</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> COUNT <span class="keyword">VALUES</span> (<span class="string">&#x27;TOM&#x27;</span>),(<span class="string">&#x27;JACK&#x27;</span>),(<span class="string">&#x27;MARY&#x27;</span>),(<span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> `COUNT`;   <span class="comment">/*4*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(`name`) <span class="keyword">FROM</span> `COUNT`;  <span class="comment">/*3*/</span></span><br></pre></td></tr></table></figure>



<h4 id="SUM函数"><a href="#SUM函数" class="headerlink" title="SUM函数"></a>SUM函数</h4><p>SUM函数返回复合WHERE条件行的和，仅对数值起作用，对多列求和“，”不能少，否则会报错</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(列名) &#123;,<span class="built_in">SUM</span>(列名)...&#125; <span class="keyword">FROM</span> TableName [<span class="keyword">WHERE</span> expr];</span><br></pre></td></tr></table></figure>



<h4 id="AVG函数"><a href="#AVG函数" class="headerlink" title="AVG函数"></a>AVG函数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(列名) &#123;,<span class="built_in">AVG</span>(列名)...&#125; <span class="keyword">FROM</span> TableName [<span class="keyword">WHERE</span> expr];</span><br></pre></td></tr></table></figure>



<h4 id="MAX-MIN函数"><a href="#MAX-MIN函数" class="headerlink" title="MAX&#x2F;MIN函数"></a>MAX&#x2F;MIN函数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(列名) <span class="keyword">FROM</span> TableName [<span class="keyword">WHERE</span> expr];</span><br></pre></td></tr></table></figure>



<h4 id="GROUP-BY-对-子句队列进行分组"><a href="#GROUP-BY-对-子句队列进行分组" class="headerlink" title="GROUP BY 对 子句队列进行分组"></a>GROUP BY 对 子句队列进行分组</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1，col2...FROM <span class="keyword">table</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> col;</span><br></pre></td></tr></table></figure>

<p>只要有聚合函数 sum()，count()，max()，avg() 等函数就需要用到 group by , 否则就会报上面的错误.<br>group by id (id 是主键) 的时候, select 什么都没有问题, 包括有聚合函数.<br>group by role (非主键) 的时候, select 只能是聚合函数和 role ( group by 的字段) , 否则报错</p>
<p><strong>使用HAVING子句对分组以后的结果过滤</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1，col2...FROM <span class="keyword">table</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> col <span class="keyword">HAVING</span> ...;</span><br></pre></td></tr></table></figure>



<h5 id="example"><a href="#example" class="headerlink" title="example"></a>example</h5><p> <strong>部员表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#部员表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept</span><br><span class="line">(</span><br><span class="line">    deptno MEDIUMINT   <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    dname  <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    loc    <span class="type">VARCHAR</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept</span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;ACCOUNTING&#x27;</span>, <span class="string">&#x27;NEW YORK&#x27;</span>),</span><br><span class="line">           (<span class="number">20</span>, <span class="string">&#x27;RESEARCH&#x27;</span>, <span class="string">&#x27;DALLAS&#x27;</span>),</span><br><span class="line">           (<span class="number">30</span>, <span class="string">&#x27;SALES&#x27;</span>, <span class="string">&#x27;CHICAGO&#x27;</span>),</span><br><span class="line">           (<span class="number">40</span>, <span class="string">&#x27;OPERATIONS&#x27;</span>, <span class="string">&#x27;BOSHTON&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> dept;</span><br></pre></td></tr></table></figure>



<p><strong>雇员表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#雇员表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp</span><br><span class="line">(</span><br><span class="line">    empno    MEDIUMINT UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,  #编号</span><br><span class="line">    ename    <span class="type">VARCHAR</span>(<span class="number">20</span>)        <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>, #名字</span><br><span class="line">    job      <span class="type">VARCHAR</span>(<span class="number">9</span>)         <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>, #工作</span><br><span class="line">    mgr      MEDIUMINT UNSIGNED,				    #上级编号</span><br><span class="line">    hiredate <span class="type">DATE</span>               <span class="keyword">NOT</span> <span class="keyword">NULL</span>, 		     #入职时间</span><br><span class="line">    sal      <span class="type">DECIMAL</span>(<span class="number">7</span>, <span class="number">2</span>)      <span class="keyword">NOT</span> <span class="keyword">NULL</span>,			#薪水</span><br><span class="line">    comm     <span class="type">DECIMAL</span>(<span class="number">7</span>, <span class="number">2</span>),						   #红利</span><br><span class="line">    deptno   MEDIUMINT UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>   #部门编号</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp</span><br><span class="line">        <span class="keyword">VALUES</span>(<span class="number">7369</span>,<span class="string">&#x27;SMITH&#x27;</span>,<span class="string">&#x27;CLERK&#x27;</span>,<span class="number">7902</span>,<span class="string">&#x27;1990-12-17&#x27;</span>,<span class="number">800.00</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">              (<span class="number">7499</span>,<span class="string">&#x27;ALLEN&#x27;</span>,<span class="string">&#x27;SALESMAN&#x27;</span>,<span class="number">7698</span>,<span class="string">&#x27;1991-2-20&#x27;</span>,<span class="number">1600.00</span>,<span class="number">300.00</span>,<span class="number">30</span>),</span><br><span class="line">              (<span class="number">7521</span>,<span class="string">&#x27;WARD&#x27;</span>,<span class="string">&#x27;SALESMAN&#x27;</span>,<span class="number">7698</span>,<span class="string">&#x27;1991-2-22&#x27;</span>,<span class="number">1250.00</span>,<span class="number">500.00</span>,<span class="number">30</span>),</span><br><span class="line">              (<span class="number">7566</span>,<span class="string">&#x27;JONES&#x27;</span>,<span class="string">&#x27;MANAGER&#x27;</span>,<span class="number">7839</span>,<span class="string">&#x27;1991-4-2&#x27;</span>,<span class="number">2975.00</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">              (<span class="number">7654</span>,<span class="string">&#x27;MARTIN&#x27;</span>,<span class="string">&#x27;SALESMAN&#x27;</span>,<span class="number">7698</span>,<span class="string">&#x27;1991-9-28&#x27;</span>,<span class="number">1250.00</span>,<span class="number">1400.00</span>,<span class="number">30</span>),</span><br><span class="line">              (<span class="number">7698</span>,<span class="string">&#x27;BLAKE&#x27;</span>,<span class="string">&#x27;MANAGER&#x27;</span>,<span class="number">7839</span>,<span class="string">&#x27;1991-5-1&#x27;</span>,<span class="number">2850.00</span>,<span class="keyword">NULL</span>,<span class="number">30</span>),</span><br><span class="line">              (<span class="number">7782</span>,<span class="string">&#x27;CLARK&#x27;</span>,<span class="string">&#x27;MANAGER&#x27;</span>,<span class="number">7839</span>,<span class="string">&#x27;1991-6-9&#x27;</span>,<span class="number">2450.00</span>,<span class="keyword">NULL</span>,<span class="number">10</span>),</span><br><span class="line">              (<span class="number">7788</span>,<span class="string">&#x27;SCOTT&#x27;</span>,<span class="string">&#x27;ANALYST&#x27;</span>,<span class="number">7566</span>,<span class="string">&#x27;1991-4-19&#x27;</span>,<span class="number">3000.00</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">              (<span class="number">7839</span>,<span class="string">&#x27;KING&#x27;</span>,<span class="string">&#x27;PRESIDENT&#x27;</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;1991-11-17&#x27;</span>,<span class="number">5000.00</span>,<span class="keyword">NULL</span>,<span class="number">10</span>),</span><br><span class="line">              (<span class="number">7844</span>,<span class="string">&#x27;TURNER&#x27;</span>,<span class="string">&#x27;SALESMAN&#x27;</span>,<span class="number">7698</span>,<span class="string">&#x27;1991-9-8&#x27;</span>,<span class="number">1500.00</span>,<span class="keyword">NULL</span>,<span class="number">30</span>),</span><br><span class="line">              (<span class="number">7900</span>,<span class="string">&#x27;JAMES&#x27;</span>,<span class="string">&#x27;CLERK&#x27;</span>,<span class="number">7698</span>,<span class="string">&#x27;1991-12-3&#x27;</span>,<span class="number">950.00</span>,<span class="keyword">NULL</span>,<span class="number">30</span>),</span><br><span class="line">              (<span class="number">7902</span>,<span class="string">&#x27;FORD&#x27;</span>,<span class="string">&#x27;ANALYST&#x27;</span>,<span class="number">7566</span>,<span class="string">&#x27;1991-12-3&#x27;</span>,<span class="number">3000.00</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">              (<span class="number">7934</span>,<span class="string">&#x27;MILLER&#x27;</span>,<span class="string">&#x27;CLERK&#x27;</span>,<span class="number">7782</span>,<span class="string">&#x27;1991-1-23&#x27;</span>,<span class="number">1300.00</span>,<span class="keyword">NULL</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#显示每个部门的平均工资和最高工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal),<span class="built_in">MAX</span>(sal),deptno <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno;</span><br><span class="line">#显示每个部门每种岗位的平均工资和最低工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal),<span class="built_in">MIN</span>(sal),deptno,job <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno,job;</span><br><span class="line">#显示平均工资低于<span class="number">2000</span>的部门号和他的平均工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal),deptno <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">HAVING</span>  <span class="built_in">AVG</span>(sal) <span class="operator">&lt;</span><span class="number">2000</span> ;</span><br><span class="line">#使用别名</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal) <span class="keyword">AS</span> &quot;avgsal&quot;,deptno <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">HAVING</span>  avgsal <span class="operator">&lt;</span><span class="number">2000</span> ;</span><br></pre></td></tr></table></figure>



<p><strong>工资级别表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#工资级别表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> salgrade(</span><br><span class="line">    grade MEDIUMINT UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    losal <span class="type">DECIMAL</span>(<span class="number">17</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    hisal <span class="type">DECIMAL</span>(<span class="number">17</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salgrade </span><br><span class="line">	<span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">700</span>,<span class="number">1200</span>),</span><br><span class="line">    	  (<span class="number">2</span>,<span class="number">1201</span>,<span class="number">1400</span>),</span><br><span class="line">    	  (<span class="number">3</span>,<span class="number">1401</span>,<span class="number">2000</span>),</span><br><span class="line">    	  (<span class="number">4</span>,<span class="number">2001</span>,<span class="number">3000</span>),</span><br><span class="line">    	  (<span class="number">5</span>,<span class="number">3001</span>,<span class="number">9999</span>);</span><br></pre></td></tr></table></figure>



<h4 id="字符串相关函数"><a href="#字符串相关函数" class="headerlink" title="字符串相关函数"></a>字符串相关函数</h4><table>
<thead>
<tr>
<th align="left">CHARSET(str)</th>
<th align="left">返回字串字符集</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CONCAT(string [,…])</td>
<td align="left">链接字串</td>
</tr>
<tr>
<td align="left">UCASE(string) &#x2F; LCASE(string)</td>
<td align="left">转化成大写&#x2F;小写</td>
</tr>
<tr>
<td align="left">LENGTH(string)</td>
<td align="left">长度</td>
</tr>
<tr>
<td align="left">REPLACE(str , search_str , replace_str)</td>
<td align="left">str中用replace_str替换search_str</td>
</tr>
<tr>
<td align="left">SUBSTRING(str , position , [length])</td>
<td align="left">str的position开始[索引从1开始],取length个字符</td>
</tr>
<tr>
<td align="left">INSTR(str,substring)</td>
<td align="left">返回substring在str中出现的位置，没有返回0</td>
</tr>
<tr>
<td align="left">STRCMP(str1,str2)</td>
<td align="left">逐字符比较两字串的大小，相等为0，不相等-1</td>
</tr>
<tr>
<td align="left">LTRIM(str) &#x2F; RTRIM(str)</td>
<td align="left">去掉前端或者后端空格</td>
</tr>
<tr>
<td align="left">LEFT(str,length) &#x2F; RIGHT(str,length)</td>
<td align="left">从左边&#x2F;右边取length个字串</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> CHARSET(ename) <span class="keyword">FROM</span> emp; #utf8mb4</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(ename,<span class="string">&#x27; job is &#x27;</span> ,job) <span class="keyword">FROM</span> emp; #SMITH job <span class="keyword">is</span> CLERK</span><br><span class="line"><span class="keyword">SELECT</span> LCASE(CONCAT(ename,<span class="string">&#x27; job is &#x27;</span> ,job)) <span class="keyword">FROM</span> emp; #smith job <span class="keyword">is</span> clerk</span><br><span class="line"><span class="keyword">SELECT</span> ename, LENGTH(ename) <span class="keyword">FROM</span> emp; #SMITH <span class="number">5</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;HELLO,GOLANG&#x27;</span>,<span class="string">&#x27;GOLANG&#x27;</span>,<span class="string">&#x27;WORLD&#x27;</span>) <span class="keyword">FROM</span> dual; #HELLO,WORLD</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;hello world&#x27;</span>,<span class="number">7</span>); #world</span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;HELLO WORLD&#x27;</span>,<span class="string">&#x27;WORLD&#x27;</span>) <span class="keyword">FROM</span> dual; #<span class="number">7</span></span><br><span class="line"><span class="keyword">SELECT</span> STRCMP(<span class="string">&#x27;HELLO WORLD&#x27;</span>,<span class="string">&#x27;HELLO,GOLANG&#x27;</span>) <span class="keyword">FROM</span> dual; #<span class="number">-1</span></span><br><span class="line"><span class="keyword">SELECT</span> LTRIM(<span class="string">&#x27;    hello&#x27;</span>) <span class="keyword">FROM</span> dual; #hello </span><br></pre></td></tr></table></figure>



<h4 id="数学相关函数"><a href="#数学相关函数" class="headerlink" title="数学相关函数"></a>数学相关函数</h4><table>
<thead>
<tr>
<th align="left">ABS()</th>
<th align="left">绝对值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">BIN()</td>
<td align="left">转化二进制</td>
</tr>
<tr>
<td align="left">HEX()</td>
<td align="left">转化十六进制</td>
</tr>
<tr>
<td align="left">CONV(num,oldBase,newBase)</td>
<td align="left">转化进制</td>
</tr>
<tr>
<td align="left">CEILING()</td>
<td align="left">向上取整</td>
</tr>
<tr>
<td align="left">FLOOR()</td>
<td align="left">向下取整</td>
</tr>
<tr>
<td align="left">FORMAT(num,小数位数)</td>
<td align="left">保留小数位数,超出位四舍五入</td>
</tr>
<tr>
<td align="left">LEAST(num1,num2,num3)</td>
<td align="left">求最小值</td>
</tr>
<tr>
<td align="left">MOD(numerator,denominator)</td>
<td align="left">求余</td>
</tr>
<tr>
<td align="left">RAND([seed])</td>
<td align="left">随机数，范围是[0 , 1.0]</td>
</tr>
</tbody></table>
<h4 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h4><table>
<thead>
<tr>
<th>CURRENT_DATE()</th>
<th>当前日期</th>
</tr>
</thead>
<tbody><tr>
<td>CURRENT_TIME**()**</td>
<td>当前时间</td>
</tr>
<tr>
<td>DATE(datetime)</td>
<td>返回datetime的日期部分</td>
</tr>
<tr>
<td>DATE_ADD(date,INTERVAL d_value d_type)</td>
<td>date基础上加上日期或时间</td>
</tr>
<tr>
<td>DATE_SUB(date,INTERVAL d_value d_type)</td>
<td>date基础上减去日期或时间</td>
</tr>
<tr>
<td>DATEDIFF(date1,date2)</td>
<td>时间差</td>
</tr>
<tr>
<td>NOW()</td>
<td>当前时间</td>
</tr>
<tr>
<td>YEAR | MONTH | DAY| DATE(datetime)</td>
<td>年月日</td>
</tr>
<tr>
<td>UNIX_TIMESTAMP()；</td>
<td>返回1970-1-1到现在的秒数</td>
</tr>
<tr>
<td>FROM_UNIXTIME()</td>
<td>可以把unix_timestamp转化成指定格式日期</td>
</tr>
</tbody></table>
<ul>
<li>DATE_ADD后面可以是year，minute，second，day</li>
<li>DATEDIFF(date1,date2)得到的是天数，是date1-date2的天数，可以取负数</li>
<li>DATE，DATE_ADD，DATE_SUB，DATEDIFF的日期类型可以是date。datetime，timestamp</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>,<span class="built_in">CURRENT_TIME</span>,<span class="built_in">CURRENT_TIMESTAMP</span>,<span class="built_in">CURRENT_USER</span> <span class="keyword">FROM</span> dual;</span><br><span class="line">#   <span class="number">2023</span><span class="number">-07</span><span class="number">-28</span>       <span class="number">18</span>:<span class="number">49</span>:<span class="number">02</span>  <span class="number">2023</span><span class="number">-07</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">49</span>:<span class="number">02</span> root<span class="variable">@localhost</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mes(</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    content <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    send_time DATETIME</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mes <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;北京新闻&#x27;</span>,<span class="built_in">CURRENT_TIMESTAMP</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mes <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;上海新闻&#x27;</span>,<span class="string">&#x27;2020-11-11&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mes <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;天津新闻&#x27;</span>,NOW());</span><br><span class="line"></span><br><span class="line">#只显示日期不显示时间</span><br><span class="line"><span class="keyword">select</span> id,content,<span class="type">DATE</span>(send_time) <span class="keyword">from</span> mes;</span><br><span class="line">#查询<span class="number">10</span>min内发布的新闻</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> mes <span class="keyword">where</span> DATE_ADD (send_time , <span class="type">INTERVAL</span> <span class="number">10</span> <span class="keyword">MINUTE</span>) <span class="operator">&gt;=</span> NOW() <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> mes <span class="keyword">where</span> DATE_SUB (NOW() , <span class="type">INTERVAL</span> <span class="number">10</span> <span class="keyword">MINUTE</span>) <span class="operator">&lt;=</span> send_time <span class="keyword">from</span> dual;</span><br><span class="line">#<span class="number">2011</span><span class="number">-11</span><span class="number">-11</span>与<span class="number">1990</span><span class="number">-1</span><span class="number">-1</span>相差多少天</span><br><span class="line"><span class="keyword">select</span> datediff(<span class="string">&#x27;2011-11-11&#x27;</span>,<span class="string">&#x27;1990-1-1&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line">#格式化</span><br><span class="line"><span class="keyword">select</span> from_unixtime(unix_timestamp(),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>); #<span class="number">2023</span><span class="number">-07</span><span class="number">-28</span> <span class="number">19</span>:<span class="number">25</span>:<span class="number">35</span></span><br></pre></td></tr></table></figure>



<h4 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h4><table>
<thead>
<tr>
<th><strong>USER()</strong></th>
<th><strong>查询用户</strong></th>
</tr>
</thead>
<tbody><tr>
<td>DATABASE()</td>
<td>数据库名称</td>
</tr>
<tr>
<td>MD5(str)</td>
<td>从字符串算出一个MD5 32的字符串，(用户密码)加密</td>
</tr>
<tr>
<td>PASSWORD(str)  [SQL8.0已移除]<br />SHA1(str)</td>
<td>从原文密码str计算并返回密码字符串，常用于对MySQL数据库的用户密码加密</td>
</tr>
<tr>
<td><code> select*from mysql.user \G</code></td>
<td>从原文密码str计算并返回密码字符串</td>
</tr>
</tbody></table>
<h4 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h4><table>
<thead>
<tr>
<th>IF (expr1，expr2，expr3)</th>
<th>expr1为true返回expr2.否则返回expr3</th>
</tr>
</thead>
<tbody><tr>
<td>IFNULL(expr1,expr2)</td>
<td>expr1部位空null返expr1，否则返回expr2</td>
</tr>
<tr>
<td>select case WHEN expr1 THEN expr2  WHEN expr3 THEN expr4 ELSE expr5；</td>
<td>类似于其他语言switch函数</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询emp表comm，如果为null，显示0.0</span></span><br><span class="line"><span class="comment">-- 判断要用 is [not] null</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,IF(comm <span class="keyword">IS</span> <span class="keyword">NULL</span>,<span class="number">0.0</span>,comm) <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>





<h3 id="查询补充"><a href="#查询补充" class="headerlink" title="查询补充"></a>查询补充</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="comment">-- 查找1992.1.1后入职的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> subdate(hiredate,<span class="string">&#x27;1992-1-1&#x27;</span>)<span class="operator">&gt;</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> hiredate<span class="operator">&lt;=</span><span class="string">&#x27;1992-01-01&#x27;</span>;</span><br><span class="line"><span class="comment">-- mysql中日期类型写可以直接比较</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">LIKE</span> </span><br><span class="line">​	<span class="operator">%</span> :表示<span class="number">0</span>到多个字符</span><br><span class="line">​	_ :表示单个字符</span><br><span class="line"><span class="comment">-- 显示首字母S的员工姓名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;S%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 显示第三个字符为大写O的所有员工项目和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> ename <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;__O%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">IS</span></span><br><span class="line"><span class="comment">-- 显示没有上级的雇员情况</span></span><br><span class="line"><span class="keyword">SELECT</span> ename <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> mgr <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- order by</span></span><br><span class="line"><span class="comment">-- 按照工资的从低到高显示雇员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">ASC</span> ;</span><br><span class="line"><span class="comment">-- 对部门号升序且工资降序排序，显示雇员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> deptno <span class="keyword">ASC</span> ,sal <span class="keyword">DESC</span> ;</span><br></pre></td></tr></table></figure>



<h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a><strong>分页查询</strong></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ...limit <span class="keyword">start</span> , <span class="keyword">rows</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> empno  LIMIT 每页显示的记录数<span class="operator">*</span>(第几页<span class="number">-1</span>),每页记录数;</span><br><span class="line"><span class="comment">-- 表示从start+1行开始取，取出rows行，start从0开始算</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 按雇员id升序取出，每页3条记录，分别显示第一页，第二页，第三页</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> empno LIMIT <span class="number">0</span>,<span class="number">3</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> empno LIMIT <span class="number">1</span>,<span class="number">3</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> empno LIMIT <span class="number">2</span>,<span class="number">3</span>;</span><br><span class="line"><span class="comment">-- 按雇员id降序取出，每页5条记录，显示第三页，第五页对应的sql语句</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> empno <span class="keyword">DESC</span> LIMIT <span class="number">20</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure>



<h4 id="增强group-by的使用"><a href="#增强group-by的使用" class="headerlink" title="增强group by的使用"></a><strong>增强group by的使用</strong></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 显示每种岗位的雇员总数，平均工资</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),<span class="built_in">avg</span>(sal),job <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job;</span><br><span class="line"><span class="comment">-- 显示雇员总数，以及获得补助的雇员数</span></span><br><span class="line">    <span class="comment">-- count()中为null的人默认不会统计进去</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),<span class="built_in">count</span>(comm) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 统计没有获得补助的雇员</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),<span class="built_in">count</span>(if(comm <span class="keyword">is</span> <span class="keyword">null</span>,<span class="literal">true</span>,<span class="keyword">null</span>)) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 显示管理者的总人数</span></span><br><span class="line"><span class="keyword">select</span>  <span class="built_in">count</span>(<span class="keyword">distinct</span> mgr) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 显示雇员工资的最大差额</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(sal)<span class="operator">-</span><span class="built_in">min</span>(sal) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>



<h4 id="多子句查询"><a href="#多子句查询" class="headerlink" title="多子句查询"></a><strong>多子句查询</strong></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1,col2... <span class="keyword">FROM</span> <span class="keyword">table</span> </span><br><span class="line">    	<span class="keyword">GROUP</span> <span class="keyword">BY</span> col</span><br><span class="line">    	<span class="keyword">HAVING</span> <span class="keyword">condition</span></span><br><span class="line">    	<span class="keyword">ORDER</span> <span class="keyword">BY</span> col</span><br><span class="line">    	LIMIT <span class="keyword">start</span>,<span class="keyword">rows</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 统计各个部门[group by]的平均工资[avg]，</span></span><br><span class="line"><span class="comment">-- 并且大于1000的[having],</span></span><br><span class="line"><span class="comment">-- 并且按照平均工资从低到高排序[order by]，</span></span><br><span class="line"><span class="comment">-- 取出前两行数据[Limit]</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno ,<span class="built_in">AVG</span>(sal) <span class="keyword">AS</span> avg_sal <span class="keyword">FROM</span> emp</span><br><span class="line">                                   <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno</span><br><span class="line">                                   <span class="keyword">HAVING</span> avg_sal<span class="operator">&gt;</span><span class="number">1000</span></span><br><span class="line">                                   <span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_sal <span class="keyword">DESC</span></span><br><span class="line">                                   LIMIT <span class="number">0</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure>







<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p> <strong>部员表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#部员表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept</span><br><span class="line">(</span><br><span class="line">    deptno MEDIUMINT   <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    dname  <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    loc    <span class="type">VARCHAR</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept</span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;ACCOUNTING&#x27;</span>, <span class="string">&#x27;NEW YORK&#x27;</span>),</span><br><span class="line">           (<span class="number">20</span>, <span class="string">&#x27;RESEARCH&#x27;</span>, <span class="string">&#x27;DALLAS&#x27;</span>),</span><br><span class="line">           (<span class="number">30</span>, <span class="string">&#x27;SALES&#x27;</span>, <span class="string">&#x27;CHICAGO&#x27;</span>),</span><br><span class="line">           (<span class="number">40</span>, <span class="string">&#x27;OPERATIONS&#x27;</span>, <span class="string">&#x27;BOSHTON&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> dept;</span><br></pre></td></tr></table></figure>



<p><strong>雇员表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#雇员表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp</span><br><span class="line">(</span><br><span class="line">    empno    MEDIUMINT UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,  #编号</span><br><span class="line">    ename    <span class="type">VARCHAR</span>(<span class="number">20</span>)        <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>, #名字</span><br><span class="line">    job      <span class="type">VARCHAR</span>(<span class="number">9</span>)         <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>, #工作</span><br><span class="line">    mgr      MEDIUMINT UNSIGNED,				    #上级编号</span><br><span class="line">    hiredate <span class="type">DATE</span>               <span class="keyword">NOT</span> <span class="keyword">NULL</span>, 		     #入职时间</span><br><span class="line">    sal      <span class="type">DECIMAL</span>(<span class="number">7</span>, <span class="number">2</span>)      <span class="keyword">NOT</span> <span class="keyword">NULL</span>,			#薪水</span><br><span class="line">    comm     <span class="type">DECIMAL</span>(<span class="number">7</span>, <span class="number">2</span>),						   #红利</span><br><span class="line">    deptno   MEDIUMINT UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>   #部门编号</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp</span><br><span class="line">        <span class="keyword">VALUES</span>(<span class="number">7369</span>,<span class="string">&#x27;SMITH&#x27;</span>,<span class="string">&#x27;CLERK&#x27;</span>,<span class="number">7902</span>,<span class="string">&#x27;1990-12-17&#x27;</span>,<span class="number">800.00</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">              (<span class="number">7499</span>,<span class="string">&#x27;ALLEN&#x27;</span>,<span class="string">&#x27;SALESMAN&#x27;</span>,<span class="number">7698</span>,<span class="string">&#x27;1991-2-20&#x27;</span>,<span class="number">1600.00</span>,<span class="number">300.00</span>,<span class="number">30</span>),</span><br><span class="line">              (<span class="number">7521</span>,<span class="string">&#x27;WARD&#x27;</span>,<span class="string">&#x27;SALESMAN&#x27;</span>,<span class="number">7698</span>,<span class="string">&#x27;1991-2-22&#x27;</span>,<span class="number">1250.00</span>,<span class="number">500.00</span>,<span class="number">30</span>),</span><br><span class="line">              (<span class="number">7566</span>,<span class="string">&#x27;JONES&#x27;</span>,<span class="string">&#x27;MANAGER&#x27;</span>,<span class="number">7839</span>,<span class="string">&#x27;1991-4-2&#x27;</span>,<span class="number">2975.00</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">              (<span class="number">7654</span>,<span class="string">&#x27;MARTIN&#x27;</span>,<span class="string">&#x27;SALESMAN&#x27;</span>,<span class="number">7698</span>,<span class="string">&#x27;1991-9-28&#x27;</span>,<span class="number">1250.00</span>,<span class="number">1400.00</span>,<span class="number">30</span>),</span><br><span class="line">              (<span class="number">7698</span>,<span class="string">&#x27;BLAKE&#x27;</span>,<span class="string">&#x27;MANAGER&#x27;</span>,<span class="number">7839</span>,<span class="string">&#x27;1991-5-1&#x27;</span>,<span class="number">2850.00</span>,<span class="keyword">NULL</span>,<span class="number">30</span>),</span><br><span class="line">              (<span class="number">7782</span>,<span class="string">&#x27;CLARK&#x27;</span>,<span class="string">&#x27;MANAGER&#x27;</span>,<span class="number">7839</span>,<span class="string">&#x27;1991-6-9&#x27;</span>,<span class="number">2450.00</span>,<span class="keyword">NULL</span>,<span class="number">10</span>),</span><br><span class="line">              (<span class="number">7788</span>,<span class="string">&#x27;SCOTT&#x27;</span>,<span class="string">&#x27;ANALYST&#x27;</span>,<span class="number">7566</span>,<span class="string">&#x27;1991-4-19&#x27;</span>,<span class="number">3000.00</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">              (<span class="number">7839</span>,<span class="string">&#x27;KING&#x27;</span>,<span class="string">&#x27;PRESIDENT&#x27;</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;1991-11-17&#x27;</span>,<span class="number">5000.00</span>,<span class="keyword">NULL</span>,<span class="number">10</span>),</span><br><span class="line">              (<span class="number">7844</span>,<span class="string">&#x27;TURNER&#x27;</span>,<span class="string">&#x27;SALESMAN&#x27;</span>,<span class="number">7698</span>,<span class="string">&#x27;1991-9-8&#x27;</span>,<span class="number">1500.00</span>,<span class="keyword">NULL</span>,<span class="number">30</span>),</span><br><span class="line">              (<span class="number">7900</span>,<span class="string">&#x27;JAMES&#x27;</span>,<span class="string">&#x27;CLERK&#x27;</span>,<span class="number">7698</span>,<span class="string">&#x27;1991-12-3&#x27;</span>,<span class="number">950.00</span>,<span class="keyword">NULL</span>,<span class="number">30</span>),</span><br><span class="line">              (<span class="number">7902</span>,<span class="string">&#x27;FORD&#x27;</span>,<span class="string">&#x27;ANALYST&#x27;</span>,<span class="number">7566</span>,<span class="string">&#x27;1991-12-3&#x27;</span>,<span class="number">3000.00</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),</span><br><span class="line">              (<span class="number">7934</span>,<span class="string">&#x27;MILLER&#x27;</span>,<span class="string">&#x27;CLERK&#x27;</span>,<span class="number">7782</span>,<span class="string">&#x27;1991-1-23&#x27;</span>,<span class="number">1300.00</span>,<span class="keyword">NULL</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong><img src="/./C:/Users/yu/Desktop/markdown/MySQL/MySQL%E7%AC%94%E8%AE%B0/GROUPBY_emp.png"></strong></p>
<p><strong>工资级别表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#工资级别表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> salgrade(</span><br><span class="line">    grade MEDIUMINT UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    losal <span class="type">DECIMAL</span>(<span class="number">17</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    hisal <span class="type">DECIMAL</span>(<span class="number">17</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salgrade </span><br><span class="line">	<span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">700</span>,<span class="number">1200</span>),</span><br><span class="line">    	  (<span class="number">2</span>,<span class="number">1201</span>,<span class="number">1400</span>),</span><br><span class="line">    	  (<span class="number">3</span>,<span class="number">1401</span>,<span class="number">2000</span>),</span><br><span class="line">    	  (<span class="number">4</span>,<span class="number">2001</span>,<span class="number">3000</span>),</span><br><span class="line">    	  (<span class="number">5</span>,<span class="number">3001</span>,<span class="number">9999</span>);</span><br></pre></td></tr></table></figure>



<h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><p><strong>笛卡尔积:两个表默认查询，第一张表每一行记录与第二张每一行记录组合</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> emp,dept; #<span class="number">13</span><span class="operator">*</span><span class="number">4</span><span class="operator">=</span><span class="number">52</span>默认查询出<span class="number">52</span>条记录，即笛卡尔积</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#显示雇员名,雇员工资以及所在的部门名字</span><br><span class="line">    <span class="comment">/*雇员名 雇员工资来自emp 部门名来自dept表*/</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,dname <span class="keyword">FROM</span> emp,dept <span class="keyword">where</span> emp.deptno<span class="operator">=</span>dept.deptno;</span><br><span class="line">#显示部门号为<span class="number">10</span>的部门名,员工名,工资</span><br><span class="line"><span class="keyword">SELECT</span> dname,ename,sal,emp.deptno <span class="keyword">FROM</span> emp,dept <span class="keyword">WHERE</span> emp.deptno<span class="operator">=</span>dept.deptno <span class="keyword">AND</span> 														 dept.deptno <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">#显示各个员工的姓名,工资,工资级别</span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,grade <span class="keyword">FROM</span> emp,salgrade <span class="keyword">WHERE</span> sal <span class="keyword">BETWEEN</span> losal <span class="keyword">AND</span> hisal;</span><br><span class="line"><span class="comment">-- 显示雇员名，雇员工资，雇员所在的部门名，并按部门降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,dname,emp.deptno </span><br><span class="line">				<span class="keyword">FROM</span> emp,dept </span><br><span class="line">                  <span class="keyword">WHERE</span> emp.deptno<span class="operator">=</span>dept.deptno  </span><br><span class="line">                  <span class="keyword">ORDER</span> <span class="keyword">BY</span>  dept.deptno <span class="keyword">DESC</span> ;</span><br></pre></td></tr></table></figure>



<h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>自连接指在同一张表的连接查询</p>
<p>将同一种表看作两张表</p>
<p><em>给表起别名</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 显示员工和上级名字</span></span><br><span class="line"><span class="keyword">SELECT</span> worker.ename , boss.ename </span><br><span class="line">		<span class="keyword">FROM</span> emp <span class="keyword">AS</span> worker , emp <span class="keyword">AS</span> boss </span><br><span class="line">		<span class="keyword">WHERE</span> worker.mgr <span class="operator">=</span> boss.empno;</span><br></pre></td></tr></table></figure>



<h3 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h3><ul>
<li>子查询是指嵌入在其他 <code>sql</code> 语句中的 <code>select</code> 语句，也叫嵌套查询</li>
<li>单行子查询是指返回一行数据的查询语句</li>
<li>多行子查询是返回多行数据的子查询，使用关键字 <code>IN</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询与SMITH同一部门的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>; #先找到SMITH的部门号</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>); #嵌套</span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询 和部门10的工作相同的雇员的名字，岗位，工资，部门号，但是不包含10号部门自己的雇员</span></span><br><span class="line"># <span class="number">1.</span>十号部门有哪些工作</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"># <span class="number">2.</span>把上面查询的结果当作子查询</span><br><span class="line"><span class="keyword">SELECT</span> ename,job,sal,deptno </span><br><span class="line">		<span class="keyword">FROM</span> emp</span><br><span class="line">		<span class="keyword">WHERE</span> job <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno<span class="operator">=</span><span class="number">10</span>) 							<span class="keyword">AND</span> deptno <span class="operator">!=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h4 id="子查询临时表"><a href="#子查询临时表" class="headerlink" title="子查询临时表"></a>子查询临时表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询ecshop中各类别中价格最高的商品</span></span><br><span class="line">#商品表</span><br><span class="line"><span class="keyword">SELECT</span> goods_id,cat_id,goods_name,shop_price <span class="keyword">FROM</span> ecs_goods; #临时表</span><br><span class="line">#得到各个类别中，价格最高的商品 max <span class="operator">+</span> <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line"><span class="keyword">SELECT</span> cat_id,<span class="built_in">MAX</span>(shop_price) <span class="keyword">FROM</span> ecs_goods <span class="keyword">GROUP</span> <span class="keyword">BY</span> cat_id;</span><br><span class="line"># 结果</span><br><span class="line"><span class="keyword">SELECT</span> goods_id,temp.cat_id,goods_name,shop_price </span><br><span class="line">	   	 <span class="keyword">FROM</span> ecs_goods,(</span><br><span class="line">    			<span class="keyword">SELECT</span> cat_id,<span class="built_in">MAX</span>(shop_price) <span class="keyword">AS</span> max_price</span><br><span class="line">   			 	<span class="keyword">FROM</span> ecs_goods </span><br><span class="line">    			<span class="keyword">GROUP</span> <span class="keyword">BY</span> cat_id</span><br><span class="line">         )  <span class="keyword">AS</span> temp</span><br><span class="line">		 <span class="keyword">WHERE</span> 	temp.cat_id <span class="operator">=</span> ecs_goods.cat_id <span class="keyword">AND</span> temp.max_price <span class="operator">=</span> ecs_goods.shop_price;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询每个部门的信息(部门名 编号 地址 人员数量)</span></span><br><span class="line"><span class="keyword">select</span> dname,dept.deptno,loc,temp.num</span><br><span class="line">    <span class="keyword">from</span> dept,(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> num,deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> temp</span><br><span class="line">    <span class="keyword">where</span> temp.deptno<span class="operator">=</span>dept.deptno;</span><br><span class="line"><span class="comment">-- 另一种写法</span></span><br><span class="line"><span class="keyword">select</span> temp.<span class="operator">*</span>,dname,loc</span><br><span class="line">    <span class="keyword">from</span> dept,(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> num,deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> temp</span><br><span class="line">    <span class="keyword">where</span> temp.deptno<span class="operator">=</span>dept.deptno;</span><br><span class="line"><span class="comment">-- 显示列 表名.* 可以全显示出来,前提是列名在多表查询中不重复   </span></span><br></pre></td></tr></table></figure>



<h4 id="ALL-和-ANY"><a href="#ALL-和-ANY" class="headerlink" title="ALL 和 ANY"></a>ALL 和 ANY</h4><p><strong>ALL</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 显示工资比部门30的所有员工的工资高的员工的姓名，工资，部门号</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal<span class="operator">&gt;</span><span class="keyword">ALL</span>(<span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno<span class="operator">=</span><span class="number">30</span>);</span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal<span class="operator">&gt;</span>(<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno<span class="operator">=</span><span class="number">30</span>);</span><br><span class="line"># <span class="keyword">WHERE</span> 后面不能直接跟聚合函数MAX </span><br></pre></td></tr></table></figure>

<p><strong>ANY</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 显示工资比部门30的其中一个员工的工资高的员工姓名，工资，部门号</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal<span class="operator">&gt;</span><span class="keyword">ANY</span>(<span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno<span class="operator">=</span><span class="number">30</span>);</span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal<span class="operator">&gt;</span>(<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno<span class="operator">=</span><span class="number">30</span>);</span><br></pre></td></tr></table></figure>



<h3 id="多列子查询"><a href="#多列子查询" class="headerlink" title="多列子查询"></a>多列子查询</h3><p>多列子查询指查询返回多个列数据的子查询语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(字段<span class="number">1</span>,字段<span class="number">2.</span>..)<span class="operator">=</span>(<span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2.</span>.. <span class="keyword">FROM</span> ...);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询与SMITH部门和岗位完全相同的所有雇员，不包含SMITH本人</span></span><br><span class="line"># 得到SMITH的部门和岗位</span><br><span class="line"><span class="keyword">SELECT</span> deptno,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span><span class="string">&#x27;SMITH&#x27;</span>;</span><br><span class="line">#把上面的查询当作子查询，并且使用多列子查询</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp</span><br><span class="line">    <span class="keyword">WHERE</span> (deptno, job) <span class="operator">=</span> (<span class="keyword">SELECT</span> deptno, job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>)</span><br><span class="line">    <span class="keyword">AND</span> ename <span class="operator">!=</span> <span class="string">&#x27;SMITH&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h3 id="表复制和去重"><a href="#表复制和去重" class="headerlink" title="表复制和去重"></a>表复制和去重</h3><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 表的复制</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_tab01</span><br><span class="line">(</span><br><span class="line">    id     <span class="type">INT</span>,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">    sal    <span class="keyword">DOUBLE</span>,</span><br><span class="line">    job    <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">    deptno <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_tab01;</span><br><span class="line"><span class="comment">-- 自我复制</span></span><br><span class="line"><span class="comment">-- 1.先把emp的表记录复制到 my_tab01</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_tab01 (id, name, sal, job, deptno)</span><br><span class="line">        <span class="keyword">SELECT</span> empno, ename, sal, job, deptno <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- 2.自我复制(行数每复制一次*2)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_tab01 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_tab01;</span><br></pre></td></tr></table></figure>

<h4 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建与待去重表一样结构的临时表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_tmp <span class="keyword">LIKE</span> my_tab01;</span><br><span class="line"><span class="comment">-- distinct 复制到临时表</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_tmp <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_tab01;</span><br><span class="line"><span class="comment">-- 清除记录</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> my_tab01;</span><br><span class="line"><span class="comment">-- 重新拷贝</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_tab01 <span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> my_tmp;</span><br><span class="line"><span class="comment">-- 释放内存</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> my_tmp;</span><br></pre></td></tr></table></figure>



<h3 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h3><p>实际应用中，为了合并多个select语句，可以使用集合操作符号<code>union</code> <code>union all</code></p>
<p><code>union all</code>操作符用于取得两个结果集的并集，使用该操作符时不会取消重复行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal<span class="operator">&gt;</span><span class="number">2500</span>;</span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job<span class="operator">=</span><span class="string">&#x27;MANAGER&#x27;</span>;</span><br><span class="line"><span class="comment">-- union all 将两个结果合并不会去重</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal<span class="operator">&gt;</span><span class="number">2500</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job<span class="operator">=</span><span class="string">&#x27;MANAGER&#x27;</span>;</span><br><span class="line"><span class="comment">-- union 会去重</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal<span class="operator">&gt;</span><span class="number">2500</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job<span class="operator">=</span><span class="string">&#x27;MANAGER&#x27;</span>;</span><br><span class="line"><span class="comment">-- or 会去重</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal<span class="operator">&gt;</span><span class="number">2500</span> <span class="keyword">OR</span>  job<span class="operator">=</span><span class="string">&#x27;MANAGER&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 列出部门名称和这些部门员工名称和工作，同时显示出那些没有员工的部门</span></span><br><span class="line"><span class="keyword">SELECT</span> dname,ename,job</span><br><span class="line">    <span class="keyword">FROM</span> emp,dept</span><br><span class="line">    <span class="keyword">WHERE</span> emp.deptno<span class="operator">=</span>dept.deptno <span class="keyword">ORDER</span> <span class="keyword">BY</span> dname;</span><br><span class="line">#部门有四个部门 上面<span class="keyword">sql</span>语句指挥显示出有员工的部门，所以最终显示出三个部门，无法显示没有员工的部门</span><br><span class="line">#这时候我们就需要外连接</span><br></pre></td></tr></table></figure>

<p>外连接</p>
<ul>
<li><p>左外连接 左侧的表完全显示就是左外连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> table1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> <span class="keyword">condition</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>右外连接 右侧的表完全显示就是左外连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> table1 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> <span class="keyword">condition</span></span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- stu 表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu</span><br><span class="line">(</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;jack&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;tom&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;kitty&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;nono&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stu表</span><br><span class="line">			1 	jack</span><br><span class="line">			2 	tom</span><br><span class="line">			3 	kitty</span><br><span class="line">			4 	nono</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- exam 表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> exam</span><br><span class="line">(</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    grade <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> exam <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">56</span>),(<span class="number">2</span>,<span class="number">76</span>),(<span class="number">11</span>,<span class="number">8</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exam表</span><br><span class="line">			1	56</span><br><span class="line">			2	76</span><br><span class="line">			11	8</span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用左外连接</span></span><br><span class="line"><span class="comment">-- 显示所有人的成绩 如果没有成绩也要显示人的姓名和id，成绩显示为空</span></span><br><span class="line"><span class="keyword">SELECT</span> name,stu.id,grade</span><br><span class="line">    <span class="keyword">FROM</span> stu,exam</span><br><span class="line">    <span class="keyword">WHERE</span> stu.id<span class="operator">=</span>exam.id;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">jack	1	56</span></span><br><span class="line"><span class="comment">tom		2	76</span></span><br><span class="line"><span class="comment">*/</span>    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#改成左外连接</span><br><span class="line"><span class="keyword">SELECT</span> name,stu.id,grade</span><br><span class="line">    <span class="keyword">FROM</span> stu <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> exam</span><br><span class="line">    <span class="keyword">ON</span> stu.id<span class="operator">=</span>exam.id;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">jack	1	56</span></span><br><span class="line"><span class="comment">tom		2	76</span></span><br><span class="line"><span class="comment">kitty	3	NULL</span></span><br><span class="line"><span class="comment">nono	4	NULL</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用右外连接</span></span><br><span class="line"><span class="comment">-- 显示所有成绩，如果没有名字匹配显示空</span></span><br><span class="line"><span class="keyword">SELECT</span> name,stu.id,grade</span><br><span class="line">    <span class="keyword">FROM</span> stu <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> exam</span><br><span class="line">    <span class="keyword">ON</span> stu.id<span class="operator">=</span>exam.id;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">jack	1		56</span></span><br><span class="line"><span class="comment">tom		2		76</span></span><br><span class="line"><span class="comment">NULL	NULL 	 8</span></span><br><span class="line"><span class="comment">*/</span>    </span><br></pre></td></tr></table></figure>

<p><strong>EXAMPLE</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--列出部门名称和这些部门的员工信息，同时列出那些没有员工的部门</span></span><br><span class="line">#左外连接</span><br><span class="line"><span class="keyword">SELECT</span> dname,ename,job</span><br><span class="line">    <span class="keyword">FROM</span> dept <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> emp</span><br><span class="line">    <span class="keyword">ON</span> emp.deptno<span class="operator">=</span>dept.deptno;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">dname		ename	job</span></span><br><span class="line"><span class="comment">ACCOUNTING	MILLER	CLERK</span></span><br><span class="line"><span class="comment">ACCOUNTING	KING	PRESIDENT</span></span><br><span class="line"><span class="comment">ACCOUNTING	CLARK	MANAGER</span></span><br><span class="line"><span class="comment">RESEARCH	FORD	ANALYST</span></span><br><span class="line"><span class="comment">RESEARCH	SCOTT	ANALYST</span></span><br><span class="line"><span class="comment">RESEARCH	JONES	MANAGER</span></span><br><span class="line"><span class="comment">RESEARCH	SMITH	CLERK</span></span><br><span class="line"><span class="comment">SALES		JAMES	CLERK</span></span><br><span class="line"><span class="comment">SALES		TURNER	SALESMAN</span></span><br><span class="line"><span class="comment">SALES		BLAKE	MANAGER</span></span><br><span class="line"><span class="comment">SALES		MARTIN	SALESMAN</span></span><br><span class="line"><span class="comment">SALES		WARD	SALESMAN</span></span><br><span class="line"><span class="comment">SALES		ALLEN	SALESMAN</span></span><br><span class="line"><span class="comment">OPERATIONS	NULL	NULL</span></span><br><span class="line"><span class="comment">*/</span>    </span><br><span class="line">#右外连接</span><br><span class="line"><span class="keyword">SELECT</span> ename,job,dname</span><br><span class="line">    <span class="keyword">FROM</span> emp <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> dept</span><br><span class="line">    <span class="keyword">ON</span> emp.deptno<span class="operator">=</span>dept.deptno;</span><br></pre></td></tr></table></figure>





<h2 id="MySQL约束"><a href="#MySQL约束" class="headerlink" title="MySQL约束"></a>MySQL约束</h2><p>约束用于数据库满足特定的商业规则</p>
<p>mysql中约束包括：<code>not null、unique、primary key、foreign key、check</code>五种</p>
<h3 id="主键-primary-key"><a href="#主键-primary-key" class="headerlink" title="主键 [primary key]"></a>主键 [primary key]</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">字段名 字段类型 <span class="keyword">primary</span> key</span><br></pre></td></tr></table></figure>

<p>用于唯一的表示表行的数据，当定义主键约束后，该列不能重复</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> primaryT</span><br><span class="line">(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY ,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 主键列值不可以重复</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> primaryT <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;jack@gmail.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> primaryT <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;tom@gmail.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> primaryT <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;false&#x27;</span>,<span class="string">&#x27;false@gmail.com&#x27;</span>);#重复</span><br><span class="line"></span><br><span class="line"># [<span class="literal">false</span>] Duplicate entry <span class="string">&#x27;2&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;primaryt.PRIMARY&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>primary key不能重复不能为null</p>
</li>
<li><p>一张表最多只能有一个主键，但可以是复合主键</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> primaryComplexKey</span><br><span class="line">(</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id,`name`)</span><br><span class="line">);</span><br><span class="line">#只有 id 和 name 同时重复才无法添加数据</span><br><span class="line"># id 和 name 有一个不一样，该列不算重复</span><br></pre></td></tr></table></figure>

<ul>
<li>逐渐的指定方式有两种</li>
</ul>
<p>​	1.字段名 类型 primary key</p>
<p>​	2.表的最后写 primary key(列名)</p>
<ul>
<li><em>使用<code>desc</code>表名，可以查看到primary key的情况</em></li>
</ul>
<h3 id="非空-not-null"><a href="#非空-not-null" class="headerlink" title="非空 [not null]"></a>非空 [not null]</h3><p>插入数据时必须提供数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">字段名 字段类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>



<h3 id="唯一-unique"><a href="#唯一-unique" class="headerlink" title="唯一  [unique]"></a>唯一  [unique]</h3><p>定义唯一约束后，该列值不能重复</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">字段名 字段类型 <span class="keyword">UNIQUE</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果没有指定not null 那么unique字段可以有多个null</li>
<li>一张表可以有多个unique字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> UniqueTable</span><br><span class="line">(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">UNIQUE</span> , <span class="comment">-- 表示id列是不可以重复</span></span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">32</span>), <span class="comment">-- 表示name列是不可以重复</span></span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> UniqueTable <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;jack@gmail.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> UniqueTable <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;tom@gmail.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#[<span class="literal">false</span>] Duplicate entry <span class="string">&#x27;1&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;uniquetable.id&#x27;</span></span><br></pre></td></tr></table></figure>



<p><strong>主键约束（primary key）</strong></p>
<ol>
<li>primary key用于唯一地标识表中的每一条记录，可以定义一列或多列为primary key</li>
<li>是不可能（或很难）更新</li>
<li>primary key列上没有任何两行具有相同值（即重复值），不允许空（NULL）</li>
<li>primary key可作外健，unique索引不可</li>
</ol>
<p><strong>唯一性约束（unique）</strong></p>
<ol>
<li>unique约束用来限制不受主键约束的列上的数据的唯一性，用于作为访问某行的可选手段，一个表上可以放置多个unique约束．</li>
<li>只要unique就可以更新．</li>
<li>即表中任意两行在 指定列上都不允许有相同的值，允许空（NULL）</li>
<li>一个表上可以放置多个unique</li>
</ol>
<h3 id="外键-foreign-key"><a href="#外键-foreign-key" class="headerlink" title="外键  [foreign key]"></a>外键  [foreign key]</h3><p>用于定义主表和从表关系：外键约束要定义在从表上，主表必须具有primary key或者unique，当定义外键约束后，要求外键列数据必须在主表的主键列存在或者为null</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FOREIGN</span> KEY(本表字段名) <span class="keyword">REFERENCES</span> 主表名 (主键名或<span class="keyword">unique</span>字段名)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 主表 class</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> class</span><br><span class="line">(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY ,</span><br><span class="line">    `name`  <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 从表 student</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student</span><br><span class="line">(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">primary</span> key,<span class="comment">-- 学生编号</span></span><br><span class="line">    `name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    class_id <span class="type">int</span>,<span class="comment">-- 班级编号</span></span><br><span class="line">    # 外键关系</span><br><span class="line">    <span class="keyword">foreign</span> key (class_id) <span class="keyword">references</span> class(id)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> class <span class="keyword">values</span>(<span class="number">100</span>,<span class="string">&#x27;java&#x27;</span>),(<span class="number">200</span>,<span class="string">&#x27;web&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">100</span>);#成功</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="number">200</span>);#成功</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;false&#x27;</span>,<span class="number">300</span>);#失败</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;false&#x27;</span>,<span class="keyword">null</span>);#成功</span><br></pre></td></tr></table></figure>

<ul>
<li><p>外键指向表的字段，必须是primary key或者unique</p>
</li>
<li><p>表的类型必须是innodb才支持外键</p>
</li>
<li><p>外键中列的数据类型必须和主表主键中对应列的数据类型相同，长度可不同</p>
</li>
<li><p>外键字段的值必须在主键字段中出现过，或者为null</p>
</li>
<li><p>一旦建立主外键关系，数据不能随意删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> class <span class="keyword">where</span> id<span class="operator">=</span><span class="number">100</span>;#<span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="约束键-check"><a href="#约束键-check" class="headerlink" title="约束键 [check]"></a>约束键 [check]</h3><p>用于强制行数据必须满足的条件，假定sal列定义了check约束并要求sal列值在1000~2000之间，如果不在就会报错</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> checkTab</span><br><span class="line">(</span><br><span class="line">    id     <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">    sex    <span class="type">VARCHAR</span>(<span class="number">6</span>) <span class="keyword">CHECK</span> ( sex <span class="keyword">IN</span> (<span class="string">&#x27;man&#x27;</span>, <span class="string">&#x27;women&#x27;</span>)),</span><br><span class="line">    sal    <span class="keyword">DOUBLE</span> <span class="keyword">CHECK</span> ( sal <span class="operator">&gt;</span> <span class="number">1000</span> <span class="keyword">AND</span> sal <span class="operator">&lt;</span> <span class="number">2000</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> checkTab <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;false&#x27;</span>,<span class="string">&#x27;man&#x27;</span>,<span class="number">1133223</span>);#<span class="literal">false</span></span><br></pre></td></tr></table></figure>





<h2 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h2><p>索引（Index）是帮助MySQL高效获取数据的数据结构，通俗来讲索引就好比书本的目录，加快数据库的查询速度。（MySQL官方对索引的定义）提高查询效率</p>
<p><strong>索引的优点</strong></p>
<p>提高查询效率，消除数据分组、排序，避免回表查询（索引覆盖），优化聚合查询， 用于多表JOIN关联查询， 利用唯一性约束，保证数据唯一性， InnoDB行锁实现。</p>
<p><strong>索引的缺点</strong></p>
<p>增加I&#x2F;O成本， 增加磁盘空间，不合适的索引或索引过多，会降低增删改的效率(DML)</p>
<p><strong>主键索引 [primary key] 主键就是一个索引</strong></p>
<p> <strong>唯一索引 [unique] 唯一键也是一种索引</strong></p>
<p> <strong>普通索引 [index]</strong></p>
<p> <strong>全文索引 [fulltext] 实际开发中使用全文搜索Solr 和 ElasticSearch(ES)</strong></p>
<h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p><strong>unique</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 唯一索引</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index id_index <span class="keyword">on</span> tableName(id);</span><br></pre></td></tr></table></figure>

<p><strong>index</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 普通索引</span><br><span class="line"><span class="keyword">create</span>  index id_index <span class="keyword">on</span> tableName(id);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tableName <span class="keyword">add</span> index id_index(id)；</span><br></pre></td></tr></table></figure>

<p>如果某列的值是不重复的就优先考虑unqiue索引，否则使用index普通索引</p>
<p><strong>primary key</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 主键索引 建表时建索引</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `primaryKeyIndex`</span><br><span class="line">(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key ,</span><br><span class="line">    `name` <span class="type">varchar</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"># alert</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tableName <span class="keyword">add</span> <span class="keyword">primary</span> key  id_index(id)；</span><br></pre></td></tr></table></figure>



<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> index id_index <span class="keyword">on</span> tableName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> index  <span class="keyword">PRIMARY</span> <span class="keyword">on</span> tableName;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> TableName <span class="keyword">drop</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>



<h3 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h3><p>先删除重添加新索引</p>
<h3 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 前三种索引方式几乎一样</span></span><br><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> tableName;</span><br><span class="line"><span class="keyword">show</span> indexes <span class="keyword">from</span> tableName; </span><br><span class="line"><span class="keyword">show</span> keys <span class="keyword">from</span> tableName; </span><br><span class="line"><span class="comment">-- 第四种显示较简略</span></span><br><span class="line"><span class="keyword">desc</span> tableName;</span><br></pre></td></tr></table></figure>



<h2 id="MySQL事务"><a href="#MySQL事务" class="headerlink" title="MySQL事务"></a>MySQL事务</h2><h3 id="MySQL事务ACID"><a href="#MySQL事务ACID" class="headerlink" title="MySQL事务ACID"></a>MySQL事务ACID</h3><p>原子性(Atomicity) 原子性是指事务是一个不可分割的单位，事务中的操作要么发生，要么不发生</p>
<p>一致性(Consistency) 事务必须使数据库从一个一致性状态换到另外一个一致性的状态</p>
<p>隔离性(Lsolation) 事务的隔离性是指多个用户并发访问数据库时，数据库为每一个用户开启一个事务，不能被其他事务的操作数据干扰，多个并发事务间要相互隔离</p>
<p>持久性(Durability) 持久性是指一个事务一旦被提交，它对数据库的改变就是永久性，接下来即使数据库发生故障也不应该对其有任何影响</p>
<h3 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h3><p>事务用于保证数据的一致性，它由一组dml语句组成，改组的dml(update insert delete)要么全成功，要么全失败</p>
<p>事务加锁，用户执行事务处理语句(dml)，mysql会加锁，防止其他用户修改表的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction <span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">savepoint</span> 保存点名 <span class="comment">-- 设置保存点</span></span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> 保存点名 <span class="comment">-- 回退事务</span></span><br><span class="line"><span class="keyword">rollback</span> <span class="comment">-- 回退全部事务</span></span><br><span class="line"><span class="keyword">commit</span> <span class="comment">-- 提交事务，所有的操作生效，不能回退</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `transaction`</span><br><span class="line">(</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 保存点a</span></span><br><span class="line"><span class="keyword">savepoint</span> a;</span><br><span class="line"><span class="comment">-- dml</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `transaction` <span class="keyword">values</span>(<span class="number">100</span>,<span class="string">&#x27;nameA&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 保存点b</span></span><br><span class="line"><span class="keyword">savepoint</span> b;</span><br><span class="line"><span class="comment">-- dml</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `transaction` <span class="keyword">values</span>(<span class="number">100</span>,<span class="string">&#x27;nameB&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回退</span></span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> b;</span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> a;</span><br><span class="line">#直接回退到a点后无法再返回b点，回退到a点会删除中间所有的<span class="keyword">savepoint</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line">#提交事务，无法返回事务区间内所有<span class="keyword">savePoint</span></span><br></pre></td></tr></table></figure>

<p>注意事项</p>
<ul>
<li>不开启事务默认情况dml自动提交不能回滚</li>
<li>开启一个事务没有savepoint也可以直接用rollback回滚到事务开始点</li>
<li>mysql事务记住需要innodb的存储引擎</li>
<li>开启一个事务 start transaction或者set autocommit&#x3D;off；</li>
</ul>
<h2 id="MySQL隔离"><a href="#MySQL隔离" class="headerlink" title="MySQL隔离"></a><strong>MySQL隔离</strong></h2><p><strong>多个连接开启各自事务操作数据库中的数据时，数据库系统要负责隔离操作，以保证各个连接在获取数据时的准确性，如果不隔离会引发<em>脏读，不可重复读，幻读</em></strong></p>
<p>**脏读(<em>dirty read</em>)**：当一个事务读取另一个事务尚未提交的修改时，产生脏读</p>
<p>**不可重复读(<em>nonrepeatable rea</em>d)**: 同一查询再同一事物种多次进行，由于其他提交的事务所作的修改或删除，每次返回不同的结果集，此时发生不可重复读</p>
<p><strong>幻读(<em>phantom read</em>)</strong>: 同一查询在同一事事务中多次进行，由于其他提交的事务所做的插入操作，每次返回不同的结果集，此时发生幻读</p>
<h3 id="查看隔离级别"><a href="#查看隔离级别" class="headerlink" title="查看隔离级别"></a>查看隔离级别</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查看 当前会话 隔离级别</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@transaction_isolation</span></span><br><span class="line">#查看 当前系统 隔离级别</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@global</span>.transaction_isolation;</span><br></pre></td></tr></table></figure>

<h3 id="修改隔离级别"><a href="#修改隔离级别" class="headerlink" title="修改隔离级别"></a>修改隔离级别</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#修改 当前会话 隔离级别</span><br><span class="line"><span class="keyword">set</span> session transaction isolation level read committed;</span><br><span class="line">#修改 当前系统 隔离级别</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> session transaction isolation level read committed;</span><br></pre></td></tr></table></figure>

<p>mysql默认事务的隔离级别是repeatable read足以满足大部分项目需求</p>
<h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p>MySQL隔离级别定义了事务与事务间的隔离程度</p>
<table>
<thead>
<tr>
<th><strong>MySQL隔离级别</strong></th>
<th><strong>脏读</strong></th>
<th><strong>不可重复读</strong></th>
<th><strong>幻读</strong></th>
<th><strong>加锁读</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>读未提交(Read uncommitted)</strong></td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>不加锁</td>
</tr>
<tr>
<td><strong>读已提交(Read committed)</strong></td>
<td>×</td>
<td>√</td>
<td>√</td>
<td>不加锁</td>
</tr>
<tr>
<td><strong>可重复读(Repeatable read)</strong></td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>不加锁</td>
</tr>
<tr>
<td><strong>可串行化(Serializable)</strong></td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>加锁</td>
</tr>
</tbody></table>
<ul>
<li>√ 可能出现</li>
<li>× 不会出现</li>
</ul>
<p><strong>开启两个mysql的控制台</strong></p>
<p><strong>查询当前隔离级别</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@transaction_isolation</span></span><br></pre></td></tr></table></figure>

<p>控制台1</p>
<p>+———————————–+<br>| @@transaction_isolation   |<br>+———————————–+<br>| REPEATABLE-READ         |<br>+————————————+</p>
<p>控制台2</p>
<p>+———————————–+<br>| @@transaction_isolation   |<br>+———————————–+<br>| REPEATABLE-READ         |<br>+————————————+</p>
<h3 id="读未提交-Read-uncommitted"><a href="#读未提交-Read-uncommitted" class="headerlink" title="读未提交 Read uncommitted"></a>读未提交 Read uncommitted</h3><p><em>会出现脏读 幻读 不可重复读</em></p>
<p>把其中一个控制台隔离级别设置成<strong>Read uncommitted</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> session transaction isolation level read uncommitted ;</span><br></pre></td></tr></table></figure>

<p> <strong>read uncommitted</strong>控制台</p>
<p>+———————————–+<br>| @@transaction_isolation   |<br>+———————————–+<br>| READ-UNCOMMITTED    |<br>+————————————+</p>
<p> <strong>repeatable read</strong>控制台</p>
<p>+———————————–+<br>| @@transaction_isolation   |<br>+———————————–+<br>| REPEATABLE-READ         |<br>+————————————+</p>
<p><strong>两控制台均启动事务</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br></pre></td></tr></table></figure>



<p><em><strong>创建表</strong></em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `account`</span><br><span class="line">(</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    `name` <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">    money <span class="type">INT</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>





<p>repeatable read控制台 <em>添加数据</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account <span class="keyword">values</span> (<span class="number">100</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>未提交但控制台 <strong>read uncommitted</strong> (隔离级别读未提交)显示出来了</p>
<p>+——+——+———–+<br>| id   | name | money  |<br>+——+——+———–+<br>|  100 | tom  |  1000   |<br>+——+——+———–+</p>
<p>发生了<em>脏读</em>，一个事务读取到了另一个事务未提交的修改</p>
<p><strong>repeatable read</strong> <em>添加数据修改数据后提交</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money<span class="operator">=</span><span class="number">800</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">100</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account <span class="keyword">values</span> (<span class="number">200</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>

<p><strong>read uncommitted查询看到了结果</strong></p>
<p>+——+——+———–+<br>| id   | name | money  |<br>+——+——+———–+<br>|  100 | tom  |   800    |<br>|  200 | jack |  2000    |<br>+——+——+———–+</p>
<p>修改和添加提交后控制台1看到了，发生了<em>不可重复读和幻读</em>，隔离级别高了如Repeatable read和Serializable不会发生不可重复读和幻读，其他事务的commit不会影响到本事务</p>
<h3 id="读已提交-read-uncommitted"><a href="#读已提交-read-uncommitted" class="headerlink" title="读已提交 read uncommitted"></a>读已提交 read uncommitted</h3><p>不会出现脏读，会幻读 不可重复读</p>
<p><strong>启动事务</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br></pre></td></tr></table></figure>



<p> <strong>read committed</strong>  <em>控制台设置隔离级别</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> session transaction isolation level read committed;</span><br></pre></td></tr></table></figure>



<p><strong>repeatable read</strong>控制台<em>添加数据</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account <span class="keyword">values</span> (<span class="number">300</span>,<span class="string">&#x27;scott&#x27;</span>,<span class="number">8000</span>);</span><br></pre></td></tr></table></figure>



<p> <strong>read committed</strong> <em>查询控制台</em></p>
<p>发现无法看见记录 说明没有发生脏读</p>
<p><code>mysql&gt; select *from account;</code><br><code>Empty set (0.00 sec)</code></p>
<p> <strong>repeatable read</strong>  <em>控制台修改数据</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money<span class="operator">=</span><span class="number">7000</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">300</span>;</span><br></pre></td></tr></table></figure>

<p>read committed控制台也能查询到，说明read committed级别会发生<em>不可重复读和幻读</em></p>
<h3 id="可重复读-repeatable-read"><a href="#可重复读-repeatable-read" class="headerlink" title="可重复读 repeatable read"></a>可重复读 repeatable read</h3><p>不会出现脏读 幻读 不可重复读</p>
<p> <strong>read committed</strong> 控制台<em>添加数据未提交</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account <span class="keyword">values</span> (<span class="number">100</span>,<span class="string">&#x27;first&#x27;</span>,<span class="number">9000</span>);</span><br></pre></td></tr></table></figure>



<p><strong>repeatable read</strong> 控制台无法查询到，没有出现脏读</p>
<p><code>mysql&gt; select *from account;</code><br><code>Empty set (0.00 sec)</code></p>
<p><strong>read committed</strong>  <em>控制台添加或修改数据并提交</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account <span class="keyword">values</span> (<span class="number">200</span>,<span class="string">&#x27;second&#x27;</span>,<span class="number">9000</span>);</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money<span class="operator">=</span><span class="number">8000</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">200</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>



<p>repeatable read 控制台无法查询到，没有出现不可重复读和幻读</p>
<p><strong><code>mysql&gt; select *from account;</code></strong><br><strong><code>Empty set (0.00 sec)</code></strong></p>
<h3 id="可串行读-serializable"><a href="#可串行读-serializable" class="headerlink" title="可串行读 serializable"></a>可串行读 serializable</h3><p>不会出现脏读 幻读 不可重复读 同时会加锁</p>
<p>一个事务操作时另一个事务无法操作，会卡住</p>
<p><strong>开启事务</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br></pre></td></tr></table></figure>



<p><strong>read committed</strong> 控制台<em>添加数据</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account <span class="keyword">values</span> (<span class="number">100</span>,<span class="string">&#x27;first&#x27;</span>,<span class="number">9000</span>);</span><br></pre></td></tr></table></figure>

<p>Serializable控制台会卡住，因为其他事务在使用，存在lock无法操作表</p>
<p>read committed <em>提交</em> <code>commit；</code></p>
<p><strong>Serializable</strong>控制台才显示结果，因为unlock了</p>
<h2 id="MySQL视图"><a href="#MySQL视图" class="headerlink" title="MySQL视图"></a>MySQL视图</h2><p>视图view是一个<strong>虚拟表</strong>，其内容由查询来定义，同真真实表一样，视图包含列，其数据对应真实表&#x2F;基表</p>
<p>是一种映射关系，提高了数据库一定的安全性</p>
<p>从<strong>一个或几个基本表（或视图）导出的表</strong>。它与基本表不同，是一个虚表。数据库中只存放视图的定义，而不存放视图对应的数据，这些数据仍存放在原来的基本表中。</p>
<p>所以<strong>一旦基本表中的数据发生变化，从视图中查询出的数据也就随之改变了</strong>。从这个意义上讲，<strong>视图就像一个窗口</strong>，透过它可以看到数据库中自己感兴趣的数据及其变化。</p>
<p>视图一经定义，就可以和基本表一样被查询、删除。也可以在一个视图之上再定义新的视图，但对视图的更新（增、删、改）操作则有一定的限制。</p>
<h3 id="视图的基本使用"><a href="#视图的基本使用" class="headerlink" title="视图的基本使用"></a>视图的基本使用</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#创建</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> ViewTable <span class="keyword">AS</span> <span class="keyword">SELECT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_view01 <span class="keyword">AS</span> <span class="keyword">SELECT</span> empno,ename,job,deptno <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> emp_view01;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#更新视图</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> ViewTable <span class="keyword">AS</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">update</span> myview <span class="keyword">set</span> comm<span class="operator">=</span><span class="number">200</span> <span class="keyword">where</span> empno<span class="operator">=</span><span class="number">7369</span>;</span><br><span class="line"></span><br><span class="line">#显示创建视图的指令</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> ViewTable</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">view</span> emp_view01;</span><br><span class="line"></span><br><span class="line">#删除视图</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> ViewTable1,ViewTable2</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> emp_view01;</span><br></pre></td></tr></table></figure>

<p><strong>视图细节讨论</strong></p>
<ul>
<li><p>创建视图后，到数据库去看，对应视图只有一个视图结构文件（形式：视图名.frm）</p>
</li>
<li><p>视图的数据变化会影响到基表，基表的数据变化也会影响到视图 [insert update delete]</p>
<p>—-针对前面的雇员管理系统—-<br>mysql&gt; <code>create view myview as select empno,ename,job,comm from emp;</code><br>mysql&gt; <code>select * from myview;</code><br>mysql&gt;<code>update myview set comm=200 where empno=7369;</code><strong>修改视图,对基表都有变化</strong><br>mysql&gt;<code>update emp set comm=100 where empno=7369;</code><strong>修改基表，对视频也有变化</strong></p>
</li>
</ul>
<h3 id="视图的最佳实践"><a href="#视图的最佳实践" class="headerlink" title="视图的最佳实践"></a>视图的最佳实践</h3><ul>
<li><strong>安全</strong>  一些数据表有着重要的信息，有些字段是保密的，不能让用户直接看到，这时就可以创建一个视图，在这张视图中只保留一部分学段。这样，用户就可以查询自己需要的字段，不能查看保密的字段。</li>
<li><strong>性能</strong>  关系数据库的数据常常会分表存储，使用外键建立这些表的之间关系。这时数据库查询通常会用到连接（JOIN）。这样做不但麻烦，效率相对也比较低。如果建立一个视图，将相关的表和字段组合在一起，就可以避免使用JOIN查询数据。</li>
<li><strong>灵活</strong>  如果系统中有一张旧的表，这张表由于设计的问题，即将被废弃。然而，很多应用都是基于这张表，不易修改。这时就可以建立一张视图，视图中的数据直接映射到新建的表。这样，就可以少做很多改动，也达到了升级数据表的自的</li>
</ul>
<h2 id="MySQL管理"><a href="#MySQL管理" class="headerlink" title="MySQL管理"></a>MySQL管理</h2><h3 id="MySQL的用户管理"><a href="#MySQL的用户管理" class="headerlink" title="MySQL的用户管理"></a>MySQL的用户管理</h3><p>mysql的用户存储在数据库mysql中的user表</p>
<p>不同数据库用户，登录到DBMS后，根据权限的不同，操作的库和数据对象(表，视图，触发器)不相同</p>
<p>字段说明</p>
<ul>
<li><strong>host</strong>    允许登录的位置，<strong>localhost</strong>表示该用户只允许本机登录，也可以指定ip，如192.168.1.100</li>
<li>**user **   用户名</li>
<li><strong>authentication_string</strong>    密码，是通过mysql的password()函数加密之后的密码,存放在user表中也是加密后的密码</li>
</ul>
<p><strong>创建用户</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;登陆位置&#x27;</span> INDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>删除用户</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;登陆位置&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>在创建用户的时候，如果不指定Host，则为%，%表示表示所有IP都有连接权限 <code>create user xxx;</code></li>
<li>你也可以这样指定 <code>create userxxx@&#39;192.168.1.%&#39;</code>表示xxx用户在192.168.1.*的ip可以登录mysg</li>
<li>在删除用户的时候，如果 host 不是 %,需要明确指定<code>&#39;用户&#39;@&#39;host值&#39;</code></li>
</ul>
<p><strong>登录</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql [-h 主机名 -P] 端口号 -u username -ppassword</span><br></pre></td></tr></table></figure>

<ul>
<li>-p 后直接输入密码，则不可以加空格，并且在这里输入密码，密码会显示出来，建议-p后按回车，命令行窗口就会自动跳到下一行：Enter password:</li>
<li>如果登录的是远端服务器的数据库，则得输入 mysql -h主机名 -P端口号 -u用户名 -p密码</li>
<li>注意，-P端口号，中的P是大写的，要跟密码前面的p（小写）区分开</li>
</ul>
<p><strong>修改密码</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#自己密码</span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;new password&#x27;</span>);</span><br><span class="line">#他人密码(需要有权限)</span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;登陆位置&#x27;</span> <span class="operator">=</span> PASSWORD(<span class="string">&#x27;new password&#x27;</span>);</span><br></pre></td></tr></table></figure>







<h3 id="MySQL的权限管理"><a href="#MySQL的权限管理" class="headerlink" title="MySQL的权限管理"></a>MySQL的权限管理</h3><h4 id="用户授权操作"><a href="#用户授权操作" class="headerlink" title="用户授权操作"></a>用户授权操作</h4><p><strong>授权</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">grand 权限列表 <span class="keyword">on</span> 库.对象名 <span class="keyword">to</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;登陆位置&#x27;</span> [identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>权限列表，多个权限用逗号分开</p>
<p><code>grant select on .....</code></p>
<p><code>grant select, delete, create on ....</code></p>
<p><code>grant all [privileges] on ....</code> &#x2F;&#x2F;表示赋予该用户在该对象上的所有权限</p>
</li>
<li><p>特别说明</p>
<p><strong>＊.＊</strong>  代表本系统中的所有数据库的所有对象(表，视图，存储过程)</p>
<p><strong>库.＊</strong> 表示某个数据库中的所有数据对象（表，视图，存储过程等)</p>
</li>
<li><p>identified by 可以省略，也可以写出</p>
<p>(1)如果用户存在，就是修改该用户的密码</p>
<p>(2)如果用户不存在，就是创建该用户</p>
</li>
</ul>
<p><strong>收回权限</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">revoke</span> 权限列表 <span class="keyword">on</span> 库.对象名 <span class="keyword">from</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;登陆位置&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>权限生效指令</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th align="left"><strong>权 限</strong></th>
<th align="left"><strong>作用范围</strong></th>
<th align="left"><strong>作 用</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>all</strong></td>
<td align="left">服务器</td>
<td align="left">所有权限</td>
</tr>
<tr>
<td align="left"><strong>select</strong></td>
<td align="left">表、列</td>
<td align="left">选择行</td>
</tr>
<tr>
<td align="left"><strong>insert</strong></td>
<td align="left">表、列</td>
<td align="left">插入行</td>
</tr>
<tr>
<td align="left"><strong>update</strong></td>
<td align="left">表、列</td>
<td align="left">更新行</td>
</tr>
<tr>
<td align="left"><strong>delete</strong></td>
<td align="left">表</td>
<td align="left">删除行</td>
</tr>
<tr>
<td align="left"><strong>create</strong></td>
<td align="left">数据库、表、索引</td>
<td align="left">创建</td>
</tr>
<tr>
<td align="left"><strong>drop</strong></td>
<td align="left">数据库、表、视图</td>
<td align="left">删除</td>
</tr>
<tr>
<td align="left"><strong>reload</strong></td>
<td align="left">服务器</td>
<td align="left">允许使用flush语句</td>
</tr>
<tr>
<td align="left"><strong>shutdown</strong></td>
<td align="left">服务器</td>
<td align="left">关闭服务</td>
</tr>
<tr>
<td align="left"><strong>process</strong></td>
<td align="left">服务器</td>
<td align="left">查看线程信息</td>
</tr>
<tr>
<td align="left"><strong>file</strong></td>
<td align="left">服务器</td>
<td align="left">文件操作</td>
</tr>
<tr>
<td align="left"><strong>grant option</strong></td>
<td align="left">数据库、表、存储过程</td>
<td align="left">授权</td>
</tr>
<tr>
<td align="left"><strong>references</strong></td>
<td align="left">数据库、表</td>
<td align="left">外键约束的父表</td>
</tr>
<tr>
<td align="left"><strong>index</strong></td>
<td align="left">表</td>
<td align="left">创建&#x2F;删除索引</td>
</tr>
<tr>
<td align="left"><strong>alter</strong></td>
<td align="left">表</td>
<td align="left">修改表结构</td>
</tr>
<tr>
<td align="left"><strong>show databases</strong></td>
<td align="left">服务器</td>
<td align="left">查看数据库名称</td>
</tr>
<tr>
<td align="left"><strong>super</strong></td>
<td align="left">服务器</td>
<td align="left">超级权限</td>
</tr>
<tr>
<td align="left"><strong>create temporary tables</strong></td>
<td align="left">表</td>
<td align="left">创建临时表</td>
</tr>
<tr>
<td align="left"><strong>lock tables</strong></td>
<td align="left">数据库</td>
<td align="left">锁表</td>
</tr>
<tr>
<td align="left"><strong>execute</strong></td>
<td align="left">存储过程</td>
<td align="left">执行</td>
</tr>
<tr>
<td align="left"><strong>replication client</strong></td>
<td align="left">服务器</td>
<td align="left">允许查看主&#x2F;从&#x2F;二进制日志状态</td>
</tr>
<tr>
<td align="left"><strong>replication slave</strong></td>
<td align="left">服务器</td>
<td align="left">主从复制</td>
</tr>
<tr>
<td align="left"><strong>create view</strong></td>
<td align="left">视图</td>
<td align="left">创建视图</td>
</tr>
<tr>
<td align="left"><strong>show view</strong></td>
<td align="left">视图</td>
<td align="left">查看视图</td>
</tr>
<tr>
<td align="left"><strong>create routine</strong></td>
<td align="left">存储过程</td>
<td align="left">创建存储过程</td>
</tr>
<tr>
<td align="left"><strong>alter routine</strong></td>
<td align="left">存储过程</td>
<td align="left">修改&#x2F;删除存储过程</td>
</tr>
<tr>
<td align="left"><strong>create user</strong></td>
<td align="left">服务器</td>
<td align="left">创建用户</td>
</tr>
<tr>
<td align="left"><strong>event</strong></td>
<td align="left">数据库</td>
<td align="left">创建&#x2F;更改&#x2F;删除&#x2F;查看事件</td>
</tr>
<tr>
<td align="left"><strong>trigger</strong></td>
<td align="left">表</td>
<td align="left">触发器</td>
</tr>
<tr>
<td align="left"><strong>create tablespace</strong></td>
<td align="left">服务器</td>
<td align="left">创建&#x2F;更改&#x2F;删除表空间&#x2F;日志文件</td>
</tr>
<tr>
<td align="left"><strong>proxy</strong></td>
<td align="left">服务器</td>
<td align="left">代理成为其它用户</td>
</tr>
<tr>
<td align="left"><strong>usage</strong></td>
<td align="left">服务器</td>
<td align="left">没有权限</td>
</tr>
</tbody></table>
<h4 id="MySQL权限说明"><a href="#MySQL权限说明" class="headerlink" title="MySQL权限说明"></a>MySQL权限说明</h4><h5 id="all-服务器"><a href="#all-服务器" class="headerlink" title="all,服务器"></a>all,服务器</h5><p>授予所有权限</p>
<h5 id="alter-表"><a href="#alter-表" class="headerlink" title="alter,表"></a>alter,表</h5><p>可以使用alter table来改变表的结构。alter table同时需要create和insert权限；重命名表需要旧表的alter和drop权限，新表的create和insert权限</p>
<h5 id="alter-routine-存储过程"><a href="#alter-routine-存储过程" class="headerlink" title="alter routine,存储过程"></a>alter routine,存储过程</h5><p>更改和删除存储过程(过程和函数)</p>
<h5 id="create-数据库-表-索引"><a href="#create-数据库-表-索引" class="headerlink" title="create,数据库&#x2F;表&#x2F;索引"></a>create,数据库&#x2F;表&#x2F;索引</h5><p>允许创建新的数据库和表以及索引</p>
<h5 id="create-routine-存储过程"><a href="#create-routine-存储过程" class="headerlink" title="create routine,存储过程"></a>create routine,存储过程</h5><p>允许创建存储过程(过程和函数)</p>
<h5 id="create-tablespace-服务器"><a href="#create-tablespace-服务器" class="headerlink" title="create tablespace,服务器"></a>create tablespace,服务器</h5><p>创建、更改或删除表空间和日志文件组</p>
<h5 id="create-temporary-tables-表"><a href="#create-temporary-tables-表" class="headerlink" title="create temporary tables,表"></a>create temporary tables,表</h5><p>使用create temporary table创建临时表。会话创建临时表后，不再对该表进行权限检查，创建会话可以对该表执行任何操作</p>
<h5 id="create-user-服务器"><a href="#create-user-服务器" class="headerlink" title="create user,服务器"></a>create user,服务器</h5><p>创建用户，允许使用alter user&#x2F;create user&#x2F;drop user&#x2F;rename user&#x2F;revoke all privileges语句对用户权限进行操作</p>
<h5 id="create-view-视图"><a href="#create-view-视图" class="headerlink" title="create view,视图"></a>create view,视图</h5><p>创建视图，允许使用create view语句</p>
<h5 id="delete-表"><a href="#delete-表" class="headerlink" title="delete,表"></a>delete,表</h5><p>允许删除行</p>
<h5 id="drop-数据库-表-视图"><a href="#drop-数据库-表-视图" class="headerlink" title="drop,数据库&#x2F;表&#x2F;视图"></a>drop,数据库&#x2F;表&#x2F;视图</h5><p>删除现有数据库、表和视图。在分区表使用alter table … drop partition语句，truncate table也需要drop权限。若将mysql库的drop权限授予用户，则该用户可以删除权限数据库</p>
<h5 id="event-数据库"><a href="#event-数据库" class="headerlink" title="event,数据库"></a>event,数据库</h5><p>创建、更改、删除或查看事件调度程序的事件</p>
<h5 id="execute-存储过程"><a href="#execute-存储过程" class="headerlink" title="execute,存储过程"></a>execute,存储过程</h5><p>执行存储过程(过程和函数)</p>
<h5 id="file-服务器"><a href="#file-服务器" class="headerlink" title="file,服务器"></a>file,服务器</h5><p>允许使用load data infile和select … into outfile语句以及load_file()函数。从5.7.17开始，create table语句中的data directory或者index directory选项也需要该权限</p>
<h5 id="grant-option-数据库-表-存储过程"><a href="#grant-option-数据库-表-存储过程" class="headerlink" title="grant option,数据库&#x2F;表&#x2F;存储过程"></a>grant option,数据库&#x2F;表&#x2F;存储过程</h5><p>授予其它用户或者从其它用户删除你所拥有的权限。 grant option权限使用户可以将其权限授予其他用户。具有不同特权和grant option权限的两个用户可以组合特权。</p>
<h5 id="index-表"><a href="#index-表" class="headerlink" title="index,表"></a>index,表</h5><p>创建或删除索引。适用于现有表，如果你具有create权限，则可以在创建表语句中包含索引定义</p>
<h5 id="insert-表-列"><a href="#insert-表-列" class="headerlink" title="insert,表&#x2F;列"></a>insert,表&#x2F;列</h5><p>插入行。analyze table&#x2F;optimize table&#x2F;repair table表维护语句也需要该权限</p>
<h5 id="lock-tables-数据库"><a href="#lock-tables-数据库" class="headerlink" title="lock tables,数据库"></a>lock tables,数据库</h5><p>锁表。使用lock tables语句显示的锁定你拥有select权限的表，包括写入锁，可以防止其它他话读取锁定的表</p>
<h5 id="process-服务器"><a href="#process-服务器" class="headerlink" title="process,服务器"></a>process,服务器</h5><p>显示线程信息。使用show processlist&#x2F;mysqladmin processlist查看其它用户的线程，还可以使用show engine语句</p>
<h5 id="proxy-服务器"><a href="#proxy-服务器" class="headerlink" title="proxy,服务器"></a>proxy,服务器</h5><p>代理权限。可以代理成为另一个用户</p>
<h5 id="references-数据库-表"><a href="#references-数据库-表" class="headerlink" title="references,数据库&#x2F;表"></a>references,数据库&#x2F;表</h5><p>创建外键约束的父表需要该权限</p>
<h5 id="reload-服务器"><a href="#reload-服务器" class="headerlink" title="reload,服务器"></a>reload,服务器</h5><p>允许使用flush语句。同进还启用等效的mysqladmin命令：flush-hosts,flush-logs,flush-privileges,flush-status,flush-tables,flush-threads,refresh和reload</p>
<h5 id="replication-client-服务器"><a href="#replication-client-服务器" class="headerlink" title="replication client,服务器"></a>replication client,服务器</h5><p>允许使用show master status&#x2F;show slave status&#x2F;show binary logs语句</p>
<h5 id="replication-slave-服务器"><a href="#replication-slave-服务器" class="headerlink" title="replication slave,服务器"></a>replication slave,服务器</h5><p>允许从服务器请求当前主服务器上的更新</p>
<h5 id="select-表-列"><a href="#select-表-列" class="headerlink" title="select,表&#x2F;列"></a>select,表&#x2F;列</h5><p>选择行。其他读取列的语句也需要该权限，如delete或update语句中where子句指定的列</p>
<h5 id="show-databases-服务器"><a href="#show-databases-服务器" class="headerlink" title="show databases,服务器"></a>show databases,服务器</h5><p>通过show databases语句查看数据库名称</p>
<h5 id="show-view-视图"><a href="#show-view-视图" class="headerlink" title="show view,视图"></a>show view,视图</h5><p>通过show create view语句查看视图，与explain一起使用的视图也需要此权限</p>
<h5 id="shutdown-服务器"><a href="#shutdown-服务器" class="headerlink" title="shutdown,服务器"></a>shutdown,服务器</h5><p>使用shutdown语句，mysqladmin关闭以及mysql_shutdown()函数</p>
<h5 id="super-服务器"><a href="#super-服务器" class="headerlink" title="super,服务器"></a>super,服务器</h5><p>通过修改全局系统变量来启用配置更改。对某些系统变量，设置会话值也需要该权限。binlog_format,sql_log_bin,sql_log_off<br>全局事务特性更改<br>启动和停止复制，包括组复制<br>允许使用change master to和change replication filter语句<br>二进制日志控制，purge binary logs和binlog语句<br>执行视图或存储程序时启用授权ID<br>允许使用create server,alter server和drop server语句<br>允许使用mysqladmin debug命令<br>启用innodb密钥轮换<br>使用des_encrypt()函数读取DES密钥文件<br>使用版本令牌用户定义函数<br>对非super帐户客户端连接的控制</p>
<blockquote>
<p>使用kill语句或者mysqladmin kill命令终止属于其他用户的线程<br>即使达到max_connections控制的连接限制，服务器也会授受来自super客户端的连接<br>即使使用了read_only系统变量，也可以执行更新<br>super客户端连接时，服务器不执行init_connect系统变量内容<br>处于脱机模式offline_mode的服务器不会终止super客户端的连接，并接受来自super客户端的新连接<br>如果启用二进制日志记录，可能还需要super权限创建或更改存储过程</p>
</blockquote>
<h5 id="trigger-服务器"><a href="#trigger-服务器" class="headerlink" title="trigger,服务器"></a>trigger,服务器</h5><p>触发器。创建、删除、执行、显示该表的触发器</p>
<h5 id="update-表-列"><a href="#update-表-列" class="headerlink" title="update,表&#x2F;列"></a>update,表&#x2F;列</h5><p>更新行</p>
<h5 id="usage-服务器"><a href="#usage-服务器" class="headerlink" title="usage,服务器"></a>usage,服务器</h5><p>没有任何权限</p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>9.1leetcode2240</title>
    <url>/2023/09/01/leetcode9-1/</url>
    <content><![CDATA[<p>You are given an integer <code>total</code> indicating the amount of money you have. You are also given two integers <code>cost1</code> and <code>cost2</code> indicating the price of a pen and pencil respectively. You can spend <strong>part or all</strong> of your money to buy multiple quantities (or none) of each kind of writing utensil.</p>
<p>Return <em>the <strong>number of distinct ways</strong> you can buy some number of pens and pencils.</em></p>
<span id="more"></span>

<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: total = 20, cost1 = 10, cost2 = 5</span><br><span class="line">Output: 9</span><br><span class="line">Explanation: The price of a pen is 10 and the price of a pencil is 5.</span><br><span class="line">- If you buy 0 pens, you can buy 0, 1, 2, 3, or 4 pencils.</span><br><span class="line">- If you buy 1 pen, you can buy 0, 1, or 2 pencils.</span><br><span class="line">- If you buy 2 pens, you cannot buy any pencils.</span><br><span class="line">The total number of ways to buy pens and pencils is 5 + 3 + 1 = 9.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: total = 5, cost1 = 10, cost2 = 10</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The price of both pens and pencils are 10, which cost more than total, so you cannot buy any writing utensils. Therefore, there is only 1 way: buy 0 pens and 0 pencils.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= total, cost1, cost2 &lt;= 106</code></li>
</ul>
<p>一个整数 <code>total</code> ，表示你拥有的总钱数。同时给你两个整数 <code>cost1</code> 和 <code>cost2</code> ，分别表示一支钢笔和一支铅笔的价格。你可以花费你部分或者全部的钱，去买任意数目的两种笔。</p>
<p>请你返回购买钢笔和铅笔的 <strong>不同方案数目</strong> 。</p>
<p>Resolution</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="comment">// 2240  2023-09-01 09:08:04</span></span><br><span class="line"><span class="comment">// leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">waysToBuyPensPencils</span><span class="params">(total <span class="type">int</span>, cost1 <span class="type">int</span>, cost2 <span class="type">int</span>)</span></span> <span class="type">int64</span> &#123;</span><br><span class="line">	ret, nums := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> nums*cost1 &lt;= total &#123;</span><br><span class="line">		ret += (total - nums*cost1) / cost2+<span class="number">1</span></span><br><span class="line">		nums++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="type">int64</span>(ret)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Go-Gin</title>
    <url>/2023/08/31/gin/</url>
    <content><![CDATA[<h1 id="Gin-框架的使用"><a href="#Gin-框架的使用" class="headerlink" title="Gin 框架的使用"></a>Gin 框架的使用</h1><p><strong>Gin</strong> 是一个用 <strong>Go (Golang)</strong> 编写的 HTTP Web 框架。 它具有类似 Martini 的 API，但性能比 Martini 快 40 倍。如果你需要极好的性能</p>
<span id="more"></span>

<h2 id="RESTful约定"><a href="#RESTful约定" class="headerlink" title="RESTful约定"></a>RESTful约定</h2><ul>
<li><code>GET</code>用来获取资源</li>
<li><code>POST</code>用来新建资源</li>
<li><code>PUT</code>用来更新资源</li>
<li><code>DELETE</code>用来删除资源。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Get&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.POST(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Post&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.PUT(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Put&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.DELETE(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Delete&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	err := r.Run()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="GIN渲染"><a href="#GIN渲染" class="headerlink" title="GIN渲染"></a>GIN渲染</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;html/template&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	<span class="comment">//自定义函数</span></span><br><span class="line">	r.SetFuncMap(template.FuncMap&#123;</span><br><span class="line">		<span class="string">&quot;safe&quot;</span>: <span class="function"><span class="keyword">func</span><span class="params">(str <span class="type">string</span>)</span></span> template.HTML &#123;</span><br><span class="line">			<span class="keyword">return</span> template.HTML(str)</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//加载静态文件css img</span></span><br><span class="line">	r.Static(<span class="string">&quot;/xxx&quot;</span>, <span class="string">&quot;./static&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//模板解析</span></span><br><span class="line">	<span class="comment">//r.LoadHTMLFiles(&quot;templates/get/index.tmpl&quot;, &quot;templates/put/index.tmpl&quot;)</span></span><br><span class="line">	r.LoadHTMLGlob(<span class="string">&quot;./templates/**/*&quot;</span>)</span><br><span class="line">	r.GET(<span class="string">&quot;/get/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123; <span class="comment">//模板渲染</span></span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;get/index.tmpl&quot;</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;title&quot;</span>: <span class="string">&quot;&lt;a href=&#x27;https://bilibili.com&#x27;&gt;bilibili&lt;/a&gt;&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.POST(<span class="string">&quot;/post/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123; <span class="comment">//模板渲染</span></span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;post/index.tmpl&quot;</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;title&quot;</span>: <span class="string">&quot;genshin&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.DELETE(<span class="string">&quot;/delete/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123; <span class="comment">//模板渲染</span></span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;delete/index.tmpl&quot;</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;title&quot;</span>: <span class="string">&quot;genshin&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//下载的模板返回</span></span><br><span class="line">	r.PUT(<span class="string">&quot;/put/home&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123; <span class="comment">//模板渲染</span></span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;home.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	err := r.Run(<span class="string">&quot;127.0.0.1:9090&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以POST为例,其他大同小异</p>
<p><code>./gin01template\templates\post\index.tmpl</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;define &quot;post/index.tmpl&quot;&#125;&#125;</span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>get<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;&#123;.title|safe&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// gin 返回json到前端</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/json&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//1.使用 map</span></span><br><span class="line">		data := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">			<span class="string">&quot;name&quot;</span>:    <span class="string">&quot;king&quot;</span>,</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">			<span class="string">&quot;age&quot;</span>:     <span class="number">18</span>,</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//gin自带格式</span></span><br><span class="line">		data2 := gin.H&#123;</span><br><span class="line">			<span class="string">&quot;name&quot;</span>:    <span class="string">&quot;king&quot;</span>,</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">			<span class="string">&quot;age&quot;</span>:     <span class="number">18</span>,</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//使用结构体</span></span><br><span class="line">		<span class="keyword">type</span> msg <span class="keyword">struct</span> &#123;</span><br><span class="line">			<span class="comment">//go大写不可导出,使用tag来定制化</span></span><br><span class="line">			Name    <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">			Message <span class="type">string</span> <span class="string">`json:&quot;message&quot;`</span></span><br><span class="line">			Age     <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">		&#125;</span><br><span class="line">		data3 := msg&#123;</span><br><span class="line">			Name:    <span class="string">&quot;data3&quot;</span>,</span><br><span class="line">			Message: <span class="string">&quot;struct method build&quot;</span>,</span><br><span class="line">			Age:     <span class="number">1</span>,</span><br><span class="line">		&#125;</span><br><span class="line">		c.JSON(http.StatusOK, data)</span><br><span class="line">		c.JSON(http.StatusOK, data2)</span><br><span class="line">		c.JSON(http.StatusOK, data3)</span><br><span class="line">	&#125;)</span><br><span class="line">	err := r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><p><code>querystring</code>指的是URL中<code>?</code>后面携带的参数，例如：<code>/user/search?username=zyuu&amp;address=tyue</code>。 获取请求的querystring参数的方法如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回querystring参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/web&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//获取浏览器请求携带的query String参数</span></span><br><span class="line">		<span class="comment">//多个参数用&amp;连接</span></span><br><span class="line">		name1 := c.Query(<span class="string">&quot;name1&quot;</span>)</span><br><span class="line">		name2 := c.DefaultQuery(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;golang&quot;</span>) <span class="comment">//默认值</span></span><br><span class="line">		name3, ok := c.GetQuery(<span class="string">&quot;name3&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> !ok &#123;</span><br><span class="line">			<span class="comment">//取不到</span></span><br><span class="line">			name3 = <span class="string">&quot;somebody&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">			http://127.0.0.1:8080/web?name1=hello&amp;name2=world&amp;name3=golang</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;name1&quot;</span>: name1,</span><br><span class="line">			<span class="string">&quot;name2&quot;</span>: name2,</span><br><span class="line">			<span class="string">&quot;name3&quot;</span>: name3,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	err := r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="FORM"><a href="#FORM" class="headerlink" title="FORM"></a>FORM</h2><p>当前端请求的数据通过form表单提交时，发送一个POST请求，获取请求数据的方式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.LoadHTMLFiles(<span class="string">&quot;./login.html&quot;</span>, <span class="string">&quot;./index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">	r.GET(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;login.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">// 接收 /login的post请求</span></span><br><span class="line">	r.POST(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//和 index的form中的name绑定,需要一样</span></span><br><span class="line">		username := c.DefaultPostForm(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;NO NAME&quot;</span>)</span><br><span class="line">		password, ok := c.GetPostForm(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> !ok &#123;</span><br><span class="line">			password = <span class="string">&quot;no password get&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;index.html&quot;</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;Name&quot;</span>:     username,</span><br><span class="line">			<span class="string">&quot;Password&quot;</span>: password,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	err := r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">./login.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">./index.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello,&#123;&#123; .Name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>your password is:&#123;&#123; .Password&#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取请求path参数uri</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/user/:name/:age&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//获取路劲参数</span></span><br><span class="line">		name := c.Param(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">		age := c.Param(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">			<span class="string">&quot;age&quot;</span>:  age,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.GET(<span class="string">&quot;/blog/:year/:month/:day&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		year := c.Param(<span class="string">&quot;year&quot;</span>)</span><br><span class="line">		month := c.Param(<span class="string">&quot;month&quot;</span>)</span><br><span class="line">		day := c.Param(<span class="string">&quot;day&quot;</span>)</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;year&quot;</span>:  year,</span><br><span class="line">			<span class="string">&quot;month&quot;</span>: month,</span><br><span class="line">			<span class="string">&quot;day&quot;</span>:   day,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	err := r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Bind"><a href="#Bind" class="headerlink" title="Bind"></a>Bind</h2><p>为了能够更方便的获取请求相关参数，提高开发效率，我们可以基于请求的<code>Content-Type</code>识别请求数据类型并利用反射机制自动提取请求中<code>QueryString</code>、<code>form表单</code>、<code>JSON</code>、<code>XML</code>等参数到结构体中。 下面的示例代码演示了<code>.ShouldBind()</code>强大的功能，它能够基于请求自动提取<code>JSON</code>、<code>form表单</code>和<code>QueryString</code>类型的数据，并把值绑定到指定的结构体对象。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> userinfo <span class="keyword">struct</span> &#123;</span><br><span class="line">	Username <span class="type">string</span> <span class="string">`form:&quot;username&quot; json:&quot;username&quot;`</span></span><br><span class="line">	Password <span class="type">string</span> <span class="string">`form:&quot;password&quot; json:&quot;password&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/user&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		username := c.Query(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">		password := c.Query(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">		u := userinfo&#123;</span><br><span class="line">			Username: username,</span><br><span class="line">			Password: password,</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, u)</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">/*为了能够更方便的获取请求相关参数，提高开发效率，</span></span><br><span class="line"><span class="comment">	我们可以基于请求的Content-Type识别请求数据类型</span></span><br><span class="line"><span class="comment">	并利用反射机制自动提取请求中QueryString、form表单、JSON、XML等参数到结构体中。</span></span><br><span class="line"><span class="comment">	.ShouldBind()基于请求自动提取JSON、form表单和QueryString类型的数据，并把值绑定到指定的结构体对象。*/</span></span><br><span class="line">	<span class="comment">//ShouldBind() querystring</span></span><br><span class="line">	r.GET(<span class="string">&quot;/query&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="keyword">var</span> u userinfo <span class="comment">//声明遍历</span></span><br><span class="line">		err := c.ShouldBind(&amp;u)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			c.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;error&quot;</span>: err.Error(),</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;status&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, u)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//ShouldBind() post</span></span><br><span class="line">	r.POST(<span class="string">&quot;/form&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="keyword">var</span> u userinfo <span class="comment">//声明遍历</span></span><br><span class="line">		err := c.ShouldBind(&amp;u)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			c.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;error&quot;</span>: err.Error(),</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;status&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, u)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//ShouldBind() json</span></span><br><span class="line">	r.POST(<span class="string">&quot;/json&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="keyword">var</span> u userinfo</span><br><span class="line">		err := c.ShouldBind(&amp;u)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			c.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;error&quot;</span>: err.Error(),</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;status&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, u)</span><br><span class="line"></span><br><span class="line">	&#125;)</span><br><span class="line">	err := r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="SaveFiles"><a href="#SaveFiles" class="headerlink" title="SaveFiles"></a>SaveFiles</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;path&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.LoadHTMLFiles(<span class="string">&quot;./index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">	r.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;index.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//单文件</span></span><br><span class="line">	r.POST(<span class="string">&quot;/upload&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//从请求中读取文件,将读取的文件保存到本地</span></span><br><span class="line">		f, err := c.FormFile(<span class="string">&quot;f1&quot;</span>) <span class="comment">//从请求中获取</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			c.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;error&quot;</span>: err.Error(),</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//保存本地</span></span><br><span class="line">			<span class="comment">//dst := fmt.Sprintf(&quot;./%s&quot;, f.Filename)</span></span><br><span class="line">			dst := path.Join(<span class="string">&quot;./&quot;</span>, f.Filename)</span><br><span class="line">			err = c.SaveUploadedFile(f, dst)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="built_in">panic</span>(err)</span><br><span class="line">			&#125;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;status&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//多文件</span></span><br><span class="line">	r.POST(<span class="string">&quot;/uploadMultiFile&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//多个文件上传</span></span><br><span class="line">		f, err := c.MultipartForm() <span class="comment">//从请求中获取</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			c.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;error&quot;</span>: err.Error(),</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">/*&lt;input type=&quot;file&quot; name=&quot;fs&quot; id=&quot;fs&quot; multiple=&quot;multiple&quot; /&gt;</span></span><br><span class="line"><span class="comment">			中的name字段与fs := form.File[&quot;fs&quot;]中的索引&quot;fs&quot;相对应，</span></span><br><span class="line"><span class="comment">			同一个batch的文件共享一个name</span></span><br><span class="line"><span class="comment">			*/</span></span><br><span class="line">			files := f.File[<span class="string">&quot;file&quot;</span>]</span><br><span class="line">			<span class="keyword">for</span> index, file := <span class="keyword">range</span> files &#123;</span><br><span class="line">				log.Println(file.Filename)</span><br><span class="line">				dst := fmt.Sprintf(<span class="string">&quot;./%d_%s&quot;</span>, index, file.Filename)</span><br><span class="line">				err = c.SaveUploadedFile(file, dst)</span><br><span class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">					<span class="built_in">panic</span>(err)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;status&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	err := r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">./index.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;f1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/uploadMultiFile&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Redirect-重定向"><a href="#Redirect-重定向" class="headerlink" title="Redirect 重定向"></a>Redirect 重定向</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	<span class="comment">//HTTP的重定向</span></span><br><span class="line">	r.GET(<span class="string">&quot;/redirect&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.Redirect(http.StatusMovedPermanently, <span class="string">&quot;https://www.bilibili.com&quot;</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//路由从重定向</span></span><br><span class="line">	r.GET(<span class="string">&quot;/a&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.Request.URL.Path = <span class="string">&quot;/b&quot;</span> <span class="comment">//把请求的uri修改</span></span><br><span class="line">		r.HandleContext(c)        <span class="comment">//继续后续处理</span></span><br><span class="line">	&#125;)</span><br><span class="line">	r.GET(<span class="string">&quot;/b&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	err := r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h2><p>Gin框架中的路由使用的是<a href="https://github.com/julienschmidt/httprouter">httprouter</a>这个库。</p>
<p>其基本原理就是构造一个路由地址的前缀树。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	<span class="comment">//路由 单独写</span></span><br><span class="line">	r.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;method&quot;</span>: <span class="string">&quot;GET&quot;</span>&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.POST(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;method&quot;</span>: <span class="string">&quot;post&quot;</span>&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.PUT(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;method&quot;</span>: <span class="string">&quot;put&quot;</span>&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.DELETE(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;method&quot;</span>: <span class="string">&quot;delete&quot;</span>&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//any</span></span><br><span class="line">	r.Any(<span class="string">&quot;/user&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="keyword">switch</span> c.Request.Method &#123;</span><br><span class="line">		<span class="keyword">case</span> http.MethodGet:</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;method&quot;</span>: <span class="string">&quot;GET&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">case</span> http.MethodPost:</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;method&quot;</span>: <span class="string">&quot;POST&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">case</span> http.MethodPut:</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;method&quot;</span>: <span class="string">&quot;PUT&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">case</span> http.MethodDelete:</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;method&quot;</span>: <span class="string">&quot;DELETE&quot;</span>&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//NoRoute 不存在的路由</span></span><br><span class="line">	r.NoRoute(<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusNoContent, gin.H&#123;<span class="string">&quot;MSG&quot;</span>: <span class="string">&quot;NOT FOUND&quot;</span>&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//嵌套</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//路由组 提取公共前缀</span></span><br><span class="line">	<span class="comment">//视频的首页和详细页</span></span><br><span class="line">	videoGroup := r.Group(<span class="string">&quot;/video&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		videoGroup.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;/video/index&quot;</span>&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">		videoGroup.GET(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;/video/login&quot;</span>&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">		videoGroup.POST(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;/video/login&quot;</span>&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//商城的首页和详细页</span></span><br><span class="line">	ShopGroup := r.Group(<span class="string">&quot;/shop&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ShopGroup.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;/shop/index&quot;</span>&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">		ShopGroup.GET(<span class="string">&quot;/page2&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;/shop/page2&quot;</span>&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">		ShopGroup.GET(<span class="string">&quot;/page3&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;/shop/page3&quot;</span>&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	err := r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Gin框架允许开发者在处理请求的过程中，</span></span><br><span class="line"><span class="comment">加入用户自己的钩子（Hook）函数。</span></span><br><span class="line"><span class="comment">这个钩子函数就叫中间件，</span></span><br><span class="line"><span class="comment">中间件适合处理一些公共的业务逻辑，</span></span><br><span class="line"><span class="comment">比如登录认证、权限校验、数据分页、记录日志、耗时统计等</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	<span class="comment">//默认使用Default中间件包含Logger(), Recovery()</span></span><br><span class="line">	<span class="comment">//若不想用</span></span><br><span class="line">	<span class="comment">//r:=gin.New()</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//注册中间件 后可在接下来不需要取在GET方法中写StatCost()</span></span><br><span class="line">	r.Use(StatCost(), StatCost2())</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		r.GET(&quot;/index&quot;, StatCost(), func(c *gin.Context) &#123;</span></span><br><span class="line"><span class="comment">			c.JSON(http.StatusOK, gin.H&#123;&quot;message&quot;: &quot;index&quot;&#125;)</span></span><br><span class="line"><span class="comment">		&#125;)</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	r.GET(<span class="string">&quot;/index1&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//get()-&gt; StatCost2()的c.Set</span></span><br><span class="line">		name, ok := c.Get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> !ok &#123;</span><br><span class="line">			name = <span class="string">&quot;lambda name&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: name&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.GET(<span class="string">&quot;/index2&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;index2&quot;</span>&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//#region 为路由组注册</span></span><br><span class="line">	<span class="comment">/*法1*/</span></span><br><span class="line">	shopGroup := r.Group(<span class="string">&quot;/shop2&quot;</span>, StatCost())</span><br><span class="line">	&#123;</span><br><span class="line">		shopGroup.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;group&quot;</span>: <span class="string">&quot;get&quot;</span>&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*法2*/</span></span><br><span class="line">	<span class="comment">/*	shopGroup2 := r.Group(&quot;/shop2&quot;)</span></span><br><span class="line"><span class="comment">		shopGroup2.Use(StatCost())</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">			shopGroup.GET(&quot;/index&quot;, func(c *gin.Context) &#123;</span></span><br><span class="line"><span class="comment">				c.JSON(http.StatusOK, gin.H&#123;&quot;m&quot;: &quot;m&quot;&#125;)</span></span><br><span class="line"><span class="comment">			&#125;)</span></span><br><span class="line"><span class="comment">		&#125;*/</span></span><br><span class="line">	<span class="comment">//#endregion</span></span><br><span class="line"></span><br><span class="line">	err := r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//StatCost 与 StatCost2 均含有Next(),</span></span><br><span class="line"><span class="comment">//类似与栈,stat1 -&gt; next() -&gt; stat2 -&gt; next() -&gt;lambdaFunc -&gt; stat2End -&gt; statEnd</span></span><br><span class="line"><span class="comment">//若statCost2 含有Abort()会阻止后续运行,至此方法结束</span></span><br><span class="line"><span class="comment">//类似与栈,stat1 -&gt; next() -&gt; stat2 -&gt; Abort() -&gt; stat2End</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*权限判断</span></span><br><span class="line"><span class="comment">if 符合</span></span><br><span class="line"><span class="comment">Next()</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">Abort()*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// StatCost  定义 Gin中的中间件必须是一个gin.HandlerFunc类型。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//	@Description: 统计耗时</span></span><br><span class="line"><span class="comment">//	@return gin.HandlerFunc</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StatCost</span><span class="params">()</span></span> gin.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;------------start------------&quot;</span>)</span><br><span class="line">		start := time.Now()</span><br><span class="line">		<span class="comment">//当在中间件或handler中启动新的goroutine时</span></span><br><span class="line">		<span class="comment">//不能使用原始的上下文（c *gin.Context）</span></span><br><span class="line">		<span class="comment">//必须使用其只读副本（c.Copy()）</span></span><br><span class="line">		<span class="comment">/*go funcXXX(c.Copy())*/</span></span><br><span class="line">		c.Next() <span class="comment">//调用后续的函数</span></span><br><span class="line">		<span class="comment">//c.Abort()//组织调用后续函数</span></span><br><span class="line">		cost := time.Since(start)</span><br><span class="line">		fmt.Println(<span class="string">&quot;------------end------------&quot;</span>)</span><br><span class="line">		log.Printf(<span class="string">&quot;[Log] cost:%v\n&quot;</span>, cost)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StatCost2</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//	@Description: 栈思想</span></span><br><span class="line"><span class="comment">//	@return gin.HandlerFunc</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StatCost2</span><span class="params">()</span></span> gin.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;------start------&quot;</span>)</span><br><span class="line">		c.Set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;SetSuccess&quot;</span>)</span><br><span class="line">		c.Next() <span class="comment">//调用后续的函数</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;------end-------&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Gin</tag>
        <tag>GoWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>8.24leetcode1267</title>
    <url>/2023/08/24/leetcode8-24/</url>
    <content><![CDATA[<h1 id="1267-Count-Servers-that-Communicate"><a href="#1267-Count-Servers-that-Communicate" class="headerlink" title="1267.Count Servers that Communicate"></a>1267.Count Servers that Communicate</h1><p>You are given a map of a server center,<br> represented as a <code>m * n</code> integer matrix <code>grid</code>,<br>where 1 means that on that cell there is a server and 0 means that it is no server.<br>Two servers are said to communicate if they are on the same row or on the same column.</p>
<p>Return the number of servers that communicate with any other server.</p>
<p><img src="/./../pic/leetcode8-24/image-20230903003258130.png" alt="image-20230903003258130"></p>
<span id="more"></span>

<h2 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="comment">// 1267</span></span><br><span class="line"><span class="comment">// leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countServers</span><span class="params">(grid [][]<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	ret := <span class="number">0</span></span><br><span class="line">	rowLen, colLen := <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">	row, col := <span class="built_in">make</span>([]<span class="type">int</span>, rowLen), <span class="built_in">make</span>([]<span class="type">int</span>, colLen)</span><br><span class="line">	<span class="comment">//Count the number of servers per row and column</span></span><br><span class="line">	<span class="keyword">for</span> rowIdx := <span class="keyword">range</span> grid &#123;</span><br><span class="line">		<span class="keyword">for</span> colIdx, v := <span class="keyword">range</span> grid[rowIdx] &#123;</span><br><span class="line">			<span class="keyword">if</span> v == <span class="number">1</span> &#123;</span><br><span class="line">				row[rowIdx]++</span><br><span class="line">				col[colIdx]++</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">// Traverse per row&amp;col,check servers&#x27; nums are whether nums&gt;1</span></span><br><span class="line">	<span class="keyword">for</span> rowIdx := <span class="keyword">range</span> grid &#123;</span><br><span class="line">		<span class="keyword">for</span> colIdx, v := <span class="keyword">range</span> grid[rowIdx] &#123;</span><br><span class="line">			<span class="keyword">if</span> v == <span class="number">1</span> &amp;&amp; (row[rowIdx] &gt; <span class="number">1</span> || col[colIdx] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">				ret++</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Graph</tag>
      </tags>
  </entry>
</search>
