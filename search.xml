<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello</title>
    <url>/2023/08/31/Hello/</url>
    <content><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;hello golang&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>gin</title>
    <url>/2023/08/31/gin/</url>
    <content><![CDATA[<h1 id="Gin-框架的使用"><a href="#Gin-框架的使用" class="headerlink" title="Gin 框架的使用"></a>Gin 框架的使用</h1><p><strong>Gin</strong> 是一个用 <strong>Go (Golang)</strong> 编写的 HTTP Web 框架。 它具有类似 Martini 的 API，但性能比 Martini 快 40 倍。如果你需要极好的性能</p>
<span id="more"></span>

<h2 id="RESTful约定"><a href="#RESTful约定" class="headerlink" title="RESTful约定"></a>RESTful约定</h2><ul>
<li><code>GET</code>用来获取资源</li>
<li><code>POST</code>用来新建资源</li>
<li><code>PUT</code>用来更新资源</li>
<li><code>DELETE</code>用来删除资源。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Get&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.POST(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Post&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.PUT(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Put&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.DELETE(<span class="string">&quot;/book&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Delete&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	err := r.Run()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="GIN渲染"><a href="#GIN渲染" class="headerlink" title="GIN渲染"></a>GIN渲染</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;html/template&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	<span class="comment">//自定义函数</span></span><br><span class="line">	r.SetFuncMap(template.FuncMap&#123;</span><br><span class="line">		<span class="string">&quot;safe&quot;</span>: <span class="function"><span class="keyword">func</span><span class="params">(str <span class="type">string</span>)</span></span> template.HTML &#123;</span><br><span class="line">			<span class="keyword">return</span> template.HTML(str)</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//加载静态文件css img</span></span><br><span class="line">	r.Static(<span class="string">&quot;/xxx&quot;</span>, <span class="string">&quot;./static&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//模板解析</span></span><br><span class="line">	<span class="comment">//r.LoadHTMLFiles(&quot;templates/get/index.tmpl&quot;, &quot;templates/put/index.tmpl&quot;)</span></span><br><span class="line">	r.LoadHTMLGlob(<span class="string">&quot;./templates/**/*&quot;</span>)</span><br><span class="line">	r.GET(<span class="string">&quot;/get/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123; <span class="comment">//模板渲染</span></span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;get/index.tmpl&quot;</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;title&quot;</span>: <span class="string">&quot;&lt;a href=&#x27;https://bilibili.com&#x27;&gt;bilibili&lt;/a&gt;&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.POST(<span class="string">&quot;/post/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123; <span class="comment">//模板渲染</span></span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;post/index.tmpl&quot;</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;title&quot;</span>: <span class="string">&quot;genshin&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.DELETE(<span class="string">&quot;/delete/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123; <span class="comment">//模板渲染</span></span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;delete/index.tmpl&quot;</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;title&quot;</span>: <span class="string">&quot;genshin&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//下载的模板返回</span></span><br><span class="line">	r.PUT(<span class="string">&quot;/put/home&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123; <span class="comment">//模板渲染</span></span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;home.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	err := r.Run(<span class="string">&quot;127.0.0.1:9090&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以POST为例,其他大同小异</p>
<p><code>./gin01template\templates\post\index.tmpl</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;define &quot;post/index.tmpl&quot;&#125;&#125;</span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>get<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;&#123;.title|safe&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// gin 返回json到前端</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/json&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//1.使用 map</span></span><br><span class="line">		data := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">			<span class="string">&quot;name&quot;</span>:    <span class="string">&quot;king&quot;</span>,</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">			<span class="string">&quot;age&quot;</span>:     <span class="number">18</span>,</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//gin自带格式</span></span><br><span class="line">		data2 := gin.H&#123;</span><br><span class="line">			<span class="string">&quot;name&quot;</span>:    <span class="string">&quot;king&quot;</span>,</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">			<span class="string">&quot;age&quot;</span>:     <span class="number">18</span>,</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//使用结构体</span></span><br><span class="line">		<span class="keyword">type</span> msg <span class="keyword">struct</span> &#123;</span><br><span class="line">			<span class="comment">//go大写不可导出,使用tag来定制化</span></span><br><span class="line">			Name    <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">			Message <span class="type">string</span> <span class="string">`json:&quot;message&quot;`</span></span><br><span class="line">			Age     <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">		&#125;</span><br><span class="line">		data3 := msg&#123;</span><br><span class="line">			Name:    <span class="string">&quot;data3&quot;</span>,</span><br><span class="line">			Message: <span class="string">&quot;struct method build&quot;</span>,</span><br><span class="line">			Age:     <span class="number">1</span>,</span><br><span class="line">		&#125;</span><br><span class="line">		c.JSON(http.StatusOK, data)</span><br><span class="line">		c.JSON(http.StatusOK, data2)</span><br><span class="line">		c.JSON(http.StatusOK, data3)</span><br><span class="line">	&#125;)</span><br><span class="line">	err := r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><p><code>querystring</code>指的是URL中<code>?</code>后面携带的参数，例如：<code>/user/search?username=zyuu&amp;address=tyue</code>。 获取请求的querystring参数的方法如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回querystring参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/web&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//获取浏览器请求携带的query String参数</span></span><br><span class="line">		<span class="comment">//多个参数用&amp;连接</span></span><br><span class="line">		name1 := c.Query(<span class="string">&quot;name1&quot;</span>)</span><br><span class="line">		name2 := c.DefaultQuery(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;golang&quot;</span>) <span class="comment">//默认值</span></span><br><span class="line">		name3, ok := c.GetQuery(<span class="string">&quot;name3&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> !ok &#123;</span><br><span class="line">			<span class="comment">//取不到</span></span><br><span class="line">			name3 = <span class="string">&quot;somebody&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">			http://127.0.0.1:8080/web?name1=hello&amp;name2=world&amp;name3=golang</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;name1&quot;</span>: name1,</span><br><span class="line">			<span class="string">&quot;name2&quot;</span>: name2,</span><br><span class="line">			<span class="string">&quot;name3&quot;</span>: name3,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	err := r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="FORM"><a href="#FORM" class="headerlink" title="FORM"></a>FORM</h2><p>当前端请求的数据通过form表单提交时，发送一个POST请求，获取请求数据的方式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.LoadHTMLFiles(<span class="string">&quot;./login.html&quot;</span>, <span class="string">&quot;./index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">	r.GET(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;login.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">// 接收 /login的post请求</span></span><br><span class="line">	r.POST(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//和 index的form中的name绑定,需要一样</span></span><br><span class="line">		username := c.DefaultPostForm(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;NO NAME&quot;</span>)</span><br><span class="line">		password, ok := c.GetPostForm(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> !ok &#123;</span><br><span class="line">			password = <span class="string">&quot;no password get&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;index.html&quot;</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;Name&quot;</span>:     username,</span><br><span class="line">			<span class="string">&quot;Password&quot;</span>: password,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	err := r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">./login.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">./index.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello,&#123;&#123; .Name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>your password is:&#123;&#123; .Password&#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取请求path参数uri</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/user/:name/:age&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//获取路劲参数</span></span><br><span class="line">		name := c.Param(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">		age := c.Param(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">			<span class="string">&quot;age&quot;</span>:  age,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.GET(<span class="string">&quot;/blog/:year/:month/:day&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		year := c.Param(<span class="string">&quot;year&quot;</span>)</span><br><span class="line">		month := c.Param(<span class="string">&quot;month&quot;</span>)</span><br><span class="line">		day := c.Param(<span class="string">&quot;day&quot;</span>)</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;year&quot;</span>:  year,</span><br><span class="line">			<span class="string">&quot;month&quot;</span>: month,</span><br><span class="line">			<span class="string">&quot;day&quot;</span>:   day,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	err := r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Bind"><a href="#Bind" class="headerlink" title="Bind"></a>Bind</h2><p>为了能够更方便的获取请求相关参数，提高开发效率，我们可以基于请求的<code>Content-Type</code>识别请求数据类型并利用反射机制自动提取请求中<code>QueryString</code>、<code>form表单</code>、<code>JSON</code>、<code>XML</code>等参数到结构体中。 下面的示例代码演示了<code>.ShouldBind()</code>强大的功能，它能够基于请求自动提取<code>JSON</code>、<code>form表单</code>和<code>QueryString</code>类型的数据，并把值绑定到指定的结构体对象。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> userinfo <span class="keyword">struct</span> &#123;</span><br><span class="line">	Username <span class="type">string</span> <span class="string">`form:&quot;username&quot; json:&quot;username&quot;`</span></span><br><span class="line">	Password <span class="type">string</span> <span class="string">`form:&quot;password&quot; json:&quot;password&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/user&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		username := c.Query(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">		password := c.Query(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">		u := userinfo&#123;</span><br><span class="line">			Username: username,</span><br><span class="line">			Password: password,</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, u)</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">/*为了能够更方便的获取请求相关参数，提高开发效率，</span></span><br><span class="line"><span class="comment">	我们可以基于请求的Content-Type识别请求数据类型</span></span><br><span class="line"><span class="comment">	并利用反射机制自动提取请求中QueryString、form表单、JSON、XML等参数到结构体中。</span></span><br><span class="line"><span class="comment">	.ShouldBind()基于请求自动提取JSON、form表单和QueryString类型的数据，并把值绑定到指定的结构体对象。*/</span></span><br><span class="line">	<span class="comment">//ShouldBind() querystring</span></span><br><span class="line">	r.GET(<span class="string">&quot;/query&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="keyword">var</span> u userinfo <span class="comment">//声明遍历</span></span><br><span class="line">		err := c.ShouldBind(&amp;u)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			c.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;error&quot;</span>: err.Error(),</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;status&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, u)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//ShouldBind() post</span></span><br><span class="line">	r.POST(<span class="string">&quot;/form&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="keyword">var</span> u userinfo <span class="comment">//声明遍历</span></span><br><span class="line">		err := c.ShouldBind(&amp;u)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			c.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;error&quot;</span>: err.Error(),</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;status&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, u)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//ShouldBind() json</span></span><br><span class="line">	r.POST(<span class="string">&quot;/json&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="keyword">var</span> u userinfo</span><br><span class="line">		err := c.ShouldBind(&amp;u)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			c.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;error&quot;</span>: err.Error(),</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;status&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, u)</span><br><span class="line"></span><br><span class="line">	&#125;)</span><br><span class="line">	err := r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="SaveFiles"><a href="#SaveFiles" class="headerlink" title="SaveFiles"></a>SaveFiles</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;path&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.LoadHTMLFiles(<span class="string">&quot;./index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">	r.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.HTML(http.StatusOK, <span class="string">&quot;index.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//单文件</span></span><br><span class="line">	r.POST(<span class="string">&quot;/upload&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//从请求中读取文件,将读取的文件保存到本地</span></span><br><span class="line">		f, err := c.FormFile(<span class="string">&quot;f1&quot;</span>) <span class="comment">//从请求中获取</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			c.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;error&quot;</span>: err.Error(),</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//保存本地</span></span><br><span class="line">			<span class="comment">//dst := fmt.Sprintf(&quot;./%s&quot;, f.Filename)</span></span><br><span class="line">			dst := path.Join(<span class="string">&quot;./&quot;</span>, f.Filename)</span><br><span class="line">			err = c.SaveUploadedFile(f, dst)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="built_in">panic</span>(err)</span><br><span class="line">			&#125;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;status&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//多文件</span></span><br><span class="line">	r.POST(<span class="string">&quot;/uploadMultiFile&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//多个文件上传</span></span><br><span class="line">		f, err := c.MultipartForm() <span class="comment">//从请求中获取</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			c.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;error&quot;</span>: err.Error(),</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">/*&lt;input type=&quot;file&quot; name=&quot;fs&quot; id=&quot;fs&quot; multiple=&quot;multiple&quot; /&gt;</span></span><br><span class="line"><span class="comment">			中的name字段与fs := form.File[&quot;fs&quot;]中的索引&quot;fs&quot;相对应，</span></span><br><span class="line"><span class="comment">			同一个batch的文件共享一个name</span></span><br><span class="line"><span class="comment">			*/</span></span><br><span class="line">			files := f.File[<span class="string">&quot;file&quot;</span>]</span><br><span class="line">			<span class="keyword">for</span> index, file := <span class="keyword">range</span> files &#123;</span><br><span class="line">				log.Println(file.Filename)</span><br><span class="line">				dst := fmt.Sprintf(<span class="string">&quot;./%d_%s&quot;</span>, index, file.Filename)</span><br><span class="line">				err = c.SaveUploadedFile(file, dst)</span><br><span class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">					<span class="built_in">panic</span>(err)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;status&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	err := r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">./index.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;f1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/uploadMultiFile&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Redirect-重定向"><a href="#Redirect-重定向" class="headerlink" title="Redirect 重定向"></a>Redirect 重定向</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	<span class="comment">//HTTP的重定向</span></span><br><span class="line">	r.GET(<span class="string">&quot;/redirect&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.Redirect(http.StatusMovedPermanently, <span class="string">&quot;https://www.bilibili.com&quot;</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//路由从重定向</span></span><br><span class="line">	r.GET(<span class="string">&quot;/a&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.Request.URL.Path = <span class="string">&quot;/b&quot;</span> <span class="comment">//把请求的uri修改</span></span><br><span class="line">		r.HandleContext(c)        <span class="comment">//继续后续处理</span></span><br><span class="line">	&#125;)</span><br><span class="line">	r.GET(<span class="string">&quot;/b&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	err := r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h2><p>Gin框架中的路由使用的是<a href="https://github.com/julienschmidt/httprouter">httprouter</a>这个库。</p>
<p>其基本原理就是构造一个路由地址的前缀树。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	<span class="comment">//路由 单独写</span></span><br><span class="line">	r.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;method&quot;</span>: <span class="string">&quot;GET&quot;</span>&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.POST(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;method&quot;</span>: <span class="string">&quot;post&quot;</span>&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.PUT(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;method&quot;</span>: <span class="string">&quot;put&quot;</span>&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.DELETE(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;method&quot;</span>: <span class="string">&quot;delete&quot;</span>&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//any</span></span><br><span class="line">	r.Any(<span class="string">&quot;/user&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="keyword">switch</span> c.Request.Method &#123;</span><br><span class="line">		<span class="keyword">case</span> http.MethodGet:</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;method&quot;</span>: <span class="string">&quot;GET&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">case</span> http.MethodPost:</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;method&quot;</span>: <span class="string">&quot;POST&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">case</span> http.MethodPut:</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;method&quot;</span>: <span class="string">&quot;PUT&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">case</span> http.MethodDelete:</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;method&quot;</span>: <span class="string">&quot;DELETE&quot;</span>&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">//NoRoute 不存在的路由</span></span><br><span class="line">	r.NoRoute(<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusNoContent, gin.H&#123;<span class="string">&quot;MSG&quot;</span>: <span class="string">&quot;NOT FOUND&quot;</span>&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//嵌套</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//路由组 提取公共前缀</span></span><br><span class="line">	<span class="comment">//视频的首页和详细页</span></span><br><span class="line">	videoGroup := r.Group(<span class="string">&quot;/video&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		videoGroup.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;/video/index&quot;</span>&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">		videoGroup.GET(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;/video/login&quot;</span>&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">		videoGroup.POST(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;/video/login&quot;</span>&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//商城的首页和详细页</span></span><br><span class="line">	ShopGroup := r.Group(<span class="string">&quot;/shop&quot;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ShopGroup.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;/shop/index&quot;</span>&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">		ShopGroup.GET(<span class="string">&quot;/page2&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;/shop/page2&quot;</span>&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">		ShopGroup.GET(<span class="string">&quot;/page3&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;/shop/page3&quot;</span>&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	err := r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Gin框架允许开发者在处理请求的过程中，</span></span><br><span class="line"><span class="comment">加入用户自己的钩子（Hook）函数。</span></span><br><span class="line"><span class="comment">这个钩子函数就叫中间件，</span></span><br><span class="line"><span class="comment">中间件适合处理一些公共的业务逻辑，</span></span><br><span class="line"><span class="comment">比如登录认证、权限校验、数据分页、记录日志、耗时统计等</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	<span class="comment">//默认使用Default中间件包含Logger(), Recovery()</span></span><br><span class="line">	<span class="comment">//若不想用</span></span><br><span class="line">	<span class="comment">//r:=gin.New()</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//注册中间件 后可在接下来不需要取在GET方法中写StatCost()</span></span><br><span class="line">	r.Use(StatCost(), StatCost2())</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		r.GET(&quot;/index&quot;, StatCost(), func(c *gin.Context) &#123;</span></span><br><span class="line"><span class="comment">			c.JSON(http.StatusOK, gin.H&#123;&quot;message&quot;: &quot;index&quot;&#125;)</span></span><br><span class="line"><span class="comment">		&#125;)</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	r.GET(<span class="string">&quot;/index1&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		<span class="comment">//get()-&gt; StatCost2()的c.Set</span></span><br><span class="line">		name, ok := c.Get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> !ok &#123;</span><br><span class="line">			name = <span class="string">&quot;lambda name&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: name&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.GET(<span class="string">&quot;/index2&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;index2&quot;</span>&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//#region 为路由组注册</span></span><br><span class="line">	<span class="comment">/*法1*/</span></span><br><span class="line">	shopGroup := r.Group(<span class="string">&quot;/shop2&quot;</span>, StatCost())</span><br><span class="line">	&#123;</span><br><span class="line">		shopGroup.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">			c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;group&quot;</span>: <span class="string">&quot;get&quot;</span>&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*法2*/</span></span><br><span class="line">	<span class="comment">/*	shopGroup2 := r.Group(&quot;/shop2&quot;)</span></span><br><span class="line"><span class="comment">		shopGroup2.Use(StatCost())</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">			shopGroup.GET(&quot;/index&quot;, func(c *gin.Context) &#123;</span></span><br><span class="line"><span class="comment">				c.JSON(http.StatusOK, gin.H&#123;&quot;m&quot;: &quot;m&quot;&#125;)</span></span><br><span class="line"><span class="comment">			&#125;)</span></span><br><span class="line"><span class="comment">		&#125;*/</span></span><br><span class="line">	<span class="comment">//#endregion</span></span><br><span class="line"></span><br><span class="line">	err := r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//StatCost 与 StatCost2 均含有Next(),</span></span><br><span class="line"><span class="comment">//类似与栈,stat1 -&gt; next() -&gt; stat2 -&gt; next() -&gt;lambdaFunc -&gt; stat2End -&gt; statEnd</span></span><br><span class="line"><span class="comment">//若statCost2 含有Abort()会阻止后续运行,至此方法结束</span></span><br><span class="line"><span class="comment">//类似与栈,stat1 -&gt; next() -&gt; stat2 -&gt; Abort() -&gt; stat2End</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*权限判断</span></span><br><span class="line"><span class="comment">if 符合</span></span><br><span class="line"><span class="comment">Next()</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">Abort()*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// StatCost  定义 Gin中的中间件必须是一个gin.HandlerFunc类型。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//	@Description: 统计耗时</span></span><br><span class="line"><span class="comment">//	@return gin.HandlerFunc</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StatCost</span><span class="params">()</span></span> gin.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;------------start------------&quot;</span>)</span><br><span class="line">		start := time.Now()</span><br><span class="line">		<span class="comment">//当在中间件或handler中启动新的goroutine时</span></span><br><span class="line">		<span class="comment">//不能使用原始的上下文（c *gin.Context）</span></span><br><span class="line">		<span class="comment">//必须使用其只读副本（c.Copy()）</span></span><br><span class="line">		<span class="comment">/*go funcXXX(c.Copy())*/</span></span><br><span class="line">		c.Next() <span class="comment">//调用后续的函数</span></span><br><span class="line">		<span class="comment">//c.Abort()//组织调用后续函数</span></span><br><span class="line">		cost := time.Since(start)</span><br><span class="line">		fmt.Println(<span class="string">&quot;------------end------------&quot;</span>)</span><br><span class="line">		log.Printf(<span class="string">&quot;[Log] cost:%v\n&quot;</span>, cost)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StatCost2</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//	@Description: 栈思想</span></span><br><span class="line"><span class="comment">//	@return gin.HandlerFunc</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StatCost2</span><span class="params">()</span></span> gin.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;------start------&quot;</span>)</span><br><span class="line">		c.Set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;SetSuccess&quot;</span>)</span><br><span class="line">		c.Next() <span class="comment">//调用后续的函数</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;------end-------&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>GoWeb</tag>
        <tag>Gin</tag>
      </tags>
  </entry>
  <entry>
    <title>9.1leetcode2240</title>
    <url>/2023/09/01/leetcode9-1/</url>
    <content><![CDATA[<p>一个整数 <code>total</code> ，表示你拥有的总钱数。同时给你两个整数 <code>cost1</code> 和 <code>cost2</code> ，分别表示一支钢笔和一支铅笔的价格。你可以花费你部分或者全部的钱，去买任意数目的两种笔。</p>
<p>请你返回购买钢笔和铅笔的 <strong>不同方案数目</strong> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：total = 20, cost1 = 10, cost2 = 5</span><br><span class="line">输出：9</span><br><span class="line">解释：一支钢笔的价格为 10 ，一支铅笔的价格为 5 。</span><br><span class="line">- 如果你买 0 支钢笔，那么你可以买 0 ，1 ，2 ，3 或者 4 支铅笔。</span><br><span class="line">- 如果你买 1 支钢笔，那么你可以买 0 ，1 或者 2 支铅笔。</span><br><span class="line">- 如果你买 2 支钢笔，那么你没法买任何铅笔。</span><br><span class="line">所以买钢笔和铅笔的总方案数为 5 + 3 + 1 = 9 种。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：total = 5, cost1 = 10, cost2 = 10</span><br><span class="line">输出：1</span><br><span class="line">解释：钢笔和铅笔的价格都为 10 ，都比拥有的钱数多，所以你没法购买任何文具。所以只有 1 种方案：买 0 支钢笔和 0 支铅笔。</span><br></pre></td></tr></table></figure>

<p><strong>解答:</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="comment">// 2240  2023-09-01 09:08:04</span></span><br><span class="line"><span class="comment">// leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">waysToBuyPensPencils</span><span class="params">(total <span class="type">int</span>, cost1 <span class="type">int</span>, cost2 <span class="type">int</span>)</span></span> <span class="type">int64</span> &#123;</span><br><span class="line">	ret, nums := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> nums*cost1 &lt;= total &#123;</span><br><span class="line">		ret += (total - nums*cost1) / cost2+<span class="number">1</span></span><br><span class="line">		nums++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="type">int64</span>(ret)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法-数学问题</tag>
      </tags>
  </entry>
</search>
